# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class OauthApp(pulumi.CustomResource):
    auto_key_rotation: pulumi.Output[bool]
    auto_submit_toolbar: pulumi.Output[bool]
    client_basic_secret: pulumi.Output[str]
    client_id: pulumi.Output[str]
    client_secret: pulumi.Output[str]
    client_uri: pulumi.Output[str]
    consent_method: pulumi.Output[str]
    custom_client_id: pulumi.Output[str]
    grant_types: pulumi.Output[list]
    groups: pulumi.Output[list]
    hide_ios: pulumi.Output[bool]
    hide_web: pulumi.Output[bool]
    issuer_mode: pulumi.Output[str]
    label: pulumi.Output[str]
    login_uri: pulumi.Output[str]
    logo_uri: pulumi.Output[str]
    name: pulumi.Output[str]
    omit_secret: pulumi.Output[bool]
    policy_uri: pulumi.Output[str]
    post_logout_redirect_uris: pulumi.Output[list]
    profile: pulumi.Output[str]
    redirect_uris: pulumi.Output[list]
    response_types: pulumi.Output[list]
    sign_on_mode: pulumi.Output[str]
    status: pulumi.Output[str]
    token_endpoint_auth_method: pulumi.Output[str]
    tos_uri: pulumi.Output[str]
    type: pulumi.Output[str]
    users: pulumi.Output[list]
    def __init__(__self__, resource_name, opts=None, auto_key_rotation=None, auto_submit_toolbar=None, client_basic_secret=None, client_uri=None, consent_method=None, custom_client_id=None, grant_types=None, groups=None, hide_ios=None, hide_web=None, issuer_mode=None, label=None, login_uri=None, logo_uri=None, omit_secret=None, policy_uri=None, post_logout_redirect_uris=None, profile=None, redirect_uris=None, response_types=None, status=None, token_endpoint_auth_method=None, tos_uri=None, type=None, users=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a OauthApp resource with the given unique name, props, and options.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        
        The **users** object supports the following:
        
          * `id` (`pulumi.Input[str]`)
          * `password` (`pulumi.Input[str]`)
          * `scope` (`pulumi.Input[str]`)
          * `username` (`pulumi.Input[str]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['auto_key_rotation'] = auto_key_rotation
            __props__['auto_submit_toolbar'] = auto_submit_toolbar
            __props__['client_basic_secret'] = client_basic_secret
            __props__['client_uri'] = client_uri
            __props__['consent_method'] = consent_method
            __props__['custom_client_id'] = custom_client_id
            __props__['grant_types'] = grant_types
            __props__['groups'] = groups
            __props__['hide_ios'] = hide_ios
            __props__['hide_web'] = hide_web
            __props__['issuer_mode'] = issuer_mode
            if label is None:
                raise TypeError("Missing required property 'label'")
            __props__['label'] = label
            __props__['login_uri'] = login_uri
            __props__['logo_uri'] = logo_uri
            __props__['omit_secret'] = omit_secret
            __props__['policy_uri'] = policy_uri
            __props__['post_logout_redirect_uris'] = post_logout_redirect_uris
            __props__['profile'] = profile
            __props__['redirect_uris'] = redirect_uris
            __props__['response_types'] = response_types
            __props__['status'] = status
            __props__['token_endpoint_auth_method'] = token_endpoint_auth_method
            __props__['tos_uri'] = tos_uri
            if type is None:
                raise TypeError("Missing required property 'type'")
            __props__['type'] = type
            __props__['users'] = users
            __props__['client_id'] = None
            __props__['client_secret'] = None
            __props__['name'] = None
            __props__['sign_on_mode'] = None
        super(OauthApp, __self__).__init__(
            'okta:deprecated/oauthApp:OauthApp',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, auto_key_rotation=None, auto_submit_toolbar=None, client_basic_secret=None, client_id=None, client_secret=None, client_uri=None, consent_method=None, custom_client_id=None, grant_types=None, groups=None, hide_ios=None, hide_web=None, issuer_mode=None, label=None, login_uri=None, logo_uri=None, name=None, omit_secret=None, policy_uri=None, post_logout_redirect_uris=None, profile=None, redirect_uris=None, response_types=None, sign_on_mode=None, status=None, token_endpoint_auth_method=None, tos_uri=None, type=None, users=None):
        """
        Get an existing OauthApp resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.
        
        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        
        The **users** object supports the following:
        
          * `id` (`pulumi.Input[str]`)
          * `password` (`pulumi.Input[str]`)
          * `scope` (`pulumi.Input[str]`)
          * `username` (`pulumi.Input[str]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()
        __props__["auto_key_rotation"] = auto_key_rotation
        __props__["auto_submit_toolbar"] = auto_submit_toolbar
        __props__["client_basic_secret"] = client_basic_secret
        __props__["client_id"] = client_id
        __props__["client_secret"] = client_secret
        __props__["client_uri"] = client_uri
        __props__["consent_method"] = consent_method
        __props__["custom_client_id"] = custom_client_id
        __props__["grant_types"] = grant_types
        __props__["groups"] = groups
        __props__["hide_ios"] = hide_ios
        __props__["hide_web"] = hide_web
        __props__["issuer_mode"] = issuer_mode
        __props__["label"] = label
        __props__["login_uri"] = login_uri
        __props__["logo_uri"] = logo_uri
        __props__["name"] = name
        __props__["omit_secret"] = omit_secret
        __props__["policy_uri"] = policy_uri
        __props__["post_logout_redirect_uris"] = post_logout_redirect_uris
        __props__["profile"] = profile
        __props__["redirect_uris"] = redirect_uris
        __props__["response_types"] = response_types
        __props__["sign_on_mode"] = sign_on_mode
        __props__["status"] = status
        __props__["token_endpoint_auth_method"] = token_endpoint_auth_method
        __props__["tos_uri"] = tos_uri
        __props__["type"] = type
        __props__["users"] = users
        return OauthApp(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

