# coding: utf-8

"""
    Fiddle Options Platform

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint

import six

from mercury.client.model.direction import Direction
from enum import Enum


class Trade(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        'quantity': 'int',
        'opening_date': 'date',
        'opening_price': 'float',
        'type': 'str',
        'option_legs': 'list[OptionLeg]',
    }

    attribute_map = {
        'symbol': 'symbol',
        'quantity': 'quantity',
        'opening_price': 'openingPrice',
        'opening_date': 'openingDate',
        'type': 'type',
        'option_legs': 'optionLegs',
    }

    """
    Trade, butterfly, condor, iron_condor, single, spread, straddle, strangle, unbalanced_butterfly, vertical_spread
    """
    discriminator_value_class_map = {
        'butterfly': 'Butterfly',
        'strangle': 'Strangle',
        'straddle': 'Straddle',
        'spread': 'Spread',
        'vertical_spread': 'VerticalSpread',
        'single': 'OptionSingle',
        'condor': 'Condor',
        'iron_condor': 'IronCondor',
        'unbalanced_butterfly': 'UnbalancedButterfly'
    }

    def __init__(self,
                 symbol=None,
                 quantity=1,
                 opening_price=None,
                 opening_date=None,
                 option_legs=None,
                 type=None):  # noqa: E501
        """Trade - a model defined in Swagger"""  # noqa: E501

        self._symbol = None
        self._direction = None
        self._quantity = None
        self._opening_date = None
        self._option_legs = None
        self._type = None
        self._opening_price = None
        self.discriminator = 'type'

        self.opening_price = opening_price

        if symbol is not None:
            self.symbol = symbol
        else:
            raise ValueError('Trade symbol is mandatory')
        if quantity is not None:
            self.quantity = quantity
        else:
            raise ValueError('Trade quantity is mandatory')
        if opening_date is not None:
            self.opening_date = opening_date
        else:
            raise ValueError('Trade opening date is mandatory')
        if option_legs is not None:
            self.option_legs = option_legs
        if type is not None:
            self.type = type

    @property
    def symbol(self):
        """Gets the symbol of this Trade.  # noqa: E501


        :return: The symbol of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Trade.


        :param symbol: The symbol of this Trade.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def direction(self):
        """Gets the direction of this Trade.  # noqa: E501


        :return: The direction of this Trade.  # noqa: E501
        :rtype: str
        """
        return Direction.LONG if self.quantity > 0 else Direction.SHORT

    @property
    def quantity(self):
        """Gets the quantity of this Trade.  # noqa: E501


        :return: The quantity of this Trade.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Trade.


        :param quantity: The quantity of this Trade.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def opening_date(self):
        """Gets the opening_date of this Trade.  # noqa: E501


        :return: The opening_date of this Trade.  # noqa: E501
        :rtype: date
        """
        return self._opening_date

    @opening_date.setter
    def opening_date(self, opening_date):
        """Sets the opening_date of this Trade.


        :param opening_date: The opening_date of this Trade.  # noqa: E501
        :type: date
        """

        self._opening_date = opening_date

    @property
    def option_legs(self):
        """Gets the option_legs of this Trade.  # noqa: E501


        :return: The option_legs of this Trade.  # noqa: E501
        :rtype: list[OptionLeg]
        """
        return self._option_legs

    @option_legs.setter
    def option_legs(self, option_legs):
        """Sets the option_legs of this Trade.


        :param option_legs: The option_legs of this Trade.  # noqa: E501
        :type: list[OptionLeg]
        """

        self._option_legs = option_legs

    @property
    def type(self):
        """Gets the opening_date of this Trade.  # noqa: E501


        :return: The opening_date of this Trade.  # noqa: E501
        :rtype: date
        """
        return self._type.lower()

    @type.setter
    def type(self, type):
        """Sets the opening_date of this Trade.


        :param opening_date: The opening_date of this Trade.  # noqa: E501
        :type: date
        """

        self._type = type

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        if self.discriminator in data:
            # refactor: this should probably use getattr(self, discriminator) since it's instance method
            discriminator_value = data[self.discriminator].lower()
            return self.discriminator_value_class_map.get(discriminator_value)
        return None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            elif isinstance(value, Enum):
                result[attr] = value.value
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def to_key(self):
        leg_key = 0
        for leg in self.option_legs:
            leg_key += hash(leg)
        return self.quantity, leg_key

    def __hash__(self):
        return hash(self.to_key())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Trade):
            return False

        return self.to_key() == other.to_key()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self.__eq__(other)
