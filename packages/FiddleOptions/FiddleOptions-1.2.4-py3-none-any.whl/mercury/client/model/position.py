# coding: utf-8

"""
    Fiddle Options Platform

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint

import six


class Position(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'trades': 'list[Trade]'
    }

    attribute_map = {
        'id': 'id',
        'trades': 'trades'
    }

    def __init__(self, id=None, trades=None):  # noqa: E501
        """Position - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._trades = []
        self.discriminator = None

        if id is not None:
            self.id = id
        if trades is not None:
            self.trades = trades

    @property
    def id(self):
        """Gets the id of this Position.  # noqa: E501


        :return: The id of this Position.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Position.


        :param id: The id of this Position.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def trades(self):
        """Gets the trades of this Position.  # noqa: E501


        :return: The trades of this Position.  # noqa: E501
        :rtype: list[Trade]
        """
        return self._trades

    @trades.setter
    def trades(self, trades):
        """Sets the trades of this Position.


        :param trades: The trades of this Position.  # noqa: E501
        :type: list[Trade]
        """

        self._trades = trades

    def add_trade(self, trade):
        """Add trade to this Position

        :param trade: The trade to add to this Position.
        :type: Trade
        :rtype: this Position
        """

        self._trades.append(trade)
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def to_key(self):
        return self.id, self.trades

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Position):
            return False

        return self.to_key() == other.to_key()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self.__eq__(other)
