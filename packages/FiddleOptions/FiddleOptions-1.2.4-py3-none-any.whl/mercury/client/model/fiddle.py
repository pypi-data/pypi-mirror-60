# coding: utf-8

"""
    Fiddle Options Platform

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint

import six


class Fiddle(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'user_id': 'str',
        'title': 'str',
        'description': 'str',
        'content_json': 'str',
        'observation_date': 'date',
        'position': 'Position'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'userId',
        'title': 'title',
        'description': 'description',
        'content_json': 'contentJSON',
        'observation_date': 'observationDate',
        'position': 'position'
    }

    def __init__(self,
                 id=None,
                 user_id=None,
                 title=None,
                 description=None,
                 content_json=None,
                 observation_date=None,
                 position=None):
        """Fiddle - a model defined in Swagger"""

        self._id = None
        self._user_id = None
        self._title = None
        self._description = None
        self._content_json = None
        self._observation_date = None
        self._position = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if user_id is not None:
            self.user_id = user_id
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if content_json is not None:
            self.content_json = content_json
        else:
            self.content_json = '{"chartOrder":["underlying","histpnl","dpnl"],"activePositions":[true]}'
        if observation_date is not None:
            self.observation_date = observation_date
        if position is not None:
            self.position = position

    @property
    def id(self):
        """Gets the id of this Fiddle.  # noqa: E501


        :return: The id of this Fiddle.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Fiddle.


        :param id: The id of this Fiddle.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this Fiddle.  # noqa: E501


        :return: The user_id of this Fiddle.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Fiddle.


        :param user_id: The user_id of this Fiddle.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def title(self):
        """Gets the title of this Fiddle.  # noqa: E501


        :return: The title of this Fiddle.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Fiddle.


        :param title: The title of this Fiddle.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this Fiddle.  # noqa: E501


        :return: The description of this Fiddle.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Fiddle.


        :param description: The description of this Fiddle.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def content_json(self):
        """Gets the content_json of this Fiddle.  # noqa: E501


        :return: The content_json of this Fiddle.  # noqa: E501
        :rtype: str
        """
        return self._content_json

    @content_json.setter
    def content_json(self, content_json):
        """Sets the content_json of this Fiddle.


        :param content_json: The content_json of this Fiddle.  # noqa: E501
        :type: str
        """

        self._content_json = content_json

    @property
    def observation_date(self):
        """Gets the observation_date of this Fiddle.  # noqa: E501


        :return: The observation_date of this Fiddle.  # noqa: E501
        :rtype: date
        """
        return self._observation_date

    @observation_date.setter
    def observation_date(self, observation_date):
        """Sets the observation_date of this Fiddle.


        :param observation_date: The observation_date of this Fiddle.  # noqa: E501
        :type: date
        """

        self._observation_date = observation_date

    @property
    def position(self):
        """Gets the position of this Fiddle.  # noqa: E501


        :return: The position of this Fiddle.  # noqa: E501
        :rtype: Position
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Fiddle.


        :param position: The position of this Fiddle.  # noqa: E501
        :type: Position
        """

        self._position = position

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def to_key(self):
        return self.id, self.title, self.user_id, self.description, self.observation_date

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Fiddle):
            return False

        return self.to_key() == other.to_key()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self.__eq__(other)
