# coding: utf-8

"""
    Fiddle Options Platform

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from mercury.client.model.trade import Trade  # noqa: F401,E501


class ButterflyValueException(Exception):
    pass


class BaseButterfly(Trade):

    def __init__(self,
                 symbol=None,
                 quantity=1,
                 opening_date=None,
                 opening_price=None,
                 first_leg=None,
                 mid_leg=None,
                 third_leg=None,
                 type=None,
                 **kwargs):
        # bug: When creating get_real_child_model() this get's passed 'type' parameter
        #      which throws an exception, so as a temporary workaround, allow any additional
        #      arguments which will be ignored (which may or may not be desired)
        #      This probably affects all models for deserialization
        #      Possible solution: remove the discriminator parameter from kwargs in all objects
        """Butterfly - a model defined in Swagger"""  # noqa: E501

        # refactor: legs conditions and setter
        # When converting expanded Trade json from server with Butterfly type
        # __deserialize method passes optionLegs instead of first_,mid_,third_let
        option_leg_list = kwargs.get('option_legs', None)
        arg_option_leg_list = [first_leg, mid_leg, third_leg]

        # Explicit functionality, either optionLegs or through arguments

        assert (option_leg_list is None and None not in arg_option_leg_list) or \
               (option_leg_list is not None and arg_option_leg_list.count(None) == 3)

        option_legs = option_leg_list if option_leg_list else arg_option_leg_list

        self.first_leg, self.mid_leg, self.third_leg = option_legs

        assert type is not None
        assert option_legs is not None

        super(BaseButterfly, self).__init__(
            symbol=symbol,
            quantity=quantity,
            opening_date=opening_date,
            opening_price=opening_price,
            option_legs=option_legs,
            type=type)

        if not all(l.expiration_date == self.first_leg.expiration_date for l in self.option_legs):
            raise ButterflyValueException('All option legs must have the same expiration')

        if self.first_leg.direction != self.third_leg.direction:
            raise ButterflyValueException('First and third leg should have the same direction')

        if self.first_leg.direction == self.mid_leg.direction:
            raise ButterflyValueException('First and mid leg should have the opposite direction')

        if self.first_leg.strike > self.mid_leg.strike or \
                self.mid_leg.strike > self.third_leg.strike:
            raise ButterflyValueException('Invalid OptionLeg strikes in butterfly setup')

        if not (all(l.is_call() for l in self.option_legs) or
                all(l.is_put() for l in self.option_legs)):
            raise ButterflyValueException('Can not mix option legs of different type (calls/puts)')


class Butterfly(BaseButterfly):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        'quantity': 'int',
        'opening_date': 'date',
        'opening_price': 'float',
        'type': 'str',
        'option_legs': 'list[OptionLeg]',
    }

    attribute_map = {
        'symbol': 'symbol',
        'quantity': 'quantity',
        'opening_date': 'openingDate',
        'opening_price': 'openingPrice',
        'type': 'type',
        'option_legs': 'optionLegs',
    }

    def __init__(self,
                 symbol=None,
                 quantity=1,
                 opening_date=None,
                 opening_price=None,
                 first_leg=None,
                 mid_leg=None,
                 third_leg=None,
                 **kwargs):  # noqa: E501

        # refactor: temporary workaround
        if 'type' in kwargs:
            assert kwargs['type'] == 'butterfly'
            del kwargs['type']

        super(Butterfly, self).__init__(
            symbol=symbol,
            quantity=quantity,
            opening_date=opening_date,
            opening_price=opening_price,
            first_leg=first_leg,
            mid_leg=mid_leg,
            third_leg=third_leg,
            type='butterfly',
            **kwargs)

        if self.first_leg.quantity != self.third_leg.quantity or \
                self.first_leg.quantity_abs * 2 != self.mid_leg.quantity_abs:
            raise ButterflyValueException('Invalid quantity between option legs in butterfly setup')

        self.discriminator = None

    def __hash__(self):
        return hash(self.to_key())

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Butterfly):
            return False

        return self.to_key() == other.to_key()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self.__eq__(other)
