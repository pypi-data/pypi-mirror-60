# coding: utf-8

"""
    Fiddle Options Platform

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint

import six

from mercury.client.model import Spread, Direction
from mercury.client.model.option_contract_type import OptionContractType


class VerticalSpread(Spread):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        'quantity': 'int',
        'opening_date': 'date',
        'type': 'str',
        'option_legs': 'list[OptionLeg]'

    }

    attribute_map = {
        'symbol': 'symbol',
        'quantity': 'quantity',
        'opening_date': 'openingDate',
        'type': 'type',
        'option_legs': 'optionLegs'
    }

    def __init__(self,
                 symbol=None,
                 opening_date=None,
                 quantity=1,
                 short_leg=None,
                 long_leg=None,
                 option_legs=None,
                 type='vertical_spread'):
        if option_legs is None:
            option_legs = [short_leg, long_leg]
        else:
            long_leg = option_legs[1]
            short_leg = option_legs[0]

        self.discriminator = None
        """VerticalSpread - a model defined in Swagger"""
        super(VerticalSpread, self).__init__(
            symbol=symbol,
            opening_date=opening_date,
            quantity=quantity,
            leg1=short_leg,
            leg2=long_leg,
            option_legs=option_legs,
            type=type)

        if short_leg.type != long_leg.type:
            raise ValueError(
                'Both legs have to be the same option contract type')
        if short_leg.direction == long_leg.direction:
            raise ValueError(
                'Short and long leg should have opposite direction')
        if short_leg.quantity_abs != long_leg.quantity_abs:
            raise ValueError('Short and long leg have different quantities')
        if short_leg.expiration_date != long_leg.expiration_date:
            raise ValueError('Short and log leg have different expirations')

        if self.direction == Direction.LONG:
            if short_leg.type == OptionContractType.CALL:
                if long_leg.strike > short_leg.strike:
                    raise ValueError(
                        'For long call vertical spread long strike has to be '
                        'less than short strike')
            elif short_leg.type == OptionContractType.PUT:
                if short_leg.strike > long_leg.strike:
                    raise ValueError(
                        'For long put vertical spread short strike has to be '
                        'less than long strike')
        elif self.direction == Direction.SHORT:
            if short_leg.type == OptionContractType.CALL:
                if long_leg.strike < short_leg.strike:
                    raise ValueError(
                        'For short call vertical spread long strike has to be '
                        'greater than short strike')
            elif short_leg.type == OptionContractType.PUT:
                if short_leg.strike < long_leg.strike:
                    raise ValueError(
                        'For short put vertical spread short strike has to be '
                        'greater than long strike')

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __hash__(self):
        return hash(self.to_key())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VerticalSpread):
            return False

        return self.to_key() == other.to_key()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self.__eq__(other)
