# coding: utf-8

"""
    Fiddle Options Platform

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import unittest
from datetime import date
import pandas as pd
from mercury import MarketdataApi
from mercury.client.model.option_contract_type import OptionContractType
from mercury.client.model import OptionContract
from tests.utils import create_api_client


class TestMarketdataApi(unittest.TestCase):
    """MarketdataApi unit test stubs"""

    def setUp(self):
        self.api = MarketdataApi(api_client=create_api_client())

    def tearDown(self):
        pass

    def check_caching(self, cache_index, expected_cache_size=1):
        if self.api.is_cached():
            cache_size = self.api.caches[cache_index].currsize
            assert cache_size == expected_cache_size, \
                "Incorrect cache size {}, expected {} ".format(cache_size, expected_cache_size)

    def test_get_equity_quote_pandas(self):
        pf = self.get_option_chain_helper(use_pandas=True)
        isinstance(pf, pd.DataFrame)
        assert pf.size > 0

    def test_get_equity_quote(self):
        self.get_equity_quote_helper()

    def get_equity_quote_helper(self, use_pandas=False):
        """Test case for get_equity_quote

        Returns equity quotes for each trading day for the given ticker and time period  # noqa: E501
        """
        name = "SPX"
        data = {'from_date': date(2018, 4, 1),
                'to_date': date(2018, 5, 1),
                'return_pandas': use_pandas}
        response = self.api.get_equity_quote(name, **data)
        self.check_caching(0)

    def test_get_equity_quote_before(self):
        self.get_equity_quote_before_helper()

    def test_get_equity_quote_before_pandas(self):
        pf = self.get_equity_quote_before_helper(use_pandas=True, print_response=False)
        assert isinstance(pf, pd.DataFrame)

    def get_equity_quote_before_helper(self, use_pandas=False, print_response=False):
        """Test case for get_equity_quote_before
        """
        trading_days_count = 5
        name = "SPX"
        data = {'from_date': date(2018, 8, 1),
                'count': trading_days_count,
                'return_pandas': use_pandas}
        response = self.api.get_equity_quote_before(name, **data)
        if print_response:
            print(response)
        assert len(response) == trading_days_count

        self.check_caching(1)
        return response

    def test_is_trading_day(self):

        data = {'date': date(2018, 8, 30)}
        response = self.api.is_trading_day(**data)
        self.assertTrue(response)

        data = {'date': date(2018, 9, 1)}
        response = self.api.is_trading_day(**data)
        self.assertFalse(response)

        self.check_caching(8, 2)

    def test_get_expirations(self):
        """Test case for get_expirations

        Returns expirations for the given symbol and trading date  # noqa: E501
        """
        name = "SPX"
        dt = date(2018, 4, 2)
        data = {'date': dt}
        response = self.api.get_expirations(name, **data)
        assert len(response) > 0

        self.check_caching(3)

    def test_get_closest_strike_to_delta(self):
        """Test case for get_closest_strike_to_delta

        Returns option contract from the option chain closest to the given symbol, option type, trading date, expiration, and the delta  # noqa: E501
        """
        name = "SPX"
        data = {'contract_type': OptionContractType.CALL,
                'date': date(2018, 4, 9),
                'expiration': date(2018, 6, 15),
                'delta': 0.5}
        response = self.api.get_closest_strike_to_delta(name, **data)
        assert isinstance(response, OptionContract)

        self.check_caching(2)

    def test_get_horizontally_sliced_option_chain_by_delta(self):
        self.get_horizontally_sliced_option_chain_by_delta()

    def test_get_horizontally_sliced_option_chain_by_delta_pandas(self):
        pf = self.get_horizontally_sliced_option_chain_by_delta(use_pandas=True)
        assert isinstance(pf, pd.DataFrame)

    def get_horizontally_sliced_option_chain_by_delta(self, use_pandas=False, print_response=False):
        """Test case for get_horizontally_sliced_option_chain_by_delta

        Returns horizontal slice of option chain for the given symbol, option type, trading dates, expiration, and the delta strike range  # noqa: E501
        """
        name = "SPX"
        data = {'contract_type': OptionContractType.CALL,
                'from_strike': 0.4,
                'to_strike': 0.5,
                'from_date': date(2018, 4, 9),
                'to_date': date(2018, 4, 12),
                'expiration_date': date(2018, 6, 15),
                'return_pandas': use_pandas}
        response = self.api.get_horizontally_sliced_option_chain_by_delta(name, **data)
        if print_response:
            print(response)
        assert len(response) > 0

        self.check_caching(4)
        return response

    def test_get_option_chain(self):
        self.get_option_chain_helper()

    def test_get_option_chain_pandas(self, print_result=False):
        pd_frame = self.get_option_chain_helper(use_pandas=True)
        assert isinstance(pd_frame, pd.DataFrame)
        if print_result:
            print(pd_frame)

    def get_option_chain_helper(self, use_pandas=False):
        """Test case for get_option_chain

        Returns option chain for the given symbol, trading date, and expiration date  # noqa: E501
        """
        name = "SPX"
        data = {'date': date(2018, 4, 9),
                'expiration_date': date(2018, 6, 15),
                'return_pandas': use_pandas}
        return self.api.get_option_chain(name, **data)

        self.check_caching(6)

    def test_get_server_time(self):
        """Test case for get_server_time

        Get the current server time  # noqa: E501
        """
        response = self.api.get_server_time()
        # TODO: add assertion to response

    def test_get_trading_dates(self):
        """Test case for get_trading_dates

        Returns actual trading days in specified from/to date range  # noqa: E501
        """
        name = "SPX"
        data = {'from_date': date(2018, 4, 9),
                'to_date': date(2018, 5, 9)}
        response = self.api.get_trading_dates(name, **data)

        self.check_caching(7)

    def test_get_vertically_sliced_option_chain_by_strike(self):
        self.get_vertically_sliced_option_chain_by_strike()

    def test_get_vertically_sliced_option_chain_by_strike_pandas(self, print_response=False):
        pf = self.get_vertically_sliced_option_chain_by_strike(use_pandas=True, print_response=print_response)
        isinstance(pf, pd.DataFrame)

    def test_get_vertically_sliced_option_chain_by_delta(self):
        self.get_vertically_sliced_option_chain_by_delta()

    def test_get_vertically_sliced_option_chain_by_delta_pandas(self, print_response=False):
        pf = self.get_vertically_sliced_option_chain_by_delta(use_pandas=True, print_response=print_response)
        isinstance(pf, pd.DataFrame)

    def get_vertically_sliced_option_chain_by_strike(self, use_pandas=False, print_response=False):
        """Test case for get_vertically_sliced_option_chain_by_strike

        Returns vertical slice of option chain for the given symbol, option type, trading date, expiration, and the strike range  # noqa: E501
        """
        name = "SPX"
        data = {'contract_type': OptionContractType.CALL,
                'from_strike': 2100.0,
                'to_strike': 2200.0,
                'date': date(2018, 4, 9),
                'expiration_date': date(2018, 6, 15),
                'return_pandas': use_pandas}
        response = self.api.get_vertically_sliced_option_chain_by_strike(name, **data)
        if print_response:
            print(response)

        self.check_caching(10)
        return response

    def get_vertically_sliced_option_chain_by_delta(self, use_pandas=False, print_response=False):
        """Test case for get_vertically_sliced_option_chain_by_strike

        Returns vertical slice of option chain for the given symbol, option type, trading date, expiration, and the strike range  # noqa: E501
        """
        name = "SPX"
        data = {'contract_type': OptionContractType.CALL,
                'from_strike': 0.3,
                'to_strike': 0.7,
                'date': date(2018, 4, 9),
                'expiration_date': date(2018, 6, 15),
                'return_pandas': use_pandas}
        response = self.api.get_vertically_sliced_option_chain_by_delta(name, **data)
        if print_response:
            print(response)
        return response

    def test_get_volatility_skew(self):
        self.get_volatility_skew()

    def test_get_volatility_skew_pandas(self):
        pf = self.get_volatility_skew(use_pandas=True, print_response=False)
        assert isinstance(pf, pd.DataFrame)

    def get_volatility_skew(self, use_pandas=False, print_response=False):
        """Test case for get_volatility_skew

        Returns volatility skews for the given trading symbol, the expiration and the observation dates  # noqa: E501
        """
        data = {'symbol': 'SPX',
                'expirations': [date(2018, 6, 15)],
                'date': [date(2018, 4, 9)],
                'return_pandas': use_pandas}
        response = self.api.get_volatility_skew(**data)
        self.check_caching(11)
        if print_response:
            print(response)
        return response

    def test_search_tickers(self):
        """Test case for search_tickers

        Searchs for symbols in the system with an optional query parameter. If query parameter is not used all symbols are returned  # noqa: E501
        """
        data = {'query': 'SPX'}
        response = self.api.search_tickers(**data)
        # TODO: add assertion to response


if __name__ == '__main__':
    unittest.main()
