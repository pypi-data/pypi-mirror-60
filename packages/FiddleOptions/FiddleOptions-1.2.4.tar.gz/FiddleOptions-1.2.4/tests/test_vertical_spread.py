# coding: utf-8

"""
    Fiddle Options Platform

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

from datetime import date
import unittest
from mercury import VerticalSpread
from mercury import OptionLeg
from mercury.client.model.option_contract_type import OptionContractType


class TestVerticalSpread(unittest.TestCase):
    """VerticalSpread unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def testVerticalSpreadDifferentContractTypeException(self):
        short_leg = OptionLeg(expiration_date=date(2018, 5, 14),
                              type=OptionContractType.CALL,
                              quantity=-2,
                              strike=2600,
                              opening_price=0.1)

        long_leg = OptionLeg(expiration_date=date(2018, 5, 14),
                             type=OptionContractType.PUT,
                             quantity=2,
                             strike=2610,
                             opening_price=0.1)
        with self.assertRaises(ValueError) as ctx:
            VerticalSpread(symbol="SPX",
                           quantity=10,
                           short_leg=short_leg,
                           long_leg=long_leg,
                           opening_date=date(2018, 5, 10))

    def testVerticalSpreadSameDirection(self):
        short_leg = OptionLeg(expiration_date=date(2018, 5, 14),
                              type=OptionContractType.PUT,
                              quantity=-2,
                              strike=2600,
                              opening_price=0.1)

        long_leg = OptionLeg(expiration_date=date(2018, 5, 14),
                             type=OptionContractType.PUT,
                             quantity=-2,
                             strike=2610,
                             opening_price=0.1)

        with self.assertRaises(ValueError) as ctx:
            VerticalSpread(symbol="SPX",
                           quantity=10,
                           short_leg=short_leg,
                           long_leg=long_leg,
                           opening_date=date(2018, 5, 10))

    def testVerticalSpreadDifferentLegQuantities(self):
        short_leg = OptionLeg(expiration_date=date(2018, 5, 14),
                              type=OptionContractType.PUT,
                              quantity=-4,
                              strike=2600,
                              opening_price=0.1)

        long_leg = OptionLeg(expiration_date=date(2018, 5, 14),
                             type=OptionContractType.PUT,
                             quantity=-2,
                             strike=2610,
                             opening_price=0.1)

        with self.assertRaises(ValueError) as ctx:
            VerticalSpread(symbol="SPX",
                           quantity=10,
                           short_leg=short_leg,
                           long_leg=long_leg,
                           opening_date=date(2018, 5, 10))

    def testVerticalSpreadDifferentLegExpiration(self):
        short_leg = OptionLeg(expiration_date=date(2018, 6, 14),
                              type=OptionContractType.PUT,
                              quantity=-2,
                              strike=2600,
                              opening_price=0.1)

        long_leg = OptionLeg(expiration_date=date(2018, 5, 14),
                             type=OptionContractType.PUT,
                             quantity=2,
                             strike=2610,
                             opening_price=0.1)

        with self.assertRaises(ValueError) as ctx:
            VerticalSpread(symbol="SPX",
                           quantity=10,
                           short_leg=short_leg,
                           long_leg=long_leg,
                           opening_date=date(2018, 5, 10))

    def testVerticalSpreadWrongLegSetup(self):
        short_leg = OptionLeg(expiration_date=date(2018, 5, 14),
                              type=OptionContractType.CALL,
                              quantity=-2,
                              strike=2600,
                              opening_price=0.1)

        long_leg = OptionLeg(expiration_date=date(2018, 5, 14),
                             type=OptionContractType.CALL,
                             quantity=2,
                             strike=2610,
                             opening_price=0.1)

        with self.assertRaises(ValueError) as ctx:
            VerticalSpread(symbol="SPX",
                           quantity=10,
                           short_leg=short_leg,
                           long_leg=long_leg,
                           opening_date=date(2018, 5, 10))


if __name__ == '__main__':
    unittest.main()
