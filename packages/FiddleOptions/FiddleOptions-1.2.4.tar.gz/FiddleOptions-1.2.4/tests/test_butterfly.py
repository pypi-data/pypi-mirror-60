# coding: utf-8

"""
    Fiddle Options Platform

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

from datetime import date
import unittest
from mercury import Butterfly, ButterflyValueException
from mercury import OptionLeg
from mercury.client.model.option_contract_type import OptionContractType


class TestButterfly(unittest.TestCase):
    """Butterfly unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def testButterflyDifferentContractTypeException(self):
        # mix calls and puts
        lower_long_leg = OptionLeg(expiration_date=date(2018, 5, 14),
                                   type=OptionContractType.PUT,
                                   quantity=1,
                                   strike=2500,
                                   opening_price=0.1)

        mid_short_leg = OptionLeg(expiration_date=date(2018, 5, 14),
                                  type=OptionContractType.CALL,
                                  quantity=-2,
                                  strike=2550,
                                  opening_price=0.1)

        upper_long_leg = OptionLeg(expiration_date=date(2018, 5, 14),
                                   type=OptionContractType.PUT,
                                   quantity=1,
                                   strike=2600,
                                   opening_price=0.1)

        with self.assertRaises(ButterflyValueException) as ctx:
            Butterfly(symbol="SPX",
                      quantity=10,
                      first_leg=lower_long_leg,
                      mid_leg=mid_short_leg,
                      third_leg=upper_long_leg,
                      opening_date=date(2018, 5, 10))

    def testButterflyInvalidDirectionOnFirstAndThirdLegException(self):
        # first and third leg have opposite direction
        lower_long_leg = OptionLeg(expiration_date=date(2018, 5, 14),
                                   type=OptionContractType.PUT,
                                   quantity=1,
                                   strike=2500,
                                   opening_price=0.1)

        mid_short_leg = OptionLeg(expiration_date=date(2018, 5, 14),
                                  type=OptionContractType.PUT,
                                  quantity=-2,
                                  strike=2550,
                                  opening_price=0.1)

        upper_long_leg = OptionLeg(expiration_date=date(2018, 5, 14),
                                   type=OptionContractType.PUT,
                                   quantity=-1,
                                   strike=2600,
                                   opening_price=0.1)

        with self.assertRaises(ButterflyValueException) as ctx:
            Butterfly(symbol="SPX",
                      quantity=10,
                      first_leg=lower_long_leg,
                      mid_leg=mid_short_leg,
                      third_leg=upper_long_leg,
                      opening_date=date(2018, 5, 10))

    def testButterflyInvalidDirectionOnFirstAndSecondLegException(self):
        lower_long_leg = OptionLeg(expiration_date=date(2018, 5, 14),
                                   type=OptionContractType.PUT,
                                   quantity=-1,
                                   strike=2500,
                                   opening_price=0.1)

        mid_short_leg = OptionLeg(expiration_date=date(2018, 5, 14),
                                  type=OptionContractType.PUT,
                                  quantity=-2,
                                  strike=2550,
                                  opening_price=0.1)

        upper_long_leg = OptionLeg(expiration_date=date(2018, 5, 14),
                                   type=OptionContractType.PUT,
                                   quantity=1,
                                   strike=2600,
                                   opening_price=0.1)

        with self.assertRaises(ButterflyValueException) as ctx:
            Butterfly(symbol="SPX",
                      quantity=10,
                      first_leg=lower_long_leg,
                      mid_leg=mid_short_leg,
                      third_leg=upper_long_leg,
                      opening_date=date(2018, 5, 10))

    def testButterflyInvalidStrikesException(self):
        lower_long_leg = OptionLeg(expiration_date=date(2018, 5, 14),
                                   type=OptionContractType.PUT,
                                   quantity=-1,
                                   strike=2700,
                                   opening_price=0.1)

        mid_short_leg = OptionLeg(expiration_date=date(2018, 5, 14),
                                  type=OptionContractType.PUT,
                                  quantity=-2,
                                  strike=2550,
                                  opening_price=0.1)

        upper_long_leg = OptionLeg(expiration_date=date(2018, 5, 14),
                                   type=OptionContractType.PUT,
                                   quantity=1,
                                   strike=2600,
                                   opening_price=0.1)

        with self.assertRaises(ButterflyValueException) as ctx:
            Butterfly(symbol="SPX",
                      quantity=10,
                      first_leg=lower_long_leg,
                      mid_leg=mid_short_leg,
                      third_leg=upper_long_leg,
                      opening_date=date(2018, 5, 10))


if __name__ == '__main__':
    unittest.main()
