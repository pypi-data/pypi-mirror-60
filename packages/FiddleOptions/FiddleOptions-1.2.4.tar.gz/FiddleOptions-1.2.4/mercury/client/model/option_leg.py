# coding: utf-8

"""
    Fiddle Options Platform

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint

import six

from mercury.client.model.direction import Direction
from mercury.client.model.option_contract_type import OptionContractType


class OptionLeg(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expiration_date': 'date',
        'type': 'OptionContractType',
        'quantity': 'int',
        'strike': 'float',
        'opening_price': 'float',
    }

    attribute_map = {
        'expiration_date': 'expirationDate',
        'type': 'type',
        'quantity': 'quantity',
        'strike': 'strike',
        'opening_price': 'openingPrice',
    }

    def __init__(self,
                 expiration_date=None,
                 type=None,
                 quantity=1,
                 strike=None,
                 opening_price=None,
                 contract=None):
        """OptionLeg - a model defined in Swagger"""  # noqa: E501

        self._expiration_date = None
        self._opening_date = None
        self._direction = None
        self._type = None
        self._quantity = None
        self._strike = None
        self._opening_price = None
        self.discriminator = None

        if contract:
            assert expiration_date is None
            assert type is None
            assert strike is None
            assert opening_price is None

            expiration_date = contract.expiration_date
            type = OptionContractType.CALL if contract.call else OptionContractType.PUT
            strike = contract.strike
            opening_price = contract.mid

        if quantity is not None:
            self.quantity = quantity
        else:
            raise ValueError('Option leg quantity is mandatory')
        if expiration_date is not None:
            self.expiration_date = expiration_date
        else:
            raise ValueError('Option leg expiration date is mandatory')
        if type is not None:
            self.type = type
        if strike is not None:
            self.strike = strike
        else:
            raise ValueError('Option leg strike is mandatory')
        if opening_price is not None:
            self.opening_price = opening_price
        else:
            raise ValueError('Option leg opening price is mandatory')

    def is_call(self):
        return self.type == OptionContractType.CALL

    def is_put(self):
        return self.type == OptionContractType.PUT

    @property
    def opening_date(self):
        return self._opening_date


    @property
    def expiration_date(self):
        """Gets the expiration_date of this OptionLeg.  # noqa: E501


        :return: The expiration_date of this OptionLeg.  # noqa: E501
        :rtype: date
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this OptionLeg.


        :param expiration_date: The expiration_date of this OptionLeg.  # noqa: E501
        :type: date
        """

        self._expiration_date = expiration_date

    def is_long(self):
        return self.direction == Direction.LONG

    def is_short(self):
        return self.direction == Direction.SHORT

    @property
    def direction(self):
        """Gets the direction of this OptionLeg.  # noqa: E501


        :return: The direction of this OptionLeg.  # noqa: E501
        :rtype: str
        """
        return Direction.LONG if self.quantity > 0 else Direction.SHORT

    @property
    def type(self):
        """Gets the type of this OptionLeg.  # noqa: E501


        :return: The type of this OptionLeg.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OptionLeg.


        :param type: The type of this OptionLeg.  # noqa: E501
        :type: str
        """
        allowed_values = [OptionContractType.PUT, OptionContractType.CALL]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def quantity(self):
        """Gets the quantity of this OptionLeg.  # noqa: E501


        :return: The quantity of this OptionLeg.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @property
    def quantity_abs(self):
        return abs(self.quantity)

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this OptionLeg.


        :param quantity: The quantity of this OptionLeg.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def strike(self):
        """Gets the strike of this OptionLeg.  # noqa: E501


        :return: The strike of this OptionLeg.  # noqa: E501
        :rtype: float
        """
        return self._strike

    @strike.setter
    def strike(self, strike):
        """Sets the strike of this OptionLeg.


        :param strike: The strike of this OptionLeg.  # noqa: E501
        :type: float
        """

        self._strike = strike

    @property
    def opening_price(self):
        """Gets the opening_price of this OptionLeg.  # noqa: E501


        :return: The opening_price of this OptionLeg.  # noqa: E501
        :rtype: float
        """
        return self._opening_price

    @opening_price.setter
    def opening_price(self, opening_price):
        """Sets the opening_price of this OptionLeg.


        :param strike: The opening_price of this OptionLeg.  # noqa: E501
        :type: float
        """

        self._opening_price = opening_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def to_key(self):
        return self.quantity, self.strike, self.opening_date, self.expiration_date, self.is_long(), self.is_call()

    def __hash__(self):
        return hash(self.to_key())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OptionLeg):
            return False

        return self.to_key() == other.to_key()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self.__eq__(other)
