# coding: utf-8

"""
    Fiddle Options Platform

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EquityQuote(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'quote_date': 'date',
        'open_price': 'float',
        'close_price': 'float',
        'close_adjusted_price': 'float',
        'high_price': 'float',
        'low_price': 'float',
        'volume': 'int',
        'price_date_in_js': 'str'
    }

    attribute_map = {
        'quote_date': 'quoteDate',
        'open_price': 'openPrice',
        'close_price': 'closePrice',
        'close_adjusted_price': 'closeAdjustedPrice',
        'high_price': 'highPrice',
        'low_price': 'lowPrice',
        'volume': 'volume',
        'price_date_in_js': 'priceDateInJS'
    }

    def __init__(self, quote_date=None, open_price=None, close_price=None, close_adjusted_price=None, high_price=None, low_price=None, volume=None, price_date_in_js=None):  # noqa: E501
        """EquityQuote - a model defined in Swagger"""  # noqa: E501

        self._quote_date = None
        self._open_price = None
        self._close_price = None
        self._close_adjusted_price = None
        self._high_price = None
        self._low_price = None
        self._volume = None
        self._price_date_in_js = None
        self.discriminator = None

        if quote_date is not None:
            self.quote_date = quote_date
        if open_price is not None:
            self.open_price = open_price
        if close_price is not None:
            self.close_price = close_price
        if close_adjusted_price is not None:
            self.close_adjusted_price = close_adjusted_price
        if high_price is not None:
            self.high_price = high_price
        if low_price is not None:
            self.low_price = low_price
        if volume is not None:
            self.volume = volume
        if price_date_in_js is not None:
            self.price_date_in_js = price_date_in_js

    @property
    def quote_date(self):
        """Gets the quote_date of this EquityQuote.  # noqa: E501


        :return: The quote_date of this EquityQuote.  # noqa: E501
        :rtype: date
        """
        return self._quote_date

    @quote_date.setter
    def quote_date(self, quote_date):
        """Sets the quote_date of this EquityQuote.


        :param quote_date: The quote_date of this EquityQuote.  # noqa: E501
        :type: date
        """

        self._quote_date = quote_date

    @property
    def open_price(self):
        """Gets the open_price of this EquityQuote.  # noqa: E501


        :return: The open_price of this EquityQuote.  # noqa: E501
        :rtype: float
        """
        return self._open_price

    @open_price.setter
    def open_price(self, open_price):
        """Sets the open_price of this EquityQuote.


        :param open_price: The open_price of this EquityQuote.  # noqa: E501
        :type: float
        """

        self._open_price = open_price

    @property
    def close_price(self):
        """Gets the close_price of this EquityQuote.  # noqa: E501


        :return: The close_price of this EquityQuote.  # noqa: E501
        :rtype: float
        """
        return self._close_price

    @close_price.setter
    def close_price(self, close_price):
        """Sets the close_price of this EquityQuote.


        :param close_price: The close_price of this EquityQuote.  # noqa: E501
        :type: float
        """

        self._close_price = close_price

    @property
    def close_adjusted_price(self):
        """Gets the close_adjusted_price of this EquityQuote.  # noqa: E501


        :return: The close_adjusted_price of this EquityQuote.  # noqa: E501
        :rtype: float
        """
        return self._close_adjusted_price

    @close_adjusted_price.setter
    def close_adjusted_price(self, close_adjusted_price):
        """Sets the close_adjusted_price of this EquityQuote.


        :param close_adjusted_price: The close_adjusted_price of this EquityQuote.  # noqa: E501
        :type: float
        """

        self._close_adjusted_price = close_adjusted_price

    @property
    def high_price(self):
        """Gets the high_price of this EquityQuote.  # noqa: E501


        :return: The high_price of this EquityQuote.  # noqa: E501
        :rtype: float
        """
        return self._high_price

    @high_price.setter
    def high_price(self, high_price):
        """Sets the high_price of this EquityQuote.


        :param high_price: The high_price of this EquityQuote.  # noqa: E501
        :type: float
        """

        self._high_price = high_price

    @property
    def low_price(self):
        """Gets the low_price of this EquityQuote.  # noqa: E501


        :return: The low_price of this EquityQuote.  # noqa: E501
        :rtype: float
        """
        return self._low_price

    @low_price.setter
    def low_price(self, low_price):
        """Sets the low_price of this EquityQuote.


        :param low_price: The low_price of this EquityQuote.  # noqa: E501
        :type: float
        """

        self._low_price = low_price

    @property
    def volume(self):
        """Gets the volume of this EquityQuote.  # noqa: E501


        :return: The volume of this EquityQuote.  # noqa: E501
        :rtype: int
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this EquityQuote.


        :param volume: The volume of this EquityQuote.  # noqa: E501
        :type: int
        """

        self._volume = volume

    @property
    def price_date_in_js(self):
        """Gets the price_date_in_js of this EquityQuote.  # noqa: E501


        :return: The price_date_in_js of this EquityQuote.  # noqa: E501
        :rtype: str
        """
        return self._price_date_in_js

    @price_date_in_js.setter
    def price_date_in_js(self, price_date_in_js):
        """Sets the price_date_in_js of this EquityQuote.


        :param price_date_in_js: The price_date_in_js of this EquityQuote.  # noqa: E501
        :type: str
        """

        self._price_date_in_js = price_date_in_js

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def to_key(self):
        return self.quote_date, self.open_price

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EquityQuote):
            return False

        return self.to_key() == other.to_key()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self.__eq__(other)
