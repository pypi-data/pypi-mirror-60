# coding: utf-8

"""
    Fiddle Options Platform

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint

import six


class OptionChain(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'trading_date': 'date',
        'expiration_date': 'date',
        'contracts': 'list[OptionContract]'
    }

    attribute_map = {
        'trading_date': 'tradingDate',
        'expiration_date': 'expirationDate',
        'contracts': 'contracts'
    }

    def __init__(self, trading_date=None, expiration_date=None, contracts=None):  # noqa: E501
        """OptionChain - a model defined in Swagger"""  # noqa: E501

        self._trading_date = None
        self._expiration_date = None
        self._contracts = None
        self.discriminator = None

        if trading_date is not None:
            self.trading_date = trading_date
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if contracts is not None:
            self.contracts = contracts

    @property
    def trading_date(self):
        """Gets the trading_date of this OptionChain.  # noqa: E501


        :return: The trading_date of this OptionChain.  # noqa: E501
        :rtype: date
        """
        return self._trading_date

    @trading_date.setter
    def trading_date(self, trading_date):
        """Sets the trading_date of this OptionChain.


        :param trading_date: The trading_date of this OptionChain.  # noqa: E501
        :type: date
        """

        self._trading_date = trading_date

    @property
    def expiration_date(self):
        """Gets the expiration_date of this OptionChain.  # noqa: E501


        :return: The expiration_date of this OptionChain.  # noqa: E501
        :rtype: date
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this OptionChain.


        :param expiration_date: The expiration_date of this OptionChain.  # noqa: E501
        :type: date
        """

        self._expiration_date = expiration_date

    @property
    def contracts(self):
        """Gets the contracts of this OptionChain.  # noqa: E501


        :return: The contracts of this OptionChain.  # noqa: E501
        :rtype: list[OptionContract]
        """
        return self._contracts

    @contracts.setter
    def contracts(self, contracts):
        """Sets the contracts of this OptionChain.


        :param contracts: The contracts of this OptionChain.  # noqa: E501
        :type: list[OptionContract]
        """

        self._contracts = contracts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def to_key(self):
        return self.trading_date, self.expiration_date

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OptionChain):
            return False

        return self.to_key() == other.to_key()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self.__eq__(other)
