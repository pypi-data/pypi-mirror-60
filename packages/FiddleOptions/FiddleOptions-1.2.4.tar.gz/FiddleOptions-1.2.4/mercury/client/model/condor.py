# coding: utf-8

"""
    Fiddle Options Platform

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint

import six

from mercury.client.model import Trade  # noqa: F401,E501
from mercury.client.model.option_contract_type import OptionContractType


class CondorValueException(Exception):
    pass


class BaseCondor(Trade):
    """
    This class must not used directly.
    """

    def __init__(self,
                 symbol=None,
                 quantity=1,
                 type=None,  # todo:
                 out_lower_leg=None,  # out_leg_call
                 in_lower_mid_leg=None,   # in_leg_call
                 in_upper_mid_leg=None,    # in_leg_put
                 out_upper_leg=None,   # out_leg_put
                 open_price=None,
                 opening_date=None,
                 option_legs=None):

        if option_legs is None:
            self.__option_legs = [out_lower_leg, in_lower_mid_leg, in_upper_mid_leg, out_upper_leg]
        else:
            self.__option_legs = option_legs

        # todo: create & raise exceptions
        if not all(l.quantity == self.__option_legs[0].quantity for l in self.__option_legs):
            CondorValueException('OptionLegs must have the same quantity')

        if not all(l.expiration_date == self.__option_legs[0].expiration_date for l in self.__option_legs):
            CondorValueException('OptionLegs must have same expiration')

        # Sets the trade type (Condor, IronCondor)
        # refactor: type
        trade_type = self.__class__.__name__
        assert trade_type != 'basecondor', "BaseCondor class must not be used directly"
        trade_type = 'condor'
        if trade_type == 'IronCondor':
            trade_type = 'iron_condor'
        super(BaseCondor, self).__init__(symbol=symbol,
                                         opening_date=opening_date,
                                         quantity=quantity,
                                         option_legs=self.__option_legs,
                                         type=trade_type)


class Condor(BaseCondor):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        'quantity': 'int',
        'opening_date': 'date',
        'option_legs': 'list[OptionLeg]',
        'type': 'str'
    }

    attribute_map = {
        'symbol': 'symbol',
        'quantity': 'quantity',
        'opening_date': 'openingDate',
        'option_legs': 'optionLegs',
        'type': 'type'
    }

    def __init__(self,
                 symbol=None,
                 type=None,
                 quantity=1,
                 out_lower_leg=None,
                 in_lower_mid_leg=None,
                 in_upper_mid_leg=None,
                 out_upper_leg=None,
                 open_price=None,
                 opening_date=None,
                 option_legs=None):  # noqa: E501
        """Condor - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

        super(Condor, self).__init__(symbol=symbol,
                                     opening_date=opening_date,
                                     quantity=quantity,
                                     type=type,
                                     out_lower_leg=out_lower_leg,
                                     in_lower_mid_leg=in_lower_mid_leg,
                                     in_upper_mid_leg=in_upper_mid_leg,
                                     out_upper_leg=out_upper_leg,
                                     open_price=open_price,
                                     option_legs=option_legs)

        if option_legs is None:
            self.out_lower_leg = out_lower_leg
            self.in_lower_mid_leg = in_lower_mid_leg
            self.in_upper_mid_leg = in_upper_mid_leg
            self.out_upper_leg = out_upper_leg
        else:
            self.out_lower_leg = option_legs[0]
            self.in_lower_mid_leg = option_legs[1]
            self.in_upper_mid_leg = option_legs[2]
            self.out_upper_leg = option_legs[3]

        if (self.out_lower_leg.strike > self.in_lower_mid_leg.strike) or \
                (self.in_upper_mid_leg.strike > self.out_upper_leg.strike):
            raise CondorValueException('Invalid strikes in condor setup {}'.format(self._option_legs))

        if type:
            if type == OptionContractType.CALL and not all(l.is_call() for l in self._option_legs):
                raise CondorValueException('All legs must be CALL type for CALL condor {}'.format(self._option_legs))

            if type == OptionContractType.PUT and not all(l.is_put() for l in self._option_legs):
                raise CondorValueException('All legs must be PUT type for PUT condor {}'.format(self._option_legs))

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __hash__(self):
        return hash(self.to_key())

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Condor):
            return False

        return self.to_key() == other.to_key()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self.__eq__(other)
