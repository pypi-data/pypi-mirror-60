

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>

#include <..\..\build\temp.win-amd64-3.7\dlstatic\ctre_api\include\ctre\phoenix\motorcontrol\IMotorControllerEnhanced.h>


#include <rpygen/ctre__phoenix__motorcontrol__IMotorController.hpp>

namespace rpygen {

using namespace ctre::phoenix::motorcontrol;

template <typename CxxBase>
using PyBasectre__phoenix__motorcontrol__IMotorControllerEnhanced = 
    Pyctre__phoenix__motorcontrol__IMotorController<
        CxxBase
    >
;

template <typename CxxBase>
struct Pyctre__phoenix__motorcontrol__IMotorControllerEnhanced : PyBasectre__phoenix__motorcontrol__IMotorControllerEnhanced<CxxBase> {
    using PyBasectre__phoenix__motorcontrol__IMotorControllerEnhanced<CxxBase>::PyBasectre__phoenix__motorcontrol__IMotorControllerEnhanced;


    using ErrorCode = ctre::phoenix::ErrorCode;

#ifndef RPYGEN_DISABLE_ConfigSelectedFeedbackSensor_TFeedbackDevice_i_i
    ErrorCode ConfigSelectedFeedbackSensor(FeedbackDevice feedbackDevice, int pidIdx, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorControllerEnhanced,ErrorCode, CxxBase, "configSelectedFeedbackSensor", ConfigSelectedFeedbackSensor,feedbackDevice, pidIdx, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigSelectedFeedbackSensor_TRemoteFeedbackDevice_i_i
    ErrorCode ConfigSelectedFeedbackSensor(RemoteFeedbackDevice feedbackDevice, int pidIdx, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorControllerEnhanced,ErrorCode, CxxBase, "configSelectedFeedbackSensor", ConfigSelectedFeedbackSensor,feedbackDevice, pidIdx, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_SetStatusFramePeriod_TStatusFrame_c_i
    ErrorCode SetStatusFramePeriod(StatusFrame frame, uint8_t periodMs, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorControllerEnhanced,ErrorCode, CxxBase, "setStatusFramePeriod", SetStatusFramePeriod,frame, periodMs, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_SetStatusFramePeriod_TStatusFrameEnhanced_c_i
    ErrorCode SetStatusFramePeriod(StatusFrameEnhanced frame, uint8_t periodMs, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorControllerEnhanced,ErrorCode, CxxBase, "setStatusFramePeriod", SetStatusFramePeriod,frame, periodMs, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_GetStatusFramePeriod_TStatusFrame_i
    int GetStatusFramePeriod(StatusFrame frame, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorControllerEnhanced,int, CxxBase, "getStatusFramePeriod", GetStatusFramePeriod,frame, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_GetStatusFramePeriod_TStatusFrameEnhanced_i
    int GetStatusFramePeriod(StatusFrameEnhanced frame, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorControllerEnhanced,int, CxxBase, "getStatusFramePeriod", GetStatusFramePeriod,frame, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_GetOutputCurrent_v
    double GetOutputCurrent() override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorControllerEnhanced,double, CxxBase, "getOutputCurrent", GetOutputCurrent,);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigVelocityMeasurementPeriod_TVelocityMeasPeriod_i
    ErrorCode ConfigVelocityMeasurementPeriod(VelocityMeasPeriod period, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorControllerEnhanced,ErrorCode, CxxBase, "configVelocityMeasurementPeriod", ConfigVelocityMeasurementPeriod,period, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigVelocityMeasurementWindow_i_i
    ErrorCode ConfigVelocityMeasurementWindow(int windowSize, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorControllerEnhanced,ErrorCode, CxxBase, "configVelocityMeasurementWindow", ConfigVelocityMeasurementWindow,windowSize, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigForwardLimitSwitchSource_TRemoteLimitSwitchSource_TLimitSwitchNormal_i_i
    ErrorCode ConfigForwardLimitSwitchSource(RemoteLimitSwitchSource type, LimitSwitchNormal normalOpenOrClose, int deviceID, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorControllerEnhanced,ErrorCode, CxxBase, "configForwardLimitSwitchSource", ConfigForwardLimitSwitchSource,type, normalOpenOrClose, deviceID, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigReverseLimitSwitchSource_TRemoteLimitSwitchSource_TLimitSwitchNormal_i_i
    ErrorCode ConfigReverseLimitSwitchSource(RemoteLimitSwitchSource type, LimitSwitchNormal normalOpenOrClose, int deviceID, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorControllerEnhanced,ErrorCode, CxxBase, "configReverseLimitSwitchSource", ConfigReverseLimitSwitchSource,type, normalOpenOrClose, deviceID, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigForwardLimitSwitchSource_TLimitSwitchSource_TLimitSwitchNormal_i
    ErrorCode ConfigForwardLimitSwitchSource(LimitSwitchSource type, LimitSwitchNormal normalOpenOrClose, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorControllerEnhanced,ErrorCode, CxxBase, "configForwardLimitSwitchSource", ConfigForwardLimitSwitchSource,type, normalOpenOrClose, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigReverseLimitSwitchSource_TLimitSwitchSource_TLimitSwitchNormal_i
    ErrorCode ConfigReverseLimitSwitchSource(LimitSwitchSource type, LimitSwitchNormal normalOpenOrClose, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorControllerEnhanced,ErrorCode, CxxBase, "configReverseLimitSwitchSource", ConfigReverseLimitSwitchSource,type, normalOpenOrClose, timeoutMs);
    }
#endif



};

}; // namespace rpygen