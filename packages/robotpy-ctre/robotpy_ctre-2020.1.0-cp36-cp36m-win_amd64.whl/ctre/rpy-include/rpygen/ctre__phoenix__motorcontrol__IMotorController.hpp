
 

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>

#include <..\..\build\temp.win-amd64-3.6\dlstatic\ctre_api\include\ctre\phoenix\motorcontrol\IMotorController.h>



#include <rpygen/ctre__phoenix__motorcontrol__IFollower.hpp>

namespace rpygen {

using namespace ctre::phoenix::motorcontrol;

template <typename CxxBase>
using PyBasectre__phoenix__motorcontrol__IMotorController = 
    Pyctre__phoenix__motorcontrol__IFollower<
        CxxBase
    
    >
;

template <typename CxxBase>
struct Pyctre__phoenix__motorcontrol__IMotorController : PyBasectre__phoenix__motorcontrol__IMotorController<CxxBase> {
    using PyBasectre__phoenix__motorcontrol__IMotorController<CxxBase>::PyBasectre__phoenix__motorcontrol__IMotorController;


    using ErrorCode = ctre::phoenix::ErrorCode;
    using ParamEnum = ctre::phoenix::ParamEnum;

#ifndef RPYGEN_DISABLE_Set_TControlMode_d
    void Set(ControlMode Mode, double demand) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,void, CxxBase, "set", Set,Mode, demand);
    }
#endif

#ifndef RPYGEN_DISABLE_Set_TControlMode_d_d
    void Set(ControlMode Mode, double demand0, double demand1) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,void, CxxBase, "set", Set,Mode, demand0, demand1);
    }
#endif

#ifndef RPYGEN_DISABLE_Set_TControlMode_d_TDemandType_d
    void Set(ControlMode mode, double demand0, DemandType demand1Type, double demand1) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,void, CxxBase, "set", Set,mode, demand0, demand1Type, demand1);
    }
#endif

#ifndef RPYGEN_DISABLE_NeutralOutput_v
    void NeutralOutput() override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,void, CxxBase, "neutralOutput", NeutralOutput,);
    }
#endif

#ifndef RPYGEN_DISABLE_SetNeutralMode_TNeutralMode
    void SetNeutralMode(NeutralMode neutralMode) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,void, CxxBase, "setNeutralMode", SetNeutralMode,neutralMode);
    }
#endif

#ifndef RPYGEN_DISABLE_SetSensorPhase_b
    void SetSensorPhase(bool PhaseSensor) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,void, CxxBase, "setSensorPhase", SetSensorPhase,PhaseSensor);
    }
#endif

#ifndef RPYGEN_DISABLE_SetInverted_b
    void SetInverted(bool invert) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,void, CxxBase, "setInverted", SetInverted,invert);
    }
#endif

#ifndef RPYGEN_DISABLE_SetInverted_TInvertType
    void SetInverted(InvertType invertType) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,void, CxxBase, "setInverted", SetInverted,invertType);
    }
#endif

#ifndef RPYGEN_DISABLE_KGetInverted_v
    bool GetInverted() const override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,bool, CxxBase, "getInverted", GetInverted,);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigFactoryDefault_i
    ErrorCode ConfigFactoryDefault(int timeout) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configFactoryDefault", ConfigFactoryDefault,timeout);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigOpenloopRamp_d_i
    ErrorCode ConfigOpenloopRamp(double secondsFromNeutralToFull, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configOpenloopRamp", ConfigOpenloopRamp,secondsFromNeutralToFull, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigClosedloopRamp_d_i
    ErrorCode ConfigClosedloopRamp(double secondsFromNeutralToFull, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configClosedloopRamp", ConfigClosedloopRamp,secondsFromNeutralToFull, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigPeakOutputForward_d_i
    ErrorCode ConfigPeakOutputForward(double percentOut, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configPeakOutputForward", ConfigPeakOutputForward,percentOut, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigPeakOutputReverse_d_i
    ErrorCode ConfigPeakOutputReverse(double percentOut, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configPeakOutputReverse", ConfigPeakOutputReverse,percentOut, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigNominalOutputForward_d_i
    ErrorCode ConfigNominalOutputForward(double percentOut, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configNominalOutputForward", ConfigNominalOutputForward,percentOut, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigNominalOutputReverse_d_i
    ErrorCode ConfigNominalOutputReverse(double percentOut, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configNominalOutputReverse", ConfigNominalOutputReverse,percentOut, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigNeutralDeadband_d_i
    ErrorCode ConfigNeutralDeadband(double percentDeadband, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configNeutralDeadband", ConfigNeutralDeadband,percentDeadband, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigVoltageCompSaturation_d_i
    ErrorCode ConfigVoltageCompSaturation(double voltage, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configVoltageCompSaturation", ConfigVoltageCompSaturation,voltage, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigVoltageMeasurementFilter_i_i
    ErrorCode ConfigVoltageMeasurementFilter(int filterWindowSamples, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configVoltageMeasurementFilter", ConfigVoltageMeasurementFilter,filterWindowSamples, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_EnableVoltageCompensation_b
    void EnableVoltageCompensation(bool enable) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,void, CxxBase, "enableVoltageCompensation", EnableVoltageCompensation,enable);
    }
#endif

#ifndef RPYGEN_DISABLE_IsVoltageCompensationEnabled_v
    bool IsVoltageCompensationEnabled() override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,bool, CxxBase, "isVoltageCompensationEnabled", IsVoltageCompensationEnabled,);
    }
#endif

#ifndef RPYGEN_DISABLE_GetBusVoltage_v
    double GetBusVoltage() override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,double, CxxBase, "getBusVoltage", GetBusVoltage,);
    }
#endif

#ifndef RPYGEN_DISABLE_GetMotorOutputPercent_v
    double GetMotorOutputPercent() override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,double, CxxBase, "getMotorOutputPercent", GetMotorOutputPercent,);
    }
#endif

#ifndef RPYGEN_DISABLE_GetMotorOutputVoltage_v
    double GetMotorOutputVoltage() override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,double, CxxBase, "getMotorOutputVoltage", GetMotorOutputVoltage,);
    }
#endif

#ifndef RPYGEN_DISABLE_GetTemperature_v
    double GetTemperature() override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,double, CxxBase, "getTemperature", GetTemperature,);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigSelectedFeedbackSensor_TRemoteFeedbackDevice_i_i
    ErrorCode ConfigSelectedFeedbackSensor(RemoteFeedbackDevice feedbackDevice, int pidIdx, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configSelectedFeedbackSensor", ConfigSelectedFeedbackSensor,feedbackDevice, pidIdx, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigSelectedFeedbackCoefficient_d_i_i
    ErrorCode ConfigSelectedFeedbackCoefficient(double coefficient, int pidIdx, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configSelectedFeedbackCoefficient", ConfigSelectedFeedbackCoefficient,coefficient, pidIdx, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigRemoteFeedbackFilter_i_TRemoteSensorSource_i_i
    ErrorCode ConfigRemoteFeedbackFilter(int deviceID, RemoteSensorSource remoteSensorSource, int remoteOrdinal, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configRemoteFeedbackFilter", ConfigRemoteFeedbackFilter,deviceID, remoteSensorSource, remoteOrdinal, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigRemoteFeedbackFilter_RTctre__phoenix__sensors__CANCoder_i_i
    ErrorCode ConfigRemoteFeedbackFilter(ctre::phoenix::sensors::CANCoder& canCoderRef, int remoteOrdinal, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configRemoteFeedbackFilter", ConfigRemoteFeedbackFilter,canCoderRef, remoteOrdinal, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigSensorTerm_TSensorTerm_TFeedbackDevice_i
    ErrorCode ConfigSensorTerm(SensorTerm sensorTerm, FeedbackDevice feedbackDevice, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configSensorTerm", ConfigSensorTerm,sensorTerm, feedbackDevice, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_GetSelectedSensorPosition_i
    int GetSelectedSensorPosition(int pidIdx) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,int, CxxBase, "getSelectedSensorPosition", GetSelectedSensorPosition,pidIdx);
    }
#endif

#ifndef RPYGEN_DISABLE_GetSelectedSensorVelocity_i
    int GetSelectedSensorVelocity(int pidIdx) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,int, CxxBase, "getSelectedSensorVelocity", GetSelectedSensorVelocity,pidIdx);
    }
#endif

#ifndef RPYGEN_DISABLE_SetSelectedSensorPosition_i_i_i
    ErrorCode SetSelectedSensorPosition(int sensorPos, int pidIdx, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "setSelectedSensorPosition", SetSelectedSensorPosition,sensorPos, pidIdx, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_SetControlFramePeriod_TControlFrame_i
    ErrorCode SetControlFramePeriod(ControlFrame frame, int periodMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "setControlFramePeriod", SetControlFramePeriod,frame, periodMs);
    }
#endif

#ifndef RPYGEN_DISABLE_SetStatusFramePeriod_TStatusFrame_c_i
    ErrorCode SetStatusFramePeriod(StatusFrame frame, uint8_t periodMs, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "setStatusFramePeriod", SetStatusFramePeriod,frame, periodMs, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_GetStatusFramePeriod_TStatusFrame_i
    int GetStatusFramePeriod(StatusFrame frame, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,int, CxxBase, "getStatusFramePeriod", GetStatusFramePeriod,frame, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigForwardLimitSwitchSource_TRemoteLimitSwitchSource_TLimitSwitchNormal_i_i
    ErrorCode ConfigForwardLimitSwitchSource(RemoteLimitSwitchSource type, LimitSwitchNormal normalOpenOrClose, int deviceID, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configForwardLimitSwitchSource", ConfigForwardLimitSwitchSource,type, normalOpenOrClose, deviceID, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigReverseLimitSwitchSource_TRemoteLimitSwitchSource_TLimitSwitchNormal_i_i
    ErrorCode ConfigReverseLimitSwitchSource(RemoteLimitSwitchSource type, LimitSwitchNormal normalOpenOrClose, int deviceID, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configReverseLimitSwitchSource", ConfigReverseLimitSwitchSource,type, normalOpenOrClose, deviceID, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_OverrideLimitSwitchesEnable_b
    void OverrideLimitSwitchesEnable(bool enable) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,void, CxxBase, "overrideLimitSwitchesEnable", OverrideLimitSwitchesEnable,enable);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigForwardSoftLimitThreshold_i_i
    ErrorCode ConfigForwardSoftLimitThreshold(int forwardSensorLimit, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configForwardSoftLimitThreshold", ConfigForwardSoftLimitThreshold,forwardSensorLimit, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigReverseSoftLimitThreshold_i_i
    ErrorCode ConfigReverseSoftLimitThreshold(int reverseSensorLimit, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configReverseSoftLimitThreshold", ConfigReverseSoftLimitThreshold,reverseSensorLimit, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigForwardSoftLimitEnable_b_i
    ErrorCode ConfigForwardSoftLimitEnable(bool enable, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configForwardSoftLimitEnable", ConfigForwardSoftLimitEnable,enable, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigReverseSoftLimitEnable_b_i
    ErrorCode ConfigReverseSoftLimitEnable(bool enable, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configReverseSoftLimitEnable", ConfigReverseSoftLimitEnable,enable, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_OverrideSoftLimitsEnable_b
    void OverrideSoftLimitsEnable(bool enable) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,void, CxxBase, "overrideSoftLimitsEnable", OverrideSoftLimitsEnable,enable);
    }
#endif

#ifndef RPYGEN_DISABLE_Config_kP_i_d_i
    ErrorCode Config_kP(int slotIdx, double value, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "config_kP", Config_kP,slotIdx, value, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_Config_kI_i_d_i
    ErrorCode Config_kI(int slotIdx, double value, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "config_kI", Config_kI,slotIdx, value, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_Config_kD_i_d_i
    ErrorCode Config_kD(int slotIdx, double value, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "config_kD", Config_kD,slotIdx, value, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_Config_kF_i_d_i
    ErrorCode Config_kF(int slotIdx, double value, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "config_kF", Config_kF,slotIdx, value, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_Config_IntegralZone_i_i_i
    ErrorCode Config_IntegralZone(int slotIdx, int izone, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "config_IntegralZone", Config_IntegralZone,slotIdx, izone, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigAllowableClosedloopError_i_i_i
    ErrorCode ConfigAllowableClosedloopError(int slotIdx, int allowableCloseLoopError, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configAllowableClosedloopError", ConfigAllowableClosedloopError,slotIdx, allowableCloseLoopError, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigMaxIntegralAccumulator_i_d_i
    ErrorCode ConfigMaxIntegralAccumulator(int slotIdx, double iaccum, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configMaxIntegralAccumulator", ConfigMaxIntegralAccumulator,slotIdx, iaccum, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigClosedLoopPeakOutput_i_d_i
    ErrorCode ConfigClosedLoopPeakOutput(int slotIdx, double percentOut, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configClosedLoopPeakOutput", ConfigClosedLoopPeakOutput,slotIdx, percentOut, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigClosedLoopPeriod_i_i_i
    ErrorCode ConfigClosedLoopPeriod(int slotIdx, int loopTimeMs, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configClosedLoopPeriod", ConfigClosedLoopPeriod,slotIdx, loopTimeMs, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigAuxPIDPolarity_b_i
    ErrorCode ConfigAuxPIDPolarity(bool invert, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configAuxPIDPolarity", ConfigAuxPIDPolarity,invert, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_SetIntegralAccumulator_d_i_i
    ErrorCode SetIntegralAccumulator(double iaccum, int pidIdx, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "setIntegralAccumulator", SetIntegralAccumulator,iaccum, pidIdx, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_GetClosedLoopError_i
    int GetClosedLoopError(int pidIdx) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,int, CxxBase, "getClosedLoopError", GetClosedLoopError,pidIdx);
    }
#endif

#ifndef RPYGEN_DISABLE_GetIntegralAccumulator_i
    double GetIntegralAccumulator(int pidIdx) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,double, CxxBase, "getIntegralAccumulator", GetIntegralAccumulator,pidIdx);
    }
#endif

#ifndef RPYGEN_DISABLE_GetErrorDerivative_i
    double GetErrorDerivative(int pidIdx) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,double, CxxBase, "getErrorDerivative", GetErrorDerivative,pidIdx);
    }
#endif

#ifndef RPYGEN_DISABLE_SelectProfileSlot_i_i
    ErrorCode SelectProfileSlot(int slotIdx, int pidIdx) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "selectProfileSlot", SelectProfileSlot,slotIdx, pidIdx);
    }
#endif

#ifndef RPYGEN_DISABLE_GetClosedLoopTarget_i
    double GetClosedLoopTarget(int pidIdx) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,double, CxxBase, "getClosedLoopTarget", GetClosedLoopTarget,pidIdx);
    }
#endif

#ifndef RPYGEN_DISABLE_GetActiveTrajectoryPosition_i
    int GetActiveTrajectoryPosition(int pidIdx) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,int, CxxBase, "getActiveTrajectoryPosition", GetActiveTrajectoryPosition,pidIdx);
    }
#endif

#ifndef RPYGEN_DISABLE_GetActiveTrajectoryVelocity_i
    int GetActiveTrajectoryVelocity(int pidIdx) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,int, CxxBase, "getActiveTrajectoryVelocity", GetActiveTrajectoryVelocity,pidIdx);
    }
#endif

#ifndef RPYGEN_DISABLE_GetActiveTrajectoryArbFeedFwd_i
    double GetActiveTrajectoryArbFeedFwd(int pidIdx) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,double, CxxBase, "getActiveTrajectoryArbFeedFwd", GetActiveTrajectoryArbFeedFwd,pidIdx);
    }
#endif

#ifndef RPYGEN_DISABLE_GetActiveTrajectoryHeading_v
    double GetActiveTrajectoryHeading() override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,double, CxxBase, "getActiveTrajectoryHeading", GetActiveTrajectoryHeading,);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigMotionCruiseVelocity_i_i
    ErrorCode ConfigMotionCruiseVelocity(int sensorUnitsPer100ms, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configMotionCruiseVelocity", ConfigMotionCruiseVelocity,sensorUnitsPer100ms, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigMotionAcceleration_i_i
    ErrorCode ConfigMotionAcceleration(int sensorUnitsPer100msPerSec, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configMotionAcceleration", ConfigMotionAcceleration,sensorUnitsPer100msPerSec, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigMotionSCurveStrength_i_i
    ErrorCode ConfigMotionSCurveStrength(int curveStrength, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configMotionSCurveStrength", ConfigMotionSCurveStrength,curveStrength, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ClearMotionProfileTrajectories_v
    ErrorCode ClearMotionProfileTrajectories() override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "clearMotionProfileTrajectories", ClearMotionProfileTrajectories,);
    }
#endif

#ifndef RPYGEN_DISABLE_GetMotionProfileTopLevelBufferCount_v
    int GetMotionProfileTopLevelBufferCount() override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,int, CxxBase, "getMotionProfileTopLevelBufferCount", GetMotionProfileTopLevelBufferCount,);
    }
#endif

#ifndef RPYGEN_DISABLE_PushMotionProfileTrajectory_KRTctre__phoenix__motion__TrajectoryPoint
    ErrorCode PushMotionProfileTrajectory(const ctre::phoenix::motion::TrajectoryPoint& trajPt) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "pushMotionProfileTrajectory", PushMotionProfileTrajectory,trajPt);
    }
#endif

#ifndef RPYGEN_DISABLE_IsMotionProfileTopLevelBufferFull_v
    bool IsMotionProfileTopLevelBufferFull() override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,bool, CxxBase, "isMotionProfileTopLevelBufferFull", IsMotionProfileTopLevelBufferFull,);
    }
#endif

#ifndef RPYGEN_DISABLE_ProcessMotionProfileBuffer_v
    void ProcessMotionProfileBuffer() override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,void, CxxBase, "processMotionProfileBuffer", ProcessMotionProfileBuffer,);
    }
#endif

#ifndef RPYGEN_DISABLE_GetMotionProfileStatus_RTctre__phoenix__motion__MotionProfileStatus
    ErrorCode GetMotionProfileStatus(ctre::phoenix::motion::MotionProfileStatus& statusToFill) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "getMotionProfileStatus", GetMotionProfileStatus,statusToFill);
    }
#endif

#ifndef RPYGEN_DISABLE_ClearMotionProfileHasUnderrun_i
    ErrorCode ClearMotionProfileHasUnderrun(int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "clearMotionProfileHasUnderrun", ClearMotionProfileHasUnderrun,timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ChangeMotionControlFramePeriod_i
    ErrorCode ChangeMotionControlFramePeriod(int periodMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "changeMotionControlFramePeriod", ChangeMotionControlFramePeriod,periodMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigMotionProfileTrajectoryPeriod_i_i
    ErrorCode ConfigMotionProfileTrajectoryPeriod(int baseTrajDurationMs, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configMotionProfileTrajectoryPeriod", ConfigMotionProfileTrajectoryPeriod,baseTrajDurationMs, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigFeedbackNotContinuous_b_i
    ErrorCode ConfigFeedbackNotContinuous(bool feedbackNotContinuous, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configFeedbackNotContinuous", ConfigFeedbackNotContinuous,feedbackNotContinuous, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigRemoteSensorClosedLoopDisableNeutralOnLOS_b_i
    ErrorCode ConfigRemoteSensorClosedLoopDisableNeutralOnLOS(bool remoteSensorClosedLoopDisableNeutralOnLOS, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configRemoteSensorClosedLoopDisableNeutralOnLOS", ConfigRemoteSensorClosedLoopDisableNeutralOnLOS,remoteSensorClosedLoopDisableNeutralOnLOS, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigClearPositionOnLimitF_b_i
    ErrorCode ConfigClearPositionOnLimitF(bool clearPositionOnLimitF, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configClearPositionOnLimitF", ConfigClearPositionOnLimitF,clearPositionOnLimitF, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigClearPositionOnLimitR_b_i
    ErrorCode ConfigClearPositionOnLimitR(bool clearPositionOnLimitR, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configClearPositionOnLimitR", ConfigClearPositionOnLimitR,clearPositionOnLimitR, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigClearPositionOnQuadIdx_b_i
    ErrorCode ConfigClearPositionOnQuadIdx(bool clearPositionOnQuadIdx, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configClearPositionOnQuadIdx", ConfigClearPositionOnQuadIdx,clearPositionOnQuadIdx, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigLimitSwitchDisableNeutralOnLOS_b_i
    ErrorCode ConfigLimitSwitchDisableNeutralOnLOS(bool limitSwitchDisableNeutralOnLOS, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configLimitSwitchDisableNeutralOnLOS", ConfigLimitSwitchDisableNeutralOnLOS,limitSwitchDisableNeutralOnLOS, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigSoftLimitDisableNeutralOnLOS_b_i
    ErrorCode ConfigSoftLimitDisableNeutralOnLOS(bool softLimitDisableNeutralOnLOS, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configSoftLimitDisableNeutralOnLOS", ConfigSoftLimitDisableNeutralOnLOS,softLimitDisableNeutralOnLOS, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigPulseWidthPeriod_EdgesPerRot_i_i
    ErrorCode ConfigPulseWidthPeriod_EdgesPerRot(int pulseWidthPeriod_EdgesPerRot, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configPulseWidthPeriod_EdgesPerRot", ConfigPulseWidthPeriod_EdgesPerRot,pulseWidthPeriod_EdgesPerRot, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigPulseWidthPeriod_FilterWindowSz_i_i
    ErrorCode ConfigPulseWidthPeriod_FilterWindowSz(int pulseWidthPeriod_FilterWindowSz, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configPulseWidthPeriod_FilterWindowSz", ConfigPulseWidthPeriod_FilterWindowSz,pulseWidthPeriod_FilterWindowSz, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_GetLastError_v
    ErrorCode GetLastError() override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "getLastError", GetLastError,);
    }
#endif

#ifndef RPYGEN_DISABLE_GetFaults_RTFaults
    ErrorCode GetFaults(Faults& toFill) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "getFaults", GetFaults,toFill);
    }
#endif

#ifndef RPYGEN_DISABLE_GetStickyFaults_RTStickyFaults
    ErrorCode GetStickyFaults(StickyFaults& toFill) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "getStickyFaults", GetStickyFaults,toFill);
    }
#endif

#ifndef RPYGEN_DISABLE_ClearStickyFaults_i
    ErrorCode ClearStickyFaults(int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "clearStickyFaults", ClearStickyFaults,timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_GetFirmwareVersion_v
    int GetFirmwareVersion() override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,int, CxxBase, "getFirmwareVersion", GetFirmwareVersion,);
    }
#endif

#ifndef RPYGEN_DISABLE_HasResetOccurred_v
    bool HasResetOccurred() override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,bool, CxxBase, "hasResetOccurred", HasResetOccurred,);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigSetCustomParam_i_i_i
    ErrorCode ConfigSetCustomParam(int newValue, int paramIndex, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configSetCustomParam", ConfigSetCustomParam,newValue, paramIndex, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigGetCustomParam_i_i
    int ConfigGetCustomParam(int paramIndex, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,int, CxxBase, "configGetCustomParam", ConfigGetCustomParam,paramIndex, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigSetParameter_TParamEnum_d_c_i_i
    ErrorCode ConfigSetParameter(ParamEnum param, double value, uint8_t subValue, int ordinal, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ErrorCode, CxxBase, "configSetParameter", ConfigSetParameter,param, value, subValue, ordinal, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_ConfigGetParameter_TParamEnum_i_i
    double ConfigGetParameter(ParamEnum paramEnum, int ordinal, int timeoutMs) override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,double, CxxBase, "configGetParameter", ConfigGetParameter,paramEnum, ordinal, timeoutMs);
    }
#endif

#ifndef RPYGEN_DISABLE_GetBaseID_v
    int GetBaseID() override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,int, CxxBase, "getBaseID", GetBaseID,);
    }
#endif

#ifndef RPYGEN_DISABLE_GetDeviceID_v
    int GetDeviceID() override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,int, CxxBase, "getDeviceID", GetDeviceID,);
    }
#endif

#ifndef RPYGEN_DISABLE_GetControlMode_v
    ControlMode GetControlMode() override {
RPYBUILD_OVERLOAD_PURE_NAME(IMotorController,ControlMode, CxxBase, "getControlMode", GetControlMode,);
    }
#endif



};

}; // namespace rpygen
