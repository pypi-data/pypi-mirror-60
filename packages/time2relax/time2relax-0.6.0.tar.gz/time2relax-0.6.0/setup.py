# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['time2relax']

package_data = \
{'': ['*']}

install_requires = \
['requests>=2.22,<3.0']

setup_kwargs = {
    'name': 'time2relax',
    'version': '0.6.0',
    'description': 'A CouchDB driver for Python.',
    'long_description': '# time2relax: Python CouchDB Driver\n\n[![Travis (.org)](https://img.shields.io/travis/rwanyoike/time2relax.svg)](https://travis-ci.org/rwanyoike/time2relax)\n[![Codecov](https://img.shields.io/codecov/c/gh/rwanyoike/time2relax.svg)](https://codecov.io/gh/rwanyoike/time2relax)\n[![GitHub](https://img.shields.io/github/license/rwanyoike/time2relax)](LICENSE)\n[![PyPI](https://img.shields.io/pypi/v/time2relax.svg)](https://pypi.python.org/pypi/time2relax)\n[![Code Style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n\n> A CouchDB driver for Python.\n\ntime2relax is a Python [CouchDB](https://couchdb.apache.org/) driver that tries to offer a minimal level of abstraction between you and CouchDB.\n\nBasic insert usage:\n\n```python\n>>> from time2relax import CouchDB\n>>> db = CouchDB(\'http://localhost:5984/dbname\')\n>>> db.insert({\'title\': \'Ziggy Stardust\'})\n<Response [201]>\n```\n\n<details>\n<summary>Table of Contents</summary>\n\n- [Feature Support](#feature-support)\n- [Installation](#installation)\n- [Documentation](#documentation)\n  - [Create a Database](#create-a-database)\n  - [Delete a Database](#delete-a-database)\n  - [Create/Update a Document](#createupdate-a-document)\n  - [Fetch a Document](#fetch-a-document)\n  - [Delete a Document](#delete-a-document)\n  - [Create/Update a Batch of Documents](#createupdate-a-batch-of-documents)\n  - [Fetch a Batch of Documents](#fetch-a-batch-of-documents)\n  - [Replicate a Database](#replicate-a-database)\n  - [Save an Attachment](#save-an-attachment)\n  - [Get an Attachment](#get-an-attachment)\n  - [Delete an Attachment](#delete-an-attachment)\n  - [Get Database Information](#get-database-information)\n  - [Compact a Database](#compact-a-database)\n  - [Run a List Function](#run-a-list-function)\n  - [Run a Show Function](#run-a-show-function)\n  - [Run a View Function](#run-a-view-function)\n- [How to Contribute](#how-to-contribute)\n\n<small><i><a href=\'http://ecotrust-canada.github.io/markdown-toc/\'>Table of contents generated with markdown-toc</a></i></small>\n</details>\n\n## Feature Support\n\nInspired by [pouchdb](https://github.com/pouchdb/pouchdb)  and [couchdb-nano](https://github.com/apache/couchdb-nano) APIs, it features:\n\n* [Requests](https://requests.readthedocs.io/en/latest) (HTTP for Humans) under the hood.\n* Transparent URL and parameter encoding.\n* HTTP exceptions modeled from CouchDB [error codes](http://docs.couchdb.org/en/1.6.1/api/basics.html#http-status-codes).\n* Support for CouchDB 1.7.x.\n\ntime2relax officially supports **Python 3.6+**.\n\n## Installation\n\nTo install time2relax, simply run:\n\n```shell\n$ pip install -U time2relax\nâœ¨ðŸ›‹âœ¨\n```\n\n## Documentation\n\nTo use time2relax in a project:\n\n```python\n>>> from time2relax import CouchDB\n>>> db = CouchDB(\'http://localhost:5984/dbname\')\n```\n\nMost of the API is exposed as `db.FUNCTION(*args, **kwargs)`, where `**kwargs` are optional arguments that `requests.Session.request` can take.\n\n### Create a Database\n\nInitially the `CouchDB` object will check if the database exists, and try to create it if it does not. You can use `create_db=False` to skip this step:\n\n```python\n>>> db = CouchDB(\'http://localhost:5984/dbname\', create_db=False)\n```\n\n### Delete a Database\n\nDelete a database:\n\n```python\n>>> db.destroy()\n<Response [200]>\n```\n\nFurther requests with the `CouchDB` object should raise a `time2relax.ResourceNotFound`:\n\n```python\n>>> db.info()\nResourceNotFound: ({\'error\': \'not_found\', \'reason\': \'missing\'}, <Response [404]>)\n```\n\n### Create/Update a Document\n\nNote: There are some CouchDB restrictions on valid property names of the documents.\n\nCreate a new document:\n\n```python\n>>> db.insert({\'_id\': \'docid\', \'title\': \'Heros\'})\n<Response [201]>\n```\n\nTo create a new document and let CouchDB auto-generate an `_id` for it:\n\n```python\n>>> db.insert({\'title\': \'Ziggy Stardust\'})\n<Response [201]>\n```\n\nIf the document already exists, you must specify its revision `_rev`, otherwise a conflict will occur. You can update an existing document using `_rev`:\n\n```python\n>>> result = db.get(\'docid\').json()\n>>> db.insert({\'_id\': result[\'_id\'], \'_rev\': result[\'_rev\'], \'title\': \'Dance\'})\n<Response [201]>\n```\n\n### Fetch a Document\n\nRetrieve a document:\n\n```python\n>>> db.get(\'docid\')\n<Response [200]>\n```\n\n### Delete a Document\n\nYou must supply the `_rev` of the existing document.\n\nDelete a document:\n\n```python\n>>> result = db.get(\'docid\').json()\n>>> db.remove(result[\'_id\'], result[\'_rev\'])\n<Response [200]>\n```\n\nYou can also delete a document by using `time2relax.CouchDB.insert` with `{\'_deleted\': True}`:\n\n```python\n>>> result = db.get(\'docid\').json()\n>>> result[\'_deleted\'] = True\n>>> db.insert(result)\n<Response [200]>\n```\n\n### Create/Update a Batch of Documents\n\nCreate multiple documents:\n\n```python\n>>> db.bulk_docs([\n...     {\'_id\': \'doc1\', \'title\': \'Lisa Says\'},\n...     {\'_id\': \'doc2\', \'title\': \'Space Oddity\'},\n... ])\n<Response [201]>\n```\n\nIf you omit the `_id` parameter on a given document, the database will create a new document and assign the ID for you:\n\n```python\n>>> db.bulk_docs([\n...     {\'title\': \'Lisa Says\'},\n...     {\'title\': \'Space Oddity\'},\n... ])\n<Response [201]>\n```\n\nTo update a document, you must include both an `_id` parameter and a `_rev` parameter, which should match the ID and revision of the document on which to base your updates:\n\n```python\n>>> db.bulk_docs([\n...     {\n...         \'_id\': \'doc1\',\n...         \'_rev\': \'1-84abc2a942007bee7cf55007cba56198\',\n...         \'title\': \'Lisa Says\',\n...         \'artist\': \'Velvet Underground\',\n...     },\n...     {\n...         \'_id\': \'doc2\',\n...         \'_rev\': \'1-7b80fc50b6af7a905f368670429a757e\',\n...         \'title\': \'Space Oddity\',\n...         \'artist\': \'David Bowie\',\n...     },\n... ])\n<Response [201]>\n```\n\nFinally, to delete a document, include a `_deleted` parameter with the value `True`:\n\n```python\n>>> db.bulk_docs([\n...     {\n...         \'_id\': \'doc1\',\n...         \'_rev\': \'1-84abc2a942007bee7cf55007cba56198\',\n...         \'title\': \'Lisa Says\',\n...         \'_deleted\': True,\n...     },\n...     {\n...         \'_id\': \'doc2\',\n...         \'_rev\': \'1-7b80fc50b6af7a905f368670429a757e\',\n...         \'title\': \'Space Oddity\',\n...         \'_deleted\': True,\n...     },\n... ])\n<Response [201]>\n```\n\n### Fetch a Batch of Documents\n\nFetch multiple documents:\n\n```python\n>>> params = {\'include_docs\': True, \'attachments\': True}\n>>> db.all_docs(params)\n<Response [200]>\n```\n\nYou can use `startkey`/`endkey` to find all docs in a range:\n\n```python\n>>> params = {\'startkey\': \'bar\', \'endkey\': \'quux\'}\n>>> db.all_docs(params)\n<Response [200]>\n```\n\nYou can also do a prefix search â€“ i.e. "give me all the documents whose `_id` start with `\'foo\'`" â€“ by using the special high Unicode character `\'\\uffff\'`:\n\n```python\n>>> params = {\'startkey\': \'foo\', \'endkey\': \'foo\\uffff\'}\n>>> db.all_docs(params)\n<Response [200]>\n```\n\n### Replicate a Database\n\nNote: The target has to exist, you can use `json={\'create_target\': True}` to create it prior to replication.\n\nReplicate a database to a target:\n\n```python\n>>> db.replicate_to(\'http://localhost:5984/otherdb\')\n<Response [200]>\n```\n\n### Save an Attachment\n\nThis method will update an existing document to add an attachment, so it requires a `_rev` if the document already exists. If the document doesn\'t already exist, then this method will create an empty document containing the attachment.\n\nAttach a text/plain file:\n\n```python\n>>> with open(\'/tmp/att.txt\') as fp:\n...     db.insert_att(\'docid\', None, \'att.txt\', fp, \'text/plain\')\n...\n<Response [201]>\n```\n\n### Get an Attachment\n\nGet attachment data:\n\n```python\n>>> db.get_att(\'docid\', \'att.txt\')\n<Response [200]>\n```\n\n### Delete an Attachment\n\nYou must supply the `_rev` of the existing document.\n\nDelete an attachment:\n\n```python\n>>> result = db.get(\'docid\').json()\n>>> db.remove_att(result[\'_id\'], result[\'_rev\'], \'att.txt\')\n<Response [200]>\n```\n\n### Get Database Information\n\nGet information about a database:\n\n```python\n>>> db.info()\n<Response [200]>\n```\n\n### Compact a Database\n\nThis reduces a database\'s size by removing unused and old data, namely non-leaf revisions and attachments that are no longer referenced by those revisions.\n\nTrigger a compaction operation:\n\n```python\n>>> db.compact()\n<Response [202]>\n```\n\n### Run a List Function\n\nMake sure you understand how list functions work in CouchDB. A good start is [the CouchDB guide entry on lists](http://guide.couchdb.org/draft/transforming.html):\n\n```python\n>>> db.insert({\n...     \'_id\': \'_design/testid\',\n...     \'views\': {\n...         \'viewid\': {\n...             \'map\': "function (doc) {"\n...                    "    emit(doc._id, \'value\');"\n...                    "}",\n...         },\n...     },\n...     \'lists\': {\n...         \'listid\': "function (head, req) {"\n...                   "    return \'Hello World!\';"\n...                   "}",\n...     },\n... })\n<Response [201]>\n>>> db.ddoc_list(\'testid\', \'listid\', \'viewid\')\n<Response [200]>\n```\n\n### Run a Show Function\n\nMake sure you understand how show functions work in CouchDB. A good start is [the CouchDB guide entry on shows](http://guide.couchdb.org/draft/show.html):\n\n```python\n>>> db.insert({\n...     \'_id\': \'_design/testid\',\n...     \'shows\': {\n...         \'showid\': "function (doc, req) {"\n...                   "    return {body: \'relax!\'}"\n...                   "}",\n...     },\n... })\n<Response [201]>\n>>> db.ddoc_show(\'testid\', \'showid\')\n<Response [200]>\n```\n\n### Run a View Function\n\nMake sure you understand how view functions work in CouchDB. A good start is [the CouchDB guide entry on views](http://guide.couchdb.org/draft/views.html):\n\n```python\n>>> db.insert({\n...     \'_id\': \'_design/testid\',\n...     \'views\': {\n...         \'viewid\': {\n...             \'map\': "function (doc) {"\n...                    "    emit(doc.key);"\n...                    "}",\n...         },\n...     },\n... })\n<Response [201]>\n>>> params = {\'reduce\': False, \'key\': \'key2\'}\n>>> db.ddoc_view(\'testid\', \'viewid\', params)\n<Response [200]>\n```\n',
    'author': 'Raymond Wanyoike',
    'author_email': 'raymond.wanyoike@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/rwanyoike/time2relax',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
