[Logger]
# The location and name of the log file
file = .log/ybot.mlb.log
# The logging level for the log file
level = INFO

[Connection]
# Location of the file that has the OAuth credentials to login to the Yahoo!
# service.  This file can be generated with the init_oauth_env.py script.
oauthFile = {{ oauth_file }}

[Cache]
# Location of where to keep the cache files.  These files are used by the
# program to save data taken from web API endpoints.  They help reduce the number
# of requests sent.
dir = .cache/
# The amount of minutes before the free agent cache is invalidated.  When this
# expires we pull the latest set of free agents down.
freeAgentExpiry = 60
# The amount of minutes before the cached prediction builder instance will
# expiry.  When this expires we build the prediction builder from scratch.
predictionBuilderExpiry = 1440

[League]
# The league ID to work on.  You can get the league id using the example/leagues.py
# script.
id = {{ league_id }}
# The league stat categories that we are able to predict.  This can be a subset
# of the actual stat cateogires in the Yahoo! league.  We can avoid stats that
# are not represented in the predicted stats that we use.
predictedStatCategories = {{ stat_categories }}

# This section allows you to specify the class to use for prediction of the
# stats for the players.
[Prediction]
# Leave this to the package within this repo unless you have built your own
builderPackage=yahoo_fantasy_bot
# This repo offers two types prediction system:
# - MLB use .mlb
# - NHL use .nhl
builderModule=.mlb
# The class loader is a function that produces a class for the prediction
# builder.  It takes two arguments: yahoo_fantasy_api.League object and
# configparser.  The prediction builder object has one API that must exist:
# predict().  The first positional argument must be a roster.Container object.
# The remaining arguments are all named and are dependent on the
# PredictionNamedArguments section below.
builderClassLoader=init_prediction_builder

# This section specifies the arguments to use with the predict() function.  All
# of these are named arguments passed in.
[PredictionNamedArguments]

[LineupOptimizer]
# The next three parameters locate the function to use to optimize the lineup.
# The function must take the following parameters:
#  - configparser object for this config file
#  - a ScoreComparer object
#  - a roster.Builder object
#  - a DataFrame of all of the players eligible to be included in the lineup
#  - list of players that form the initial lineup
# If it is able to find a better lineup, it returns it.  Otherwise it returns
# None.
package=yahoo_fantasy_bot
module=.lineup_optimizer
function=optimize_with_genetic_algorithm
#
# The next set of parms in this section are specific to the
# optimize_with_genetic_algorithm function
#
# Number of generations we'll run until we stop.  The best lineup at the end of
# this generation is the one that is returned back.
generations=750
# Number of lineups to generate for the initial population of the algorithm
initialPopulationSize=10
# We use a tournament selection method to pick the chromosomes to use for mating.
# This config parameter determines the number of chromosomes to include in the
# tournament selection process.  The number must be a power of 2.
tournamentParticipants=4
# Number of offsping we'll create when we mate two lineups
numOffspring=6
# The chance that an individual lineup is mutated within a given generation.
mutationPct=5
# To avoid roster churn and dropping all-stars, lock any player on your lineup
# that is owned at or above the given percent.  The percent is express as an
# int (i.e. 90 is 90%).
lockPlayersAbovePctOwn=90

# This section allows you to select the class to display of players to the
# screen.
[Display]
package=yahoo_fantasy_bot
module=.mlb
# The class is instanitated with a single configparser.  The class implements
# the following functions:
# - printRoster(roster)
class=PlayerPrinter

# This section allows you to select the class to handle scoring of a roster.
[Scorer]
package=yahoo_fantasy_bot
module=.mlb
# The class is instantiated with a single argument, configparser.  It must
# implement the following functions:
# - summarize(DataFrame predictedStats) : DataFrame
# - is_counting_stat(stat) : bool
# - is_highest_better(stat) : bool
class=Scorer
# When computing a score with standard deviation, this is a cap for how much a
# given category will dominate.  A category score will at most be computed as a
# multiple of this number of standard deviations.
stdevCap=3

[Trade]
# Set to true if all trades will be automatically rejected.  Otherwise, we will
# evaluate the lineup with the new players and accept it if it improves the
# score.
autoReject=true
