Metadata-Version: 2.1
Name: mypy-boto3-logs
Version: 1.11.7.1
Summary: Type annotations for boto3.CloudWatchLogs 1.11.7 service.
Home-page: https://github.com/vemel/mypy_boto3
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://mypy-boto3.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/vemel/mypy_boto3
Project-URL: Tracker, https://github.com/vemel/mypy_boto3/issues
Description: # mypy-boto3-logs
        
        [![PyPI - mypy-boto3](https://img.shields.io/pypi/v/mypy-boto3.svg?color=blue&style=for-the-badge)](https://pypi.org/project/mypy-boto3)
        [![PyPI - Python Version](https://img.shields.io/pypi/pyversions/mypy-boto3.svg?color=blue&style=for-the-badge)](https://pypi.org/project/mypy-boto3)
        [![Docs](https://img.shields.io/readthedocs/mypy-boto3.svg?color=blue&style=for-the-badge)](https://mypy-boto3.readthedocs.io/)
        [![Coverage](https://img.shields.io/codecov/c/github/vemel/mypy_boto3?style=for-the-badge)](https://codecov.io/gh/vemel/mypy_boto3)
        
        Type annotations for
        [boto3.CloudWatchLogs 1.11.7](https://boto3.amazonaws.com/v1/documentation/api/1.11.7/reference/services/logs.html#CloudWatchLogs) service
        compatible with [mypy](https://github.com/python/mypy), [VSCode](https://code.visualstudio.com/),
        [PyCharm](https://www.jetbrains.com/pycharm/) and other tools.
        
        More information can be found [here](https://vemel.github.io/mypy_boto3/).
        
        - [mypy-boto3-logs](#mypy-boto3-logs)
          - [How to use](#how-to-use)
            - [Type checking](#type-checking)
            - [Code auto-complete](#code-auto-complete)
          - [How it works](#how-it-works)
        
        ## How to use
        
        ### Type checking
        
        Make sure you have [mypy](https://github.com/python/mypy) installed and activated in your IDE.
        
        Install `boto3-stubs` for `CloudWatchLogs` service.
        
        ```bash
        python -m pip install boto3-stubs[mypy-boto3-logs]
        ```
        
        Use `boto3` with `mypy_boto3` in your project and enjoy type checking and auto-complete.
        
        ```python
        import boto3
        
        from mypy_boto3 import logs
        # alternative import if you do not want to install mypy_boto3 package
        # import mypy_boto3_logs as logs
        
        # Use this client as usual, now mypy can check if your code is valid.
        # Check if your IDE supports function overloads,
        # you probably do not need explicit type annotations
        # client = boto3.client("logs")
        client: logs.CloudWatchLogsClient = boto3.client("logs")
        
        # works for session as well
        session = boto3.session.Session(region="us-west-1")
        session_client: logs.CloudWatchLogsClient = session.client("logs")
        
        
        # Paginators need type annotation on creation
        describe_destinations_paginator: logs.DescribeDestinationsPaginator = client.get_paginator("describe_destinations")
        describe_export_tasks_paginator: logs.DescribeExportTasksPaginator = client.get_paginator("describe_export_tasks")
        describe_log_groups_paginator: logs.DescribeLogGroupsPaginator = client.get_paginator("describe_log_groups")
        describe_log_streams_paginator: logs.DescribeLogStreamsPaginator = client.get_paginator("describe_log_streams")
        describe_metric_filters_paginator: logs.DescribeMetricFiltersPaginator = client.get_paginator("describe_metric_filters")
        describe_queries_paginator: logs.DescribeQueriesPaginator = client.get_paginator("describe_queries")
        describe_resource_policies_paginator: logs.DescribeResourcePoliciesPaginator = client.get_paginator("describe_resource_policies")
        describe_subscription_filters_paginator: logs.DescribeSubscriptionFiltersPaginator = client.get_paginator("describe_subscription_filters")
        filter_log_events_paginator: logs.FilterLogEventsPaginator = client.get_paginator("filter_log_events")
        ```
        
        ## How it works
        
        Fully automated [builder](https://github.com/vemel/mypy_boto3) carefully generates
        type annotations for each service, patiently waiting for `boto3` updates. It delivers
        a drop-in type annotations for you and makes sure that:
        
        - All available `boto3` services are covered.
        - Each public class and method of every `boto3` service gets valid type annotations
          extracted from the documentation (blame `botocore` docs if types are incorrect).
        - Type annotations include up-to-date documentation.
        - Link to documentation is provided for every method.
        - Code is processed by [black](https://github.com/psf/black) for readability.
Keywords: boto3 logs type-annotations boto3-stubs mypy mypy-stubs typeshed autocomplete auto-generated
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown
