import typing

import numpy  # type: ignore

class ResultProxy:
    @staticmethod
    def execute(sql: str, db: object) -> "ResultProxy": ...
    def fetchall(self) -> typing.Dict[str, numpy.ndarray]: ...
    def fetchmany(self, count: int) -> typing.Dict[str, numpy.ndarray]: ...
    def close(self) -> None: ...
    @property
    def closed(self) -> bool: ...

class Database:
    def __init__(self, path: str): ...
    @property
    def closed(self) -> bool: ...
    def close(self) -> None: ...
    def execute(self, sql_statement: str) -> ResultProxy: ...
    def load_extension(self, name: str) -> None: ...
