# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class IdentityProvider(pulumi.CustomResource):
    add_read_token_role_on_create: pulumi.Output[bool]
    alias: pulumi.Output[str]
    authenticate_by_default: pulumi.Output[bool]
    backchannel_supported: pulumi.Output[bool]
    display_name: pulumi.Output[str]
    enabled: pulumi.Output[bool]
    first_broker_login_flow_alias: pulumi.Output[str]
    force_authn: pulumi.Output[bool]
    hide_on_login_page: pulumi.Output[bool]
    internal_id: pulumi.Output[str]
    link_only: pulumi.Output[bool]
    name_id_policy_format: pulumi.Output[str]
    post_binding_authn_request: pulumi.Output[bool]
    post_binding_logout: pulumi.Output[bool]
    post_binding_response: pulumi.Output[bool]
    post_broker_login_flow_alias: pulumi.Output[str]
    realm: pulumi.Output[str]
    signature_algorithm: pulumi.Output[str]
    signing_certificate: pulumi.Output[str]
    single_logout_service_url: pulumi.Output[str]
    single_sign_on_service_url: pulumi.Output[str]
    store_token: pulumi.Output[bool]
    trust_email: pulumi.Output[bool]
    validate_signature: pulumi.Output[bool]
    want_assertions_encrypted: pulumi.Output[bool]
    want_assertions_signed: pulumi.Output[bool]
    xml_sign_key_info_key_name_transformer: pulumi.Output[str]
    def __init__(__self__, resource_name, opts=None, add_read_token_role_on_create=None, alias=None, authenticate_by_default=None, backchannel_supported=None, display_name=None, enabled=None, first_broker_login_flow_alias=None, force_authn=None, hide_on_login_page=None, link_only=None, name_id_policy_format=None, post_binding_authn_request=None, post_binding_logout=None, post_binding_response=None, post_broker_login_flow_alias=None, realm=None, signature_algorithm=None, signing_certificate=None, single_logout_service_url=None, single_sign_on_service_url=None, store_token=None, trust_email=None, validate_signature=None, want_assertions_encrypted=None, want_assertions_signed=None, xml_sign_key_info_key_name_transformer=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a IdentityProvider resource with the given unique name, props, and options.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['add_read_token_role_on_create'] = add_read_token_role_on_create
            if alias is None:
                raise TypeError("Missing required property 'alias'")
            __props__['alias'] = alias
            __props__['authenticate_by_default'] = authenticate_by_default
            __props__['backchannel_supported'] = backchannel_supported
            __props__['display_name'] = display_name
            __props__['enabled'] = enabled
            __props__['first_broker_login_flow_alias'] = first_broker_login_flow_alias
            __props__['force_authn'] = force_authn
            __props__['hide_on_login_page'] = hide_on_login_page
            __props__['link_only'] = link_only
            __props__['name_id_policy_format'] = name_id_policy_format
            __props__['post_binding_authn_request'] = post_binding_authn_request
            __props__['post_binding_logout'] = post_binding_logout
            __props__['post_binding_response'] = post_binding_response
            __props__['post_broker_login_flow_alias'] = post_broker_login_flow_alias
            if realm is None:
                raise TypeError("Missing required property 'realm'")
            __props__['realm'] = realm
            __props__['signature_algorithm'] = signature_algorithm
            __props__['signing_certificate'] = signing_certificate
            __props__['single_logout_service_url'] = single_logout_service_url
            if single_sign_on_service_url is None:
                raise TypeError("Missing required property 'single_sign_on_service_url'")
            __props__['single_sign_on_service_url'] = single_sign_on_service_url
            __props__['store_token'] = store_token
            __props__['trust_email'] = trust_email
            __props__['validate_signature'] = validate_signature
            __props__['want_assertions_encrypted'] = want_assertions_encrypted
            __props__['want_assertions_signed'] = want_assertions_signed
            __props__['xml_sign_key_info_key_name_transformer'] = xml_sign_key_info_key_name_transformer
            __props__['internal_id'] = None
        super(IdentityProvider, __self__).__init__(
            'keycloak:Saml/identityProvider:IdentityProvider',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, add_read_token_role_on_create=None, alias=None, authenticate_by_default=None, backchannel_supported=None, display_name=None, enabled=None, first_broker_login_flow_alias=None, force_authn=None, hide_on_login_page=None, internal_id=None, link_only=None, name_id_policy_format=None, post_binding_authn_request=None, post_binding_logout=None, post_binding_response=None, post_broker_login_flow_alias=None, realm=None, signature_algorithm=None, signing_certificate=None, single_logout_service_url=None, single_sign_on_service_url=None, store_token=None, trust_email=None, validate_signature=None, want_assertions_encrypted=None, want_assertions_signed=None, xml_sign_key_info_key_name_transformer=None):
        """
        Get an existing IdentityProvider resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.
        
        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()
        __props__["add_read_token_role_on_create"] = add_read_token_role_on_create
        __props__["alias"] = alias
        __props__["authenticate_by_default"] = authenticate_by_default
        __props__["backchannel_supported"] = backchannel_supported
        __props__["display_name"] = display_name
        __props__["enabled"] = enabled
        __props__["first_broker_login_flow_alias"] = first_broker_login_flow_alias
        __props__["force_authn"] = force_authn
        __props__["hide_on_login_page"] = hide_on_login_page
        __props__["internal_id"] = internal_id
        __props__["link_only"] = link_only
        __props__["name_id_policy_format"] = name_id_policy_format
        __props__["post_binding_authn_request"] = post_binding_authn_request
        __props__["post_binding_logout"] = post_binding_logout
        __props__["post_binding_response"] = post_binding_response
        __props__["post_broker_login_flow_alias"] = post_broker_login_flow_alias
        __props__["realm"] = realm
        __props__["signature_algorithm"] = signature_algorithm
        __props__["signing_certificate"] = signing_certificate
        __props__["single_logout_service_url"] = single_logout_service_url
        __props__["single_sign_on_service_url"] = single_sign_on_service_url
        __props__["store_token"] = store_token
        __props__["trust_email"] = trust_email
        __props__["validate_signature"] = validate_signature
        __props__["want_assertions_encrypted"] = want_assertions_encrypted
        __props__["want_assertions_signed"] = want_assertions_signed
        __props__["xml_sign_key_info_key_name_transformer"] = xml_sign_key_info_key_name_transformer
        return IdentityProvider(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

