# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class GroupMapper(pulumi.CustomResource):
    drop_non_existing_groups_during_sync: pulumi.Output[bool]
    group_name_ldap_attribute: pulumi.Output[str]
    group_object_classes: pulumi.Output[list]
    groups_ldap_filter: pulumi.Output[str]
    ignore_missing_groups: pulumi.Output[bool]
    ldap_groups_dn: pulumi.Output[str]
    ldap_user_federation_id: pulumi.Output[str]
    mapped_group_attributes: pulumi.Output[list]
    memberof_ldap_attribute: pulumi.Output[str]
    membership_attribute_type: pulumi.Output[str]
    membership_ldap_attribute: pulumi.Output[str]
    membership_user_ldap_attribute: pulumi.Output[str]
    mode: pulumi.Output[str]
    name: pulumi.Output[str]
    preserve_group_inheritance: pulumi.Output[bool]
    realm_id: pulumi.Output[str]
    user_roles_retrieve_strategy: pulumi.Output[str]
    def __init__(__self__, resource_name, opts=None, drop_non_existing_groups_during_sync=None, group_name_ldap_attribute=None, group_object_classes=None, groups_ldap_filter=None, ignore_missing_groups=None, ldap_groups_dn=None, ldap_user_federation_id=None, mapped_group_attributes=None, memberof_ldap_attribute=None, membership_attribute_type=None, membership_ldap_attribute=None, membership_user_ldap_attribute=None, mode=None, name=None, preserve_group_inheritance=None, realm_id=None, user_roles_retrieve_strategy=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a GroupMapper resource with the given unique name, props, and options.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['drop_non_existing_groups_during_sync'] = drop_non_existing_groups_during_sync
            if group_name_ldap_attribute is None:
                raise TypeError("Missing required property 'group_name_ldap_attribute'")
            __props__['group_name_ldap_attribute'] = group_name_ldap_attribute
            if group_object_classes is None:
                raise TypeError("Missing required property 'group_object_classes'")
            __props__['group_object_classes'] = group_object_classes
            __props__['groups_ldap_filter'] = groups_ldap_filter
            __props__['ignore_missing_groups'] = ignore_missing_groups
            if ldap_groups_dn is None:
                raise TypeError("Missing required property 'ldap_groups_dn'")
            __props__['ldap_groups_dn'] = ldap_groups_dn
            if ldap_user_federation_id is None:
                raise TypeError("Missing required property 'ldap_user_federation_id'")
            __props__['ldap_user_federation_id'] = ldap_user_federation_id
            __props__['mapped_group_attributes'] = mapped_group_attributes
            __props__['memberof_ldap_attribute'] = memberof_ldap_attribute
            __props__['membership_attribute_type'] = membership_attribute_type
            if membership_ldap_attribute is None:
                raise TypeError("Missing required property 'membership_ldap_attribute'")
            __props__['membership_ldap_attribute'] = membership_ldap_attribute
            if membership_user_ldap_attribute is None:
                raise TypeError("Missing required property 'membership_user_ldap_attribute'")
            __props__['membership_user_ldap_attribute'] = membership_user_ldap_attribute
            __props__['mode'] = mode
            __props__['name'] = name
            __props__['preserve_group_inheritance'] = preserve_group_inheritance
            if realm_id is None:
                raise TypeError("Missing required property 'realm_id'")
            __props__['realm_id'] = realm_id
            __props__['user_roles_retrieve_strategy'] = user_roles_retrieve_strategy
        super(GroupMapper, __self__).__init__(
            'keycloak:Ldap/groupMapper:GroupMapper',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, drop_non_existing_groups_during_sync=None, group_name_ldap_attribute=None, group_object_classes=None, groups_ldap_filter=None, ignore_missing_groups=None, ldap_groups_dn=None, ldap_user_federation_id=None, mapped_group_attributes=None, memberof_ldap_attribute=None, membership_attribute_type=None, membership_ldap_attribute=None, membership_user_ldap_attribute=None, mode=None, name=None, preserve_group_inheritance=None, realm_id=None, user_roles_retrieve_strategy=None):
        """
        Get an existing GroupMapper resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.
        
        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()
        __props__["drop_non_existing_groups_during_sync"] = drop_non_existing_groups_during_sync
        __props__["group_name_ldap_attribute"] = group_name_ldap_attribute
        __props__["group_object_classes"] = group_object_classes
        __props__["groups_ldap_filter"] = groups_ldap_filter
        __props__["ignore_missing_groups"] = ignore_missing_groups
        __props__["ldap_groups_dn"] = ldap_groups_dn
        __props__["ldap_user_federation_id"] = ldap_user_federation_id
        __props__["mapped_group_attributes"] = mapped_group_attributes
        __props__["memberof_ldap_attribute"] = memberof_ldap_attribute
        __props__["membership_attribute_type"] = membership_attribute_type
        __props__["membership_ldap_attribute"] = membership_ldap_attribute
        __props__["membership_user_ldap_attribute"] = membership_user_ldap_attribute
        __props__["mode"] = mode
        __props__["name"] = name
        __props__["preserve_group_inheritance"] = preserve_group_inheritance
        __props__["realm_id"] = realm_id
        __props__["user_roles_retrieve_strategy"] = user_roles_retrieve_strategy
        return GroupMapper(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

