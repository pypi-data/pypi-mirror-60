# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from .. import utilities, tables

class UserFederation(pulumi.CustomResource):
    batch_size_for_sync: pulumi.Output[float]
    bind_credential: pulumi.Output[str]
    bind_dn: pulumi.Output[str]
    cache_policy: pulumi.Output[str]
    changed_sync_period: pulumi.Output[float]
    connection_timeout: pulumi.Output[str]
    connection_url: pulumi.Output[str]
    custom_user_search_filter: pulumi.Output[str]
    edit_mode: pulumi.Output[str]
    enabled: pulumi.Output[bool]
    full_sync_period: pulumi.Output[float]
    import_enabled: pulumi.Output[bool]
    name: pulumi.Output[str]
    pagination: pulumi.Output[bool]
    priority: pulumi.Output[float]
    rdn_ldap_attribute: pulumi.Output[str]
    read_timeout: pulumi.Output[str]
    realm_id: pulumi.Output[str]
    search_scope: pulumi.Output[str]
    sync_registrations: pulumi.Output[bool]
    use_truststore_spi: pulumi.Output[str]
    user_object_classes: pulumi.Output[list]
    username_ldap_attribute: pulumi.Output[str]
    users_dn: pulumi.Output[str]
    uuid_ldap_attribute: pulumi.Output[str]
    validate_password_policy: pulumi.Output[bool]
    vendor: pulumi.Output[str]
    def __init__(__self__, resource_name, opts=None, batch_size_for_sync=None, bind_credential=None, bind_dn=None, cache_policy=None, changed_sync_period=None, connection_timeout=None, connection_url=None, custom_user_search_filter=None, edit_mode=None, enabled=None, full_sync_period=None, import_enabled=None, name=None, pagination=None, priority=None, rdn_ldap_attribute=None, read_timeout=None, realm_id=None, search_scope=None, sync_registrations=None, use_truststore_spi=None, user_object_classes=None, username_ldap_attribute=None, users_dn=None, uuid_ldap_attribute=None, validate_password_policy=None, vendor=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a UserFederation resource with the given unique name, props, and options.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['batch_size_for_sync'] = batch_size_for_sync
            __props__['bind_credential'] = bind_credential
            __props__['bind_dn'] = bind_dn
            __props__['cache_policy'] = cache_policy
            __props__['changed_sync_period'] = changed_sync_period
            __props__['connection_timeout'] = connection_timeout
            if connection_url is None:
                raise TypeError("Missing required property 'connection_url'")
            __props__['connection_url'] = connection_url
            __props__['custom_user_search_filter'] = custom_user_search_filter
            __props__['edit_mode'] = edit_mode
            __props__['enabled'] = enabled
            __props__['full_sync_period'] = full_sync_period
            __props__['import_enabled'] = import_enabled
            __props__['name'] = name
            __props__['pagination'] = pagination
            __props__['priority'] = priority
            if rdn_ldap_attribute is None:
                raise TypeError("Missing required property 'rdn_ldap_attribute'")
            __props__['rdn_ldap_attribute'] = rdn_ldap_attribute
            __props__['read_timeout'] = read_timeout
            if realm_id is None:
                raise TypeError("Missing required property 'realm_id'")
            __props__['realm_id'] = realm_id
            __props__['search_scope'] = search_scope
            __props__['sync_registrations'] = sync_registrations
            __props__['use_truststore_spi'] = use_truststore_spi
            if user_object_classes is None:
                raise TypeError("Missing required property 'user_object_classes'")
            __props__['user_object_classes'] = user_object_classes
            if username_ldap_attribute is None:
                raise TypeError("Missing required property 'username_ldap_attribute'")
            __props__['username_ldap_attribute'] = username_ldap_attribute
            if users_dn is None:
                raise TypeError("Missing required property 'users_dn'")
            __props__['users_dn'] = users_dn
            if uuid_ldap_attribute is None:
                raise TypeError("Missing required property 'uuid_ldap_attribute'")
            __props__['uuid_ldap_attribute'] = uuid_ldap_attribute
            __props__['validate_password_policy'] = validate_password_policy
            __props__['vendor'] = vendor
        super(UserFederation, __self__).__init__(
            'keycloak:Ldap/userFederation:UserFederation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, batch_size_for_sync=None, bind_credential=None, bind_dn=None, cache_policy=None, changed_sync_period=None, connection_timeout=None, connection_url=None, custom_user_search_filter=None, edit_mode=None, enabled=None, full_sync_period=None, import_enabled=None, name=None, pagination=None, priority=None, rdn_ldap_attribute=None, read_timeout=None, realm_id=None, search_scope=None, sync_registrations=None, use_truststore_spi=None, user_object_classes=None, username_ldap_attribute=None, users_dn=None, uuid_ldap_attribute=None, validate_password_policy=None, vendor=None):
        """
        Get an existing UserFederation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.
        
        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()
        __props__["batch_size_for_sync"] = batch_size_for_sync
        __props__["bind_credential"] = bind_credential
        __props__["bind_dn"] = bind_dn
        __props__["cache_policy"] = cache_policy
        __props__["changed_sync_period"] = changed_sync_period
        __props__["connection_timeout"] = connection_timeout
        __props__["connection_url"] = connection_url
        __props__["custom_user_search_filter"] = custom_user_search_filter
        __props__["edit_mode"] = edit_mode
        __props__["enabled"] = enabled
        __props__["full_sync_period"] = full_sync_period
        __props__["import_enabled"] = import_enabled
        __props__["name"] = name
        __props__["pagination"] = pagination
        __props__["priority"] = priority
        __props__["rdn_ldap_attribute"] = rdn_ldap_attribute
        __props__["read_timeout"] = read_timeout
        __props__["realm_id"] = realm_id
        __props__["search_scope"] = search_scope
        __props__["sync_registrations"] = sync_registrations
        __props__["use_truststore_spi"] = use_truststore_spi
        __props__["user_object_classes"] = user_object_classes
        __props__["username_ldap_attribute"] = username_ldap_attribute
        __props__["users_dn"] = users_dn
        __props__["uuid_ldap_attribute"] = uuid_ldap_attribute
        __props__["validate_password_policy"] = validate_password_policy
        __props__["vendor"] = vendor
        return UserFederation(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

