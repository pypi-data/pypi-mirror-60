{"version":3,"sources":["webpack:///./src/common/string/compare.ts","webpack:///./src/common/entity/entity_filter.ts","webpack:///./src/dialogs/domain-toggler/show-dialog-domain-toggler.ts","webpack:///./src/panels/config/cloud/google-assistant/cloud-google-assistant.ts","webpack:///./src/data/google_assistant.ts"],"names":["__webpack_require__","d","__webpack_exports__","compare","caseInsensitiveCompare","a","b","toLowerCase","isEmptyFilter","generateFilter","_compute_domain__WEBPACK_IMPORTED_MODULE_0__","filter","include_domains","length","include_entities","exclude_domains","exclude_entities","includeDomains","includeEntities","excludeDomains","excludeEntities","includeDomainsSet","Set","includeEntitiesSet","excludeDomainsSet","excludeEntitiesSet","haveInclude","size","haveExclude","entityId","has","computeDomain","showDomainTogglerDialog","_common_dom_fire_event__WEBPACK_IMPORTED_MODULE_0__","loadDomainTogglerDialog","Promise","all","e","then","bind","element","dialogParams","fireEvent","dialogTag","dialogImport","configIsExposed","config","undefined","should_expose","customElement","CloudGoogleAssistant","_LitElement","[object Object]","args","super","_initialize","this","property","memoizeOne","_entities","html","emptyFilter","cloudStatus","google_entities","filterFunc","_getEntityFilterFunc","showInExposed","_isInitialExposed","trackExposed","selected","exposedCards","notExposedCards","forEach","entity","stateObj","hass","states","entity_id","_entityConfigs","isExposed","add","push","_showMoreInfo","traits","map","trait","substr","lastIndexOf","join","_exposeChanged","localize","might_2fa","Boolean","disable_2fa","_disable2FAChanged","narrow","_openDomainToggler","changedProps","_get","_getPrototypeOf","prototype","call","_fetchData","prefs","google_entity_configs","async","entities","callWS","type","fetchCloudGoogleEntities","sort","stateA","stateB","computeStateName","ev","currentTarget","newExposed","target","checked","_updateExposed","_updateConfig","_ensureEntitySync","newDisable2FA","values","updatedConfig","updateCloudGoogleEntityConfig","Object","assign","_ensureStatusReload","domains","value","idx","self","indexOf","toggleDomain","domain","turnOn","_popstateReloadStatusAttached","parent","parentElement","window","addEventListener","once","_popstateSyncAttached","showToast","message","cloudSyncGoogleAssistant","css","LitElement"],"mappings":"uFAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAAH,EAAAC,EAAAC,EAAA,sBAAAE,IAAO,MAAMD,EAAU,CAACE,EAAWC,IAC7BD,EAAIC,GACE,EAEND,EAAIC,EACC,EAGF,EAGIF,EAAyB,CAACC,EAAWC,IAChDH,EAAQE,EAAEE,cAAeD,EAAEC,iDCZ7BP,EAAAC,EAAAC,EAAA,sBAAAM,IAAAR,EAAAC,EAAAC,EAAA,sBAAAO,IAAA,IAAAC,EAAAV,EAAA,KAWO,MAAMQ,EAAiBG,GAC5BA,EAAOC,gBAAgBC,OACrBF,EAAOG,iBAAiBD,OACxBF,EAAOI,gBAAgBF,OACvBF,EAAOK,iBAAiBH,SAC1B,EAEWJ,EAAiB,CAC5BQ,EACAC,EACAC,EACAC,KAEA,MAAMC,EAAoB,IAAIC,IAAIL,GAC5BM,EAAqB,IAAID,IAAIJ,GAC7BM,EAAoB,IAAIF,IAAIH,GAC5BM,EAAqB,IAAIH,IAAIF,GAE7BM,EAAcL,EAAkBM,KAAO,GAAKJ,EAAmBI,KAAO,EACtEC,EAAcJ,EAAkBG,KAAO,GAAKF,EAAmBE,KAAO,EAG5E,OAAKD,GAAgBE,EAKjBF,IAAgBE,EACVC,GACNN,EAAmBO,IAAID,IACvBR,EAAkBS,IAAIC,YAAcF,KAInCH,GAAeE,EACVC,IACLJ,EAAmBK,IAAID,KACvBL,EAAkBM,IAAIC,YAAcF,IASrCR,EAAkBM,KACZE,GACNR,EAAkBS,IAAIC,YAAcF,KAC/BJ,EAAmBK,IAAID,GACxBN,EAAmBO,IAAID,GAM3BL,EAAkBG,KACZE,GACNL,EAAkBM,IAAIC,YAAcF,IAChCN,EAAmBO,IAAID,IACtBJ,EAAmBK,IAAID,GAKxBA,GAAaN,EAAmBO,IAAID,GA1CnC,KAAM,qCClCjB7B,EAAAC,EAAAC,EAAA,sBAAA8B,IAAA,IAAAC,EAAAjC,EAAA,IAOO,MAAMkC,EAA0B,IACrCC,QAAAC,IAAA,CAAApC,EAAAqC,EAAA,GAAArC,EAAAqC,EAAA,MAAAC,KAAAtC,EAAAuC,KAAA,WAEWP,EAA0B,CACrCQ,EACAC,KAEAC,YAAUF,EAAS,cAAe,CAChCG,UAAW,wBACXC,aAAcV,EACdO,kzDC4BJ,MAEMI,EAAmBC,QACEC,IAAzBD,EAAOE,eAEHF,EAAOE,s1LAEZC,YAAc,yCAAf,MACMC,UADNC,EAC8CC,eAAAC,GAAAC,SAAAD,GAAAE,EAAAC,gBAAxCN,+BACHO,kEACAA,yEACAA,oEACAA,uEACAA,+CACmE,0DACpC,gEACQ,0GAGTC,YAAY/C,GACzCF,YACEE,EAAOC,gBACPD,EAAOG,iBACPH,EAAOI,gBACPJ,EAAOK,sDAIX,WACE,QAAuB+B,IAAnBS,KAAKG,UACP,OAAOC;;QAIT,MAAMC,EAAcrD,YAAcgD,KAAKM,YAAYC,iBAC7CC,EAAaR,KAAKS,qBACtBT,KAAKM,YAAYC,iBAMbG,EAAgBV,KAAKW,mBAAqB,IAAI7C,IAC9C8C,OAA0CrB,IAA3BS,KAAKW,kBAE1B,IAAIE,EAAW,EAIf,MAAMC,EAAiC,GACjCC,EAAoC,GA+D1C,OA7DAf,KAAKG,UAAUa,QAASC,IACtB,MAAMC,EAAWlB,KAAKmB,KAAKC,OAAOH,EAAOI,WACnC/B,EAASU,KAAKsB,eAAeL,EAAOI,YAAc,GAClDE,EAAYlB,EACdhB,EAAgBC,GAChBkB,EAAWS,EAAOI,WAClBE,IACFV,IAEID,GACFF,EAAcc,IAAIP,EAAOI,aAIdX,EAAcpC,IAAI2C,EAAOI,WACpCP,EACAC,GAEGU,KAAKrB;;;;sBAIIJ,KAAKmB;0BACDD;;uBAEHlB,KAAK0B;;gBAEZT,EAAOU,OACNC,IAAKC,GAAUA,EAAMC,OAAOD,EAAME,YAAY,KAAO,IACrDC,KAAK;;;0BAGIf,EAAOI;2BACNhB;yBACFkB;wBACDvB,KAAKiC;;gBAEbjC,KAAKmB,KAAMe,SAAS;;cAEtBjB,EAAOkB,UACL/B;;gCAEgBa,EAAOI;+BACRe,QAAQ9C,EAAO+C;8BAChBrC,KAAKsC;;sBAEbtC,KAAKmB,KAAMe,SACX;;kBAIN;;;WAMRtB,IACFZ,KAAKW,kBAAoBD,GAGpBN;8BACmBJ,KAAKmB,KAAMe,SACjC;;YAGIrB,IACLb,KAAKuC,OAIF,GAHAnC;;;;UAOAC,EACID;;;;2BAIaJ,KAAKwC;;gBAGlB;UAGHnC,EAMG,GALAD;;oBAEMJ,KAAKmB,KAAMe,SAAS;;;YAM5BpB,EAAazD,OAAS,EAClB+C;;sBAEMJ,KAAKmB,KAAMe,SACX;;yCAGmBpB;kBAEzB;YAGJC,EAAgB1D,OAAS,EACrB+C;;sBAEMJ,KAAKmB,KAAMe,SACX;;yCAGmBnB;kBAEzB;;;gDAOd,SAAuB0B,GACrBC,EAAAC,EAxKEjD,EAwKFkD,WAAA,eAAA5C,MAAA6C,KAAA7C,KAAmByC,GACnBzC,KAAK8C,kDAGP,SAAkBL,GAChBC,EAAAC,EA7KEjD,EA6KFkD,WAAA,UAAA5C,MAAA6C,KAAA7C,KAAcyC,GACVA,EAAanE,IAAI,iBACnB0B,KAAKsB,eAAiBtB,KAAKM,YAAYyC,MAAMC,+DAIjDC,iBACE,MAAMC,OCjO+B/B,IACvCA,EAAKgC,OAAuB,CAAEC,KAAM,oCDgOXC,CAAyBrD,KAAKmB,MACrD+B,EAASI,KAAK,CAACzG,EAAGC,KAChB,MAAMyG,EAASvD,KAAKmB,KAAKC,OAAOvE,EAAEwE,WAC5BmC,EAASxD,KAAKmB,KAAKC,OAAOtE,EAAEuE,WAClC,OAAO1E,YACL4G,EAASE,YAAiBF,GAAU1G,EAAEwE,UACtCmC,EAASC,YAAiBD,GAAU1G,EAAEuE,aAG1CrB,KAAKG,UAAY+C,6CAGnB,SAAsBQ,GACpB,MAAMrF,EAAWqF,EAAGC,cAAczC,SAASG,UAC3CnC,YAAUc,KAAM,iBAAkB,CAAE3B,yDAGtC4E,eAA6BS,GAC3B,MAAMrF,EAAYqF,EAAGC,cAAsBtF,SACrCuF,EAAcF,EAAGG,OAAoBC,cACrC9D,KAAK+D,eAAe1F,EAAUuF,+CAGtCX,eAA6B5E,EAAkBuF,GAEzCA,IADevE,EAAgBW,KAAKsB,eAAejD,IAAa,YAI9D2B,KAAKgE,cAAc3F,EAAU,CACjCmB,cAAeoE,IAEjB5D,KAAKiE,qEAGPhB,eAAiCS,GAC/B,MAAMrF,EAAYqF,EAAGC,cAAsBtF,SACrC6F,EAAiBR,EAAGG,OAAoBC,QAI1CI,IAHkB9B,SACnBpC,KAAKsB,eAAejD,IAAa,IAAIgE,oBAKlCrC,KAAKgE,cAAc3F,EAAU,CACjCgE,YAAa6B,+CAIjBjB,eAA4B5E,EAAkB8F,GAC5C,MAAMC,QAAsBC,YAC1BrE,KAAKmB,KACL9C,EACA8F,GAEFnE,KAAKsB,eAALgD,OAAAC,OAAA,GACKvE,KAAKsB,eADV,CAEE1B,CAACvB,GAAW+F,IAEdpE,KAAKwE,sEAGP,WACEhG,YAAwBwB,KAAM,CAC5ByE,QAASzE,KAAKG,UAAWyB,IAAKX,GAC5B1C,YAAc0C,EAAOI,YACrBlE,OAAO,CAACuH,EAAOC,EAAKC,IAASA,EAAKC,QAAQH,KAAWC,GACvDG,aAAc,CAACC,EAAQC,KACrBhF,KAAKG,UAAWa,QAASC,IACnB1C,YAAc0C,EAAOI,aAAe0D,GACtC/E,KAAK+D,eAAe9C,EAAOI,UAAW2D,yDAOhD,WACE,GAAIhF,KAAKiF,8BACP,OAEFjF,KAAKiF,+BAAgC,EAGrC,MAAMC,EAASlF,KAAKmF,cACpBC,OAAOC,iBACL,WACA,IAAMnG,YAAUgG,EAAQ,2BACxB,CAAEI,MAAM,mDAIZ,WACE,GAAItF,KAAKuF,sBACP,OAEFvF,KAAKuF,uBAAwB,EAG7B,MAAML,EAASlF,KAAKmF,cACpBC,OAAOC,iBACL,WACA,KACEG,YAAUN,EAAQ,CAChBO,QAASzF,KAAKmB,KAAMe,SAClB,iDAGJwD,YAAyB1F,KAAKmB,OAEhC,CAAEmE,MAAM,+CAIZ,WACE,OAAOK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WAtSwBC","file":"chunk.b847c9ca52cc74afaacf.js","sourcesContent":["export const compare = (a: string, b: string) => {\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n\n  return 0;\n};\n\nexport const caseInsensitiveCompare = (a: string, b: string) =>\n  compare(a.toLowerCase(), b.toLowerCase());\n","import { computeDomain } from \"./compute_domain\";\n\nexport type FilterFunc = (entityId: string) => boolean;\n\nexport interface EntityFilter {\n  include_domains: string[];\n  include_entities: string[];\n  exclude_domains: string[];\n  exclude_entities: string[];\n}\n\nexport const isEmptyFilter = (filter: EntityFilter) =>\n  filter.include_domains.length +\n    filter.include_entities.length +\n    filter.exclude_domains.length +\n    filter.exclude_entities.length ===\n  0;\n\nexport const generateFilter = (\n  includeDomains?: string[],\n  includeEntities?: string[],\n  excludeDomains?: string[],\n  excludeEntities?: string[]\n): FilterFunc => {\n  const includeDomainsSet = new Set(includeDomains);\n  const includeEntitiesSet = new Set(includeEntities);\n  const excludeDomainsSet = new Set(excludeDomains);\n  const excludeEntitiesSet = new Set(excludeEntities);\n\n  const haveInclude = includeDomainsSet.size > 0 || includeEntitiesSet.size > 0;\n  const haveExclude = excludeDomainsSet.size > 0 || excludeEntitiesSet.size > 0;\n\n  // Case 1 - no includes or excludes - pass all entities\n  if (!haveInclude && !haveExclude) {\n    return () => true;\n  }\n\n  // Case 2 - includes, no excludes - only include specified entities\n  if (haveInclude && !haveExclude) {\n    return (entityId) =>\n      includeEntitiesSet.has(entityId) ||\n      includeDomainsSet.has(computeDomain(entityId));\n  }\n\n  // Case 3 - excludes, no includes - only exclude specified entities\n  if (!haveInclude && haveExclude) {\n    return (entityId) =>\n      !excludeEntitiesSet.has(entityId) &&\n      !excludeDomainsSet.has(computeDomain(entityId));\n  }\n\n  // Case 4 - both includes and excludes specified\n  // Case 4a - include domain specified\n  //  - if domain is included, pass if entity not excluded\n  //  - if domain is not included, pass if entity is included\n  // note: if both include and exclude domains specified,\n  //   the exclude domains are ignored\n  if (includeDomainsSet.size) {\n    return (entityId) =>\n      includeDomainsSet.has(computeDomain(entityId))\n        ? !excludeEntitiesSet.has(entityId)\n        : includeEntitiesSet.has(entityId);\n  }\n\n  // Case 4b - exclude domain specified\n  //  - if domain is excluded, pass if entity is included\n  //  - if domain is not excluded, pass if entity not excluded\n  if (excludeDomainsSet.size) {\n    return (entityId) =>\n      excludeDomainsSet.has(computeDomain(entityId))\n        ? includeEntitiesSet.has(entityId)\n        : !excludeEntitiesSet.has(entityId);\n  }\n\n  // Case 4c - neither include or exclude domain specified\n  //  - Only pass if entity is included.  Ignore entity excludes.\n  return (entityId) => includeEntitiesSet.has(entityId);\n};\n","import { fireEvent } from \"../../common/dom/fire_event\";\n\nexport interface HaDomainTogglerDialogParams {\n  domains: string[];\n  toggleDomain: (domain: string, turnOn: boolean) => void;\n}\n\nexport const loadDomainTogglerDialog = () =>\n  import(/* webpackChunkName: \"dialog-domain-toggler\" */ \"./dialog-domain-toggler\");\n\nexport const showDomainTogglerDialog = (\n  element: HTMLElement,\n  dialogParams: HaDomainTogglerDialogParams\n): void => {\n  fireEvent(element, \"show-dialog\", {\n    dialogTag: \"dialog-domain-toggler\",\n    dialogImport: loadDomainTogglerDialog,\n    dialogParams,\n  });\n};\n","import {\n  LitElement,\n  TemplateResult,\n  html,\n  CSSResult,\n  css,\n  customElement,\n  property,\n} from \"lit-element\";\nimport memoizeOne from \"memoize-one\";\nimport \"@polymer/paper-icon-button\";\n\nimport \"../../../../layouts/hass-subpage\";\nimport \"../../../../layouts/hass-loading-screen\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/entity/state-info\";\nimport \"../../../../components/ha-switch\";\n\nimport { HomeAssistant } from \"../../../../types\";\nimport {\n  CloudStatusLoggedIn,\n  CloudPreferences,\n  updateCloudGoogleEntityConfig,\n  cloudSyncGoogleAssistant,\n  GoogleEntityConfig,\n} from \"../../../../data/cloud\";\nimport {\n  generateFilter,\n  isEmptyFilter,\n  EntityFilter,\n} from \"../../../../common/entity/entity_filter\";\nimport { compare } from \"../../../../common/string/compare\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { showToast } from \"../../../../util/toast\";\nimport { showDomainTogglerDialog } from \"../../../../dialogs/domain-toggler/show-dialog-domain-toggler\";\nimport {\n  GoogleEntity,\n  fetchCloudGoogleEntities,\n} from \"../../../../data/google_assistant\";\n// tslint:disable-next-line: no-duplicate-imports\nimport { HaSwitch } from \"../../../../components/ha-switch\";\n\nimport { computeStateName } from \"../../../../common/entity/compute_state_name\";\nimport { computeDomain } from \"../../../../common/entity/compute_domain\";\n\nconst DEFAULT_CONFIG_EXPOSE = true;\n\nconst configIsExposed = (config: GoogleEntityConfig) =>\n  config.should_expose === undefined\n    ? DEFAULT_CONFIG_EXPOSE\n    : config.should_expose;\n\n@customElement(\"cloud-google-assistant\")\nclass CloudGoogleAssistant extends LitElement {\n  @property() public hass!: HomeAssistant;\n  @property() public cloudStatus!: CloudStatusLoggedIn;\n  @property() public narrow!: boolean;\n  @property() private _entities?: GoogleEntity[];\n  @property()\n  private _entityConfigs: CloudPreferences[\"google_entity_configs\"] = {};\n  private _popstateSyncAttached = false;\n  private _popstateReloadStatusAttached = false;\n  private _isInitialExposed?: Set<string>;\n\n  private _getEntityFilterFunc = memoizeOne((filter: EntityFilter) =>\n    generateFilter(\n      filter.include_domains,\n      filter.include_entities,\n      filter.exclude_domains,\n      filter.exclude_entities\n    )\n  );\n\n  protected render(): TemplateResult | void {\n    if (this._entities === undefined) {\n      return html`\n        <hass-loading-screen></hass-loading-screen>\n      `;\n    }\n    const emptyFilter = isEmptyFilter(this.cloudStatus.google_entities);\n    const filterFunc = this._getEntityFilterFunc(\n      this.cloudStatus.google_entities\n    );\n\n    // We will only generate `isInitialExposed` during first render.\n    // On each subsequent render we will use the same set so that cards\n    // will not jump around when we change the exposed setting.\n    const showInExposed = this._isInitialExposed || new Set();\n    const trackExposed = this._isInitialExposed === undefined;\n\n    let selected = 0;\n\n    // On first render we decide which cards show in which category.\n    // That way cards won't jump around when changing values.\n    const exposedCards: TemplateResult[] = [];\n    const notExposedCards: TemplateResult[] = [];\n\n    this._entities.forEach((entity) => {\n      const stateObj = this.hass.states[entity.entity_id];\n      const config = this._entityConfigs[entity.entity_id] || {};\n      const isExposed = emptyFilter\n        ? configIsExposed(config)\n        : filterFunc(entity.entity_id);\n      if (isExposed) {\n        selected++;\n\n        if (trackExposed) {\n          showInExposed.add(entity.entity_id);\n        }\n      }\n\n      const target = showInExposed.has(entity.entity_id)\n        ? exposedCards\n        : notExposedCards;\n\n      target.push(html`\n        <ha-card>\n          <div class=\"card-content\">\n            <state-info\n              .hass=${this.hass}\n              .stateObj=${stateObj}\n              secondary-line\n              @click=${this._showMoreInfo}\n            >\n              ${entity.traits\n                .map((trait) => trait.substr(trait.lastIndexOf(\".\") + 1))\n                .join(\", \")}\n            </state-info>\n            <ha-switch\n              .entityId=${entity.entity_id}\n              .disabled=${!emptyFilter}\n              .checked=${isExposed}\n              @change=${this._exposeChanged}\n            >\n              ${this.hass!.localize(\"ui.panel.config.cloud.google.expose\")}\n            </ha-switch>\n            ${entity.might_2fa\n              ? html`\n                  <ha-switch\n                    .entityId=${entity.entity_id}\n                    .checked=${Boolean(config.disable_2fa)}\n                    @change=${this._disable2FAChanged}\n                  >\n                    ${this.hass!.localize(\n                      \"ui.panel.config.cloud.google.disable_2FA\"\n                    )}\n                  </ha-switch>\n                `\n              : \"\"}\n          </div>\n        </ha-card>\n      `);\n    });\n\n    if (trackExposed) {\n      this._isInitialExposed = showInExposed;\n    }\n\n    return html`\n      <hass-subpage header=\"${this.hass!.localize(\n        \"ui.panel.config.cloud.google.title\"\n      )}\">\n        <span slot=\"toolbar-icon\">\n          ${selected}${\n      !this.narrow\n        ? html`\n            selected\n          `\n        : \"\"\n    }\n        </span>\n        ${\n          emptyFilter\n            ? html`\n                <paper-icon-button\n                  slot=\"toolbar-icon\"\n                  icon=\"hass:tune\"\n                  @click=${this._openDomainToggler}\n                ></paper-icon-button>\n              `\n            : \"\"\n        }\n        ${\n          !emptyFilter\n            ? html`\n                <div class=\"banner\">\n                  ${this.hass!.localize(\"ui.panel.config.cloud.google.banner\")}\n                </div>\n              `\n            : \"\"\n        }\n          ${\n            exposedCards.length > 0\n              ? html`\n                  <h1>\n                    ${this.hass!.localize(\n                      \"ui.panel.config.cloud.google.exposed_entities\"\n                    )}\n                  </h1>\n                  <div class=\"content\">${exposedCards}</div>\n                `\n              : \"\"\n          }\n          ${\n            notExposedCards.length > 0\n              ? html`\n                  <h1>\n                    ${this.hass!.localize(\n                      \"ui.panel.config.cloud.google.not_exposed_entities\"\n                    )}\n                  </h1>\n                  <div class=\"content\">${notExposedCards}</div>\n                `\n              : \"\"\n          }\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    this._fetchData();\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n    if (changedProps.has(\"cloudStatus\")) {\n      this._entityConfigs = this.cloudStatus.prefs.google_entity_configs;\n    }\n  }\n\n  private async _fetchData() {\n    const entities = await fetchCloudGoogleEntities(this.hass);\n    entities.sort((a, b) => {\n      const stateA = this.hass.states[a.entity_id];\n      const stateB = this.hass.states[b.entity_id];\n      return compare(\n        stateA ? computeStateName(stateA) : a.entity_id,\n        stateB ? computeStateName(stateB) : b.entity_id\n      );\n    });\n    this._entities = entities;\n  }\n\n  private _showMoreInfo(ev) {\n    const entityId = ev.currentTarget.stateObj.entity_id;\n    fireEvent(this, \"hass-more-info\", { entityId });\n  }\n\n  private async _exposeChanged(ev: Event) {\n    const entityId = (ev.currentTarget as any).entityId;\n    const newExposed = (ev.target as HaSwitch).checked;\n    await this._updateExposed(entityId, newExposed);\n  }\n\n  private async _updateExposed(entityId: string, newExposed: boolean) {\n    const curExposed = configIsExposed(this._entityConfigs[entityId] || {});\n    if (newExposed === curExposed) {\n      return;\n    }\n    await this._updateConfig(entityId, {\n      should_expose: newExposed,\n    });\n    this._ensureEntitySync();\n  }\n\n  private async _disable2FAChanged(ev: Event) {\n    const entityId = (ev.currentTarget as any).entityId;\n    const newDisable2FA = (ev.target as HaSwitch).checked;\n    const curDisable2FA = Boolean(\n      (this._entityConfigs[entityId] || {}).disable_2fa\n    );\n    if (newDisable2FA === curDisable2FA) {\n      return;\n    }\n    await this._updateConfig(entityId, {\n      disable_2fa: newDisable2FA,\n    });\n  }\n\n  private async _updateConfig(entityId: string, values: GoogleEntityConfig) {\n    const updatedConfig = await updateCloudGoogleEntityConfig(\n      this.hass,\n      entityId,\n      values\n    );\n    this._entityConfigs = {\n      ...this._entityConfigs,\n      [entityId]: updatedConfig,\n    };\n    this._ensureStatusReload();\n  }\n\n  private _openDomainToggler() {\n    showDomainTogglerDialog(this, {\n      domains: this._entities!.map((entity) =>\n        computeDomain(entity.entity_id)\n      ).filter((value, idx, self) => self.indexOf(value) === idx),\n      toggleDomain: (domain, turnOn) => {\n        this._entities!.forEach((entity) => {\n          if (computeDomain(entity.entity_id) === domain) {\n            this._updateExposed(entity.entity_id, turnOn);\n          }\n        });\n      },\n    });\n  }\n\n  private _ensureStatusReload() {\n    if (this._popstateReloadStatusAttached) {\n      return;\n    }\n    this._popstateReloadStatusAttached = true;\n    // Cache parent because by the time popstate happens,\n    // this element is detached\n    const parent = this.parentElement!;\n    window.addEventListener(\n      \"popstate\",\n      () => fireEvent(parent, \"ha-refresh-cloud-status\"),\n      { once: true }\n    );\n  }\n\n  private _ensureEntitySync() {\n    if (this._popstateSyncAttached) {\n      return;\n    }\n    this._popstateSyncAttached = true;\n    // Cache parent because by the time popstate happens,\n    // this element is detached\n    const parent = this.parentElement!;\n    window.addEventListener(\n      \"popstate\",\n      () => {\n        showToast(parent, {\n          message: this.hass!.localize(\n            \"ui.panel.config.cloud.google.sync_to_google\"\n          ),\n        });\n        cloudSyncGoogleAssistant(this.hass);\n      },\n      { once: true }\n    );\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      .banner {\n        color: var(--primary-text-color);\n        background-color: var(\n          --ha-card-background,\n          var(--paper-card-background-color, white)\n        );\n        padding: 16px 8px;\n        text-align: center;\n      }\n      h1 {\n        color: var(--primary-text-color);\n        font-size: 24px;\n        letter-spacing: -0.012em;\n        margin-bottom: 0;\n        padding: 0 8px;\n      }\n      .content {\n        display: flex;\n        flex-wrap: wrap;\n        padding: 4px;\n      }\n      ha-card {\n        margin: 4px;\n        width: 100%;\n        max-width: 300px;\n      }\n      .card-content {\n        padding-bottom: 12px;\n      }\n      state-info {\n        cursor: pointer;\n      }\n      ha-switch {\n        padding: 8px 0;\n      }\n\n      @media all and (max-width: 450px) {\n        ha-card {\n          max-width: 100%;\n        }\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"cloud-google-assistant\": CloudGoogleAssistant;\n  }\n}\n","import { HomeAssistant } from \"../types\";\n\nexport interface GoogleEntity {\n  entity_id: string;\n  traits: string[];\n  might_2fa: boolean;\n}\n\nexport const fetchCloudGoogleEntities = (hass: HomeAssistant) =>\n  hass.callWS<GoogleEntity[]>({ type: \"cloud/google_assistant/entities\" });\n"],"sourceRoot":""}