# coding: utf-8

"""
    Oliver API

    Oliver API in the cloud service  # noqa: E501

    OpenAPI spec version: 3.6.0
    Contact: api@behavioralsignals.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""





import unittest
import os
import urllib.request, urllib.parse, urllib.error
import time


import behavioral_signals_swagger_client
from behavioral_signals_swagger_client.api.default_api import DefaultApi  # noqa: E501
from behavioral_signals_swagger_client.rest import ApiException


class TestDefaultApi(unittest.TestCase):
    """DefaultApi unit test stubs"""

    def setUp(self):
        token = os.environ.get('BEST_TOKEN', None)
        api_url = os.environ.get('BEST_API', None)
        self.assertIsNot(token, None, "You will need to set the environment variable BEST_TOKEN for testing")
        self.assertIsNot(api_url, None, "You will need to set the environment variable BEST_API for testing")
        self.api = behavioral_signals_swagger_client.api.default_api.DefaultApi()  # noqa: E501
        self.api.api_client.configuration.host = api_url
        self.api.api_client.configuration.api_key['X-Auth-Token'] = token
        self.cid = 5

    def tearDown(self):
        pass

    def test_wav_2ch_dataset_noasr(self):
        num_of_files=2
        channels=2
        calldirection=1
        pids = []
        filelist = urllib.request.urlopen("http://data.bsis.me/data-stereo/filelist.txt").read()
        filelist = filelist.decode('utf8').split("\n")
        for i in range(num_of_files):
            url = 'http://data.bsis.me/data-stereo/wav_2ch/'+filelist[i]+'.wav'
            proc = self.api.send_process_url(self.cid, url, channels, calldirection)
            print(proc)
            self.assertTrue(isinstance(proc,behavioral_signals_swagger_client.models.process.Process),
                "API must return a Process object when posting URL requests")
            self.assertEqual(int(proc.cid),self.cid,"Created process must have the"
                +"same client ID used to post the request "+str(proc.cid)+" vs "+str(self.cid))
            self.assertTrue(isinstance(proc.pid,int),"Returned process"
             +"id must be integer")
            self.assertTrue(proc.pid>0,"Returned process id must be > 0")
            pids.append(proc.pid)
        print("Finished posting requests. Will poll for completion now...")
        completed_pids=[]
        for pid in pids:
            proc=self.api.get_process_info(self.cid,pid)
            self.assertTrue(isinstance(proc,behavioral_signals_swagger_client.models.process.Process),
                "API must return a Process object on get process info call")
            self.assertEqual(int(proc.cid),self.cid,"Created process must have the"
                +"same client ID used to post the request "+str(proc.cid)+" vs "+str(self.cid))
            self.assertTrue(isinstance(proc.pid,int),"Returned process"
             +"id must be integer")
            self.assertTrue((proc.pid==pid),"Returned process id must match the query")
            while proc.status != 2 and proc.status !=-2:
                time.sleep(5)
                proc=self.api.get_process_info(self.cid,pid)
            if proc.status == 2:
                completed_pids.append(pid)
            else:
                print("Pid {} was aborted with message: {}".format(pid,proc.statusmsg))
        self.assertTrue((len(pids)-len(completed_pids))/len(pids)<0.05,"At least 95% "+
                   "of the submitted Pids must complete to continue")
        print("Will try to get the results now")
        for pid in completed_pids:
            res=self.api.get_process_results(self.cid,pid)
            self.assertTrue(isinstance(res,behavioral_signals_swagger_client.models.
                    result_json.ResultJSON),"API must return ResultJSON objects"+
                      " when the get process results method is called")
            res=self.api.get_process_results_frames(self.cid,pid)
            self.assertTrue(isinstance(res,behavioral_signals_swagger_client.models.
                    result_json_frames.ResultJSONFrames),"API must return ResultJSONFrames objects"+
                      " when the get process results frames method is called")
        print("Test test_wav_2ch_dataset has been completed successfully")

    def test_wav_2ch_dataset(self):
        num_of_files=2
        channels=2
        calldirection=1
        pids = []
        filelist = urllib.request.urlopen("http://data.bsis.me/data-stereo/filelist.txt").read()
        filelist = filelist.decode('utf8').split("\n")
        for i in range(num_of_files):
            url = 'http://data.bsis.me/data-stereo/wav_2ch/'+filelist[i]+'.wav'
            proc = self.api.send_process_url(self.cid, url, channels, calldirection)
            print(proc)
            self.assertTrue(isinstance(proc,behavioral_signals_swagger_client.models.process.Process),
                "API must return a Process object when posting URL requests")
            self.assertEqual(int(proc.cid),self.cid,"Created process must have the"
                +"same client ID used to post the request "+str(proc.cid)+" vs "+str(self.cid))
            self.assertTrue(isinstance(proc.pid,int),"Returned process"
             +"id must be integer")
            self.assertTrue(proc.pid>0,"Returned process id must be > 0")
            pids.append(proc.pid)
        print("Finished posting requests. Will poll for completion now...")
        completed_pids=[]
        for pid in pids:
            proc=self.api.get_process_info(self.cid,pid)
            self.assertTrue(isinstance(proc,behavioral_signals_swagger_client.models.process.Process),
                "API must return a Process object on get process info call")
            self.assertEqual(int(proc.cid),self.cid,"Created process must have the"
                +"same client ID used to post the request "+str(proc.cid)+" vs "+str(self.cid))
            self.assertTrue(isinstance(proc.pid,int),"Returned process"
             +"id must be integer")
            self.assertTrue((proc.pid==pid),"Returned process id must match the query")
            while proc.status != 2 and proc.status !=-2:
                time.sleep(5)
                proc=self.api.get_process_info(self.cid,pid)
            if proc.status == 2:
                completed_pids.append(pid)
            else:
                print("Pid {} was aborted with message: {}".format(pid,proc.statusmsg))
        self.assertTrue((len(pids)-len(completed_pids))/len(pids)<0.05,"At least 95% "+
                   "of the submitted Pids must complete to continue")
        print("Will try to get the results now")
        for pid in completed_pids:
            res=self.api.get_process_results(self.cid,pid)
            self.assertTrue(isinstance(res,behavioral_signals_swagger_client.models.
                    result_json.ResultJSON),"API must return ResultJSON objects"+
                      " when the get process results method is called")
            res=self.api.get_process_results_frames(self.cid,pid)
            self.assertTrue(isinstance(res,behavioral_signals_swagger_client.models.
                    result_json_frames.ResultJSONFrames),"API must return ResultJSONFrames objects"+
                      " when the get process results frames method is called")
            res=self.api.get_process_results_asr(self.cid,pid)
            self.assertTrue(isinstance(res,behavioral_signals_swagger_client.models.
                    result_jsonasr.ResultJSONASR),"API must return ResultJSONASR objects"+
                      " when the get process results asr method is called")
        print("Test test_wav_2ch_dataset has been completed successfully")



    def test_get_process_info(self):
        """Test case for get_process_info

        """
        pass

    def test_get_process_results(self):
        """Test case for get_process_results

        """
        pass

    def test_get_process_results_asr(self):
        """Test case for get_process_results_asr

        """
        pass

    def test_get_process_results_demo(self):
        """Test case for get_process_results_demo

        """
        pass

    def test_get_process_results_frames(self):
        """Test case for get_process_results_frames

        """
        pass

    def test_get_process_stats(self):
        """Test case for get_process_stats

        """
        pass

    def test_info_client(self):
        """Test case for info_client

        """
        pass

    def test_modify_token(self):
        """Test case for modify_token

        """
        pass

    def test_post_feedback(self):
        """Test case for post_feedback

        """
        pass

    def test_put_feedback(self):
        """Test case for put_feedback

        """
        pass

    def test_send_process_audio(self):
        """Test case for send_process_audio

        """
        pass

    def test_send_process_tcp(self):
        """Test case for send_process_tcp

        """
        pass

    def test_send_process_url(self):
        """Test case for send_process_url

        """
        pass

    def test_send_process_video(self):
        """Test case for send_process_video

        """
        pass

    def test_service_status(self):
        """Test case for service_status

        """
        status = self.api.service_status()
        print(repr(status))
        self.assertTrue(isinstance(status,behavioral_signals_swagger_client.models.status.Status)
                   ,"Response of the service status endpoint is not of expected class")
        self.assertEqual(status.response, 200, "Remote default API status is not 200. Will not accept requests")

    def test_update_process(self):
        """Test case for update_process

        """
        pass


if __name__ == '__main__':
    unittest.main()
