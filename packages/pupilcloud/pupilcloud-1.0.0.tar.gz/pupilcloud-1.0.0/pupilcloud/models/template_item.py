# coding: utf-8

"""
    Pupil Cloud

    Pupil Cloud API  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pupilcloud.configuration import Configuration


class TemplateItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'choices': 'list[str]',
        'help_text': 'str',
        'id': 'str',
        'input_type': 'str',
        'required': 'bool',
        'title': 'str',
        'widget_type': 'str'
    }

    attribute_map = {
        'choices': 'choices',
        'help_text': 'help_text',
        'id': 'id',
        'input_type': 'input_type',
        'required': 'required',
        'title': 'title',
        'widget_type': 'widget_type'
    }

    def __init__(self, choices=None, help_text=None, id=None, input_type='any', required=None, title=None, widget_type=None, local_vars_configuration=None):  # noqa: E501
        """TemplateItem - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._choices = None
        self._help_text = None
        self._id = None
        self._input_type = None
        self._required = None
        self._title = None
        self._widget_type = None
        self.discriminator = None

        if choices is not None:
            self.choices = choices
        if help_text is not None:
            self.help_text = help_text
        if id is not None:
            self.id = id
        if input_type is not None:
            self.input_type = input_type
        if required is not None:
            self.required = required
        if title is not None:
            self.title = title
        self.widget_type = widget_type

    @property
    def choices(self):
        """Gets the choices of this TemplateItem.  # noqa: E501


        :return: The choices of this TemplateItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._choices

    @choices.setter
    def choices(self, choices):
        """Sets the choices of this TemplateItem.


        :param choices: The choices of this TemplateItem.  # noqa: E501
        :type: list[str]
        """

        self._choices = choices

    @property
    def help_text(self):
        """Gets the help_text of this TemplateItem.  # noqa: E501

        short optional help text for the item  # noqa: E501

        :return: The help_text of this TemplateItem.  # noqa: E501
        :rtype: str
        """
        return self._help_text

    @help_text.setter
    def help_text(self, help_text):
        """Sets the help_text of this TemplateItem.

        short optional help text for the item  # noqa: E501

        :param help_text: The help_text of this TemplateItem.  # noqa: E501
        :type: str
        """

        self._help_text = help_text

    @property
    def id(self):
        """Gets the id of this TemplateItem.  # noqa: E501


        :return: The id of this TemplateItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TemplateItem.


        :param id: The id of this TemplateItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def input_type(self):
        """Gets the input_type of this TemplateItem.  # noqa: E501

        the basic type of the value for this item's input  # noqa: E501

        :return: The input_type of this TemplateItem.  # noqa: E501
        :rtype: str
        """
        return self._input_type

    @input_type.setter
    def input_type(self, input_type):
        """Sets the input_type of this TemplateItem.

        the basic type of the value for this item's input  # noqa: E501

        :param input_type: The input_type of this TemplateItem.  # noqa: E501
        :type: str
        """
        allowed_values = ["any", "integer", "float"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and input_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `input_type` ({0}), must be one of {1}"  # noqa: E501
                .format(input_type, allowed_values)
            )

        self._input_type = input_type

    @property
    def required(self):
        """Gets the required of this TemplateItem.  # noqa: E501

        if value is required  # noqa: E501

        :return: The required of this TemplateItem.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this TemplateItem.

        if value is required  # noqa: E501

        :param required: The required of this TemplateItem.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def title(self):
        """Gets the title of this TemplateItem.  # noqa: E501

        title of item  # noqa: E501

        :return: The title of this TemplateItem.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this TemplateItem.

        title of item  # noqa: E501

        :param title: The title of this TemplateItem.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def widget_type(self):
        """Gets the widget_type of this TemplateItem.  # noqa: E501

        widget to use for this item  # noqa: E501

        :return: The widget_type of this TemplateItem.  # noqa: E501
        :rtype: str
        """
        return self._widget_type

    @widget_type.setter
    def widget_type(self, widget_type):
        """Sets the widget_type of this TemplateItem.

        widget to use for this item  # noqa: E501

        :param widget_type: The widget_type of this TemplateItem.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and widget_type is None:  # noqa: E501
            raise ValueError("Invalid value for `widget_type`, must not be `None`")  # noqa: E501
        allowed_values = ["TEXT", "PARAGRAPH", "RADIO_LIST", "CHECKBOX_LIST", "SECTION_HEADER", "PAGE_BREAK"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and widget_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `widget_type` ({0}), must be one of {1}"  # noqa: E501
                .format(widget_type, allowed_values)
            )

        self._widget_type = widget_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TemplateItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TemplateItem):
            return True

        return self.to_dict() != other.to_dict()
