# coding: utf-8

"""
    Pupil Cloud

    Pupil Cloud API  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pupilcloud.configuration import Configuration


class User(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'default_template_id': 'str',
        'email': 'str',
        'email_verified': 'bool',
        'id': 'str',
        'name': 'str',
        'photo_url': 'str',
        'provider': 'str',
        'uid': 'str'
    }

    attribute_map = {
        'default_template_id': 'default_template_id',
        'email': 'email',
        'email_verified': 'email_verified',
        'id': 'id',
        'name': 'name',
        'photo_url': 'photo_url',
        'provider': 'provider',
        'uid': 'uid'
    }

    def __init__(self, default_template_id=None, email=None, email_verified=None, id=None, name=None, photo_url=None, provider=None, uid=None, local_vars_configuration=None):  # noqa: E501
        """User - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._default_template_id = None
        self._email = None
        self._email_verified = None
        self._id = None
        self._name = None
        self._photo_url = None
        self._provider = None
        self._uid = None
        self.discriminator = None

        if default_template_id is not None:
            self.default_template_id = default_template_id
        if email is not None:
            self.email = email
        if email_verified is not None:
            self.email_verified = email_verified
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if photo_url is not None:
            self.photo_url = photo_url
        if provider is not None:
            self.provider = provider
        if uid is not None:
            self.uid = uid

    @property
    def default_template_id(self):
        """Gets the default_template_id of this User.  # noqa: E501


        :return: The default_template_id of this User.  # noqa: E501
        :rtype: str
        """
        return self._default_template_id

    @default_template_id.setter
    def default_template_id(self, default_template_id):
        """Sets the default_template_id of this User.


        :param default_template_id: The default_template_id of this User.  # noqa: E501
        :type: str
        """

        self._default_template_id = default_template_id

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501


        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def email_verified(self):
        """Gets the email_verified of this User.  # noqa: E501


        :return: The email_verified of this User.  # noqa: E501
        :rtype: bool
        """
        return self._email_verified

    @email_verified.setter
    def email_verified(self, email_verified):
        """Sets the email_verified of this User.


        :param email_verified: The email_verified of this User.  # noqa: E501
        :type: bool
        """

        self._email_verified = email_verified

    @property
    def id(self):
        """Gets the id of this User.  # noqa: E501


        :return: The id of this User.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this User.  # noqa: E501


        :return: The name of this User.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.


        :param name: The name of this User.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def photo_url(self):
        """Gets the photo_url of this User.  # noqa: E501


        :return: The photo_url of this User.  # noqa: E501
        :rtype: str
        """
        return self._photo_url

    @photo_url.setter
    def photo_url(self, photo_url):
        """Sets the photo_url of this User.


        :param photo_url: The photo_url of this User.  # noqa: E501
        :type: str
        """

        self._photo_url = photo_url

    @property
    def provider(self):
        """Gets the provider of this User.  # noqa: E501


        :return: The provider of this User.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this User.


        :param provider: The provider of this User.  # noqa: E501
        :type: str
        """

        self._provider = provider

    @property
    def uid(self):
        """Gets the uid of this User.  # noqa: E501


        :return: The uid of this User.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this User.


        :param uid: The uid of this User.  # noqa: E501
        :type: str
        """

        self._uid = uid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, User):
            return True

        return self.to_dict() != other.to_dict()
