# coding: utf-8

"""
    Pupil Cloud

    Pupil Cloud API  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pupilcloud.configuration import Configuration


class RecordingFile(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_id': 'str',
        'created_at': 'datetime',
        'download_url': 'str',
        'id': 'str',
        'mimetype': 'str',
        'name': 'str',
        'recording_id': 'str',
        'size_bytes': 'int',
        'started_at': 'datetime',
        'upload_url': 'str',
        'uploaded_bytes': 'int'
    }

    attribute_map = {
        'account_id': 'account_id',
        'created_at': 'created_at',
        'download_url': 'download_url',
        'id': 'id',
        'mimetype': 'mimetype',
        'name': 'name',
        'recording_id': 'recording_id',
        'size_bytes': 'size_bytes',
        'started_at': 'started_at',
        'upload_url': 'upload_url',
        'uploaded_bytes': 'uploaded_bytes'
    }

    def __init__(self, account_id=None, created_at=None, download_url=None, id=None, mimetype=None, name=None, recording_id=None, size_bytes=None, started_at=None, upload_url=None, uploaded_bytes=None, local_vars_configuration=None):  # noqa: E501
        """RecordingFile - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account_id = None
        self._created_at = None
        self._download_url = None
        self._id = None
        self._mimetype = None
        self._name = None
        self._recording_id = None
        self._size_bytes = None
        self._started_at = None
        self._upload_url = None
        self._uploaded_bytes = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if created_at is not None:
            self.created_at = created_at
        if download_url is not None:
            self.download_url = download_url
        if id is not None:
            self.id = id
        if mimetype is not None:
            self.mimetype = mimetype
        if name is not None:
            self.name = name
        if recording_id is not None:
            self.recording_id = recording_id
        if size_bytes is not None:
            self.size_bytes = size_bytes
        if started_at is not None:
            self.started_at = started_at
        if upload_url is not None:
            self.upload_url = upload_url
        if uploaded_bytes is not None:
            self.uploaded_bytes = uploaded_bytes

    @property
    def account_id(self):
        """Gets the account_id of this RecordingFile.  # noqa: E501


        :return: The account_id of this RecordingFile.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this RecordingFile.


        :param account_id: The account_id of this RecordingFile.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def created_at(self):
        """Gets the created_at of this RecordingFile.  # noqa: E501


        :return: The created_at of this RecordingFile.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this RecordingFile.


        :param created_at: The created_at of this RecordingFile.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def download_url(self):
        """Gets the download_url of this RecordingFile.  # noqa: E501


        :return: The download_url of this RecordingFile.  # noqa: E501
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this RecordingFile.


        :param download_url: The download_url of this RecordingFile.  # noqa: E501
        :type: str
        """

        self._download_url = download_url

    @property
    def id(self):
        """Gets the id of this RecordingFile.  # noqa: E501


        :return: The id of this RecordingFile.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RecordingFile.


        :param id: The id of this RecordingFile.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def mimetype(self):
        """Gets the mimetype of this RecordingFile.  # noqa: E501


        :return: The mimetype of this RecordingFile.  # noqa: E501
        :rtype: str
        """
        return self._mimetype

    @mimetype.setter
    def mimetype(self, mimetype):
        """Sets the mimetype of this RecordingFile.


        :param mimetype: The mimetype of this RecordingFile.  # noqa: E501
        :type: str
        """

        self._mimetype = mimetype

    @property
    def name(self):
        """Gets the name of this RecordingFile.  # noqa: E501


        :return: The name of this RecordingFile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RecordingFile.


        :param name: The name of this RecordingFile.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def recording_id(self):
        """Gets the recording_id of this RecordingFile.  # noqa: E501


        :return: The recording_id of this RecordingFile.  # noqa: E501
        :rtype: str
        """
        return self._recording_id

    @recording_id.setter
    def recording_id(self, recording_id):
        """Sets the recording_id of this RecordingFile.


        :param recording_id: The recording_id of this RecordingFile.  # noqa: E501
        :type: str
        """

        self._recording_id = recording_id

    @property
    def size_bytes(self):
        """Gets the size_bytes of this RecordingFile.  # noqa: E501


        :return: The size_bytes of this RecordingFile.  # noqa: E501
        :rtype: int
        """
        return self._size_bytes

    @size_bytes.setter
    def size_bytes(self, size_bytes):
        """Sets the size_bytes of this RecordingFile.


        :param size_bytes: The size_bytes of this RecordingFile.  # noqa: E501
        :type: int
        """

        self._size_bytes = size_bytes

    @property
    def started_at(self):
        """Gets the started_at of this RecordingFile.  # noqa: E501


        :return: The started_at of this RecordingFile.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this RecordingFile.


        :param started_at: The started_at of this RecordingFile.  # noqa: E501
        :type: datetime
        """

        self._started_at = started_at

    @property
    def upload_url(self):
        """Gets the upload_url of this RecordingFile.  # noqa: E501


        :return: The upload_url of this RecordingFile.  # noqa: E501
        :rtype: str
        """
        return self._upload_url

    @upload_url.setter
    def upload_url(self, upload_url):
        """Sets the upload_url of this RecordingFile.


        :param upload_url: The upload_url of this RecordingFile.  # noqa: E501
        :type: str
        """

        self._upload_url = upload_url

    @property
    def uploaded_bytes(self):
        """Gets the uploaded_bytes of this RecordingFile.  # noqa: E501


        :return: The uploaded_bytes of this RecordingFile.  # noqa: E501
        :rtype: int
        """
        return self._uploaded_bytes

    @uploaded_bytes.setter
    def uploaded_bytes(self, uploaded_bytes):
        """Sets the uploaded_bytes of this RecordingFile.


        :param uploaded_bytes: The uploaded_bytes of this RecordingFile.  # noqa: E501
        :type: int
        """

        self._uploaded_bytes = uploaded_bytes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecordingFile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RecordingFile):
            return True

        return self.to_dict() != other.to_dict()
