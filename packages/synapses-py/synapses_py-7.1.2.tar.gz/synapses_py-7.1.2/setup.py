# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['synapses_py',
 'synapses_py.model',
 'synapses_py.model.encoding',
 'synapses_py.model.net_elems']

package_data = \
{'': ['*']}

install_requires = \
['PyFunctional>=1.3.0,<2.0.0', 'dataclasses>=0.7,<0.8', 'toml>=0.9,<0.10']

setup_kwargs = {
    'name': 'synapses-py',
    'version': '7.1.2',
    'description': 'A cross-platform library for Neural Networks',
    'long_description': '# Synapses\n\nA **cross-platform** library for **Neural Networks**.\n\n## Documentation\n\n**https://mrdimosthenis.github.io/Synapses**\n\nThe interface of the library is common across programming languages.\n\n### Create a Neural Network\n\n`NeuralNetwork.init` | param1: `layers` | _returns_\n---                  | ---              | ---\nJavaScript           | `number[]`       | `NeuralNetwork`\nPython               | `List[int]`      | `NeuralNetwork`\nJava                 | `int[]`          | `NeuralNetwork`\nC#                   | `int[]`          | `NeuralNetwork`\nScala                | `List[Int]`      | `NeuralNetwork`\nF#                   | `List<int>`      | `NeuralNetwork`\n\n`NeuralNetwork.customizedInit` | param1: `layers` | param2: `activationF`                 | param3: `weightInitF`    | _returns_\n---                            | ---              | ---                                   | ---                      | ---\nJavaScript                     | `number[]`       | `(number) => ActivationFunction`      | `(number) => number`     | `NeuralNetwork`\nPython                         | `List[int]`      | `Callable[[int], ActivationFunction]` | `Callable[[int], float]` | `NeuralNetwork`\nJava                           | `int[]`          | `IntFunction<ActivationFunction>`     | `IntFunction<Double>`    | `NeuralNetwork`\nC#                             | `int[]`          | `Func<int, ActivationFunction>`       | `Func<int, Double>`      | `NeuralNetwork`\nScala                          | `List[Int]`      | `Int => ActivationFunction`           | `Int => Double`          | `NeuralNetwork`\nF#                             | `List<int>`      | `int -> ActivationFunction`           | `int -> float`           | `NeuralNetwork`\n\n### Use a Neural Network\n\n`NeuralNetwork.fit` | param1: `neuralNetwork` | param2: `learningRate` | param3: `inputValues` | param4: `expectedOutput` | _returns_\n---                 | ---                     | ---                    | ---                   | ---                      | ---\nJavaScript          | `NeuralNetwork`         | `number`               | `number[]`            | `number[]`               | `NeuralNetwork`\nPython              | `NeuralNetwork`         | `float`                | `List[float]`         | `List[float]`            | `NeuralNetwork`\nJava                | `NeuralNetwork`         | `double`               | `double[]`            | `double[]`               | `NeuralNetwork`\nC#                  | `NeuralNetwork`         | `double`               | `double[]`            | `double[]`               | `NeuralNetwork`\nScala               | `NeuralNetwork`         | `Double`               | `List[Double]`        | `List[Double]`           | `NeuralNetwork`\nF#                  | `NeuralNetwork`         | `float`                | `List<float>`         | `List<float>`            | `NeuralNetwork`\n\n`NeuralNetwork.prediction` | param1: `neuralNetwork` | param2: `inputValues` | _returns_\n---                        | ---                     | ---                   | ---\nJavaScript                 | `NeuralNetwork`         | `number[]`            | `number[]`\nPython                     | `NeuralNetwork`         | `List[float]`         | `List[float]`\nJava                       | `NeuralNetwork`         | `double[]`            | `double[]`\nC#                         | `NeuralNetwork`         | `double[]`            | `double[]`\nScala                      | `NeuralNetwork`         | `List[Double]`        | `List[Double]`\nF#                         | `NeuralNetwork`         | `List<float>`         | `List<float>`\n\n### Convert a Neural Network\n\n`NeuralNetwork.toJson` | param1: `neuralNetwork` | _returns_\n---                    | ---                     | ---\nJavaScript             | `NeuralNetwork`         | `string`\nPython                 | `NeuralNetwork`         | `str`\nJava                   | `NeuralNetwork`         | `String`\nC#                     | `NeuralNetwork`         | `string`\nScala                  | `NeuralNetwork`         | `String`\nF#                     | `NeuralNetwork`         | `string`\n\n`NeuralNetwork.ofJson` | param1: `json` | _returns_\n---                    | ---            | ---\nJavaScript             | `string`       | `NeuralNetwork`\nPython                 | `str`          | `NeuralNetwork`\nJava                   | `String`       | `NeuralNetwork`\nC#                     | `string`       | `NeuralNetwork`\nScala                  | `String`       | `NeuralNetwork`\nF#                     | `string`       | `NeuralNetwork`\n\n### Create a Data Preprocessor\n\n`DataPreprocessor.init` | param1: `keysWithDiscreteFlags` | param2: `datapoints`                      | _returns_\n---                     | ---                             | ---                                       | ---\nJavaScript              | `any[][]`                       | `iterable`                                | `DataPreprocessor`\nPython                  | `List[Tuple[str, bool]]`        | `Iterable[Dict[str, str]]`                | `DataPreprocessor`\nJava                    | `Object[][]`                    | `Stream<Map<String,String>>`              | `DataPreprocessor`\nC#                      | `(string, bool)[]`              | `IEnumerable<Dictionary<string, string>>` | `DataPreprocessor`\nScala                   | `List[(String, Boolean)]`       | `LazyList[Map[String, String]]`           | `DataPreprocessor`\nF#                      | `List<string * bool>`           | `seq<Map<string, string>>`                | `DataPreprocessor`\n\n### Use a Data Preprocessor\n\n`DataPreprocessor.encodedDatapoint` | param1: `dataPreprocessor` | param2: `datapoint`          | _returns_\n---                                 | ---                        | ---                          | ---\nJavaScript                          | `DataPreprocessor`         | `object`                     | `number[]`\nPython                              | `DataPreprocessor`         | `Dict[str, str]`             | `List[float]`\nJava                                | `DataPreprocessor`         | `Map<String,String>`         | `double[]`\nC#                                  | `DataPreprocessor`         | `Dictionary<string, string>` | `double[]`\nScala                               | `DataPreprocessor`         | `Map[String, String]`        | `List[Double]`\nF#                                  | `DataPreprocessor`         | `Map<string, string>`        | `List<float>`\n\n`DataPreprocessor.decodedDatapoint` | param1: `dataPreprocessor` | param2: `encodedDatapoint` | _returns_\n---                                 | ---                        | ---                        | ---\nJavaScript                          | `DataPreprocessor`         | `number[]`                 | `object`\nPython                              | `DataPreprocessor`         | `List[float]`              | `Dict[str, str]`\nJava                                | `DataPreprocessor`         | `double[]`                 | `Map<String,String>`\nC#                                  | `DataPreprocessor`         | `double[]`                 | `Dictionary<string, string>`\nScala                               | `DataPreprocessor`         | `List[Double]`             | `Map[String, String]`\nF#                                  | `DataPreprocessor`         | `List<float>`              | `Map<string, string>`\n\n### Convert a Data Preprocessor\n\n`DataPreprocessor.toJson` | param1: `dataPreprocessor` | _returns_\n---                       | ---                     | ---\nJavaScript                | `DataPreprocessor`         | `string`\nPython                    | `DataPreprocessor`         | `str`\nJava                      | `DataPreprocessor`         | `String`\nC#                        | `DataPreprocessor`         | `string`\nScala                     | `DataPreprocessor`         | `String`\nF#                        | `DataPreprocessor`         | `string`\n\n`DataPreprocessor.ofJson` | param1: `json` | _returns_\n---                       | ---            | ---\nJavaScript                | `string`       | `DataPreprocessor`\nPython                    | `str`          | `DataPreprocessor`\nJava                      | `String`       | `DataPreprocessor`\nC#                        | `string`       | `DataPreprocessor`\nScala                     | `String`       | `DataPreprocessor`\nF#                        | `string`       | `DataPreprocessor`\n\n### Evaluate\n\n`Statistics.rootMeanSquareError` | param1: `expectedWithOutputValues`       | _returns_\n---                              | ---                                      | ---\nJavaScript                       | `iterable`                               | `number`\nPython                           | `[Tuple[List[float], List[float]]]`      | `float`\nJava                             | `Stream<double[][]>`                     | `double`\nC#                               | `IEnumerable<(double[], double[])>`      | `double`\nScala                            | `LazyList[(List[Double], List[Double])]` | `Double`\nF#                               | `seq<List<float> * List<float>>`         | `float`\n\n## Dependencies\n\n* [circe](https://github.com/circe/circe)\n* [FSharpx.Collections](https://github.com/fsprojects/FSharpx.Collections)\n* [FSharp.SystemTextJson](https://github.com/Tarmil/FSharp.SystemTextJson)\n* [PyFunctional](https://github.com/EntilZha/PyFunctional)\n',
    'author': 'Dimosthenis Michailidis',
    'author_email': 'mrdimosthenis@hotmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://mrdimosthenis.github.io/Synapses',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.6,<3.7',
}


setup(**setup_kwargs)
