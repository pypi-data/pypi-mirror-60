# coding: utf-8

"""
    VeeRoute.LSS Merchandiser

    Программный интерфейс для планирования работ торговых предствителей.  # noqa: E501

    OpenAPI spec version: 1.8.154023
    Contact: support@veeroute.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class TransportLoad(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'count': 'int',
        'mass': 'float',
        'volume': 'float',
        'capacity_x': 'float',
        'capacity_y': 'float',
        'capacity_z': 'float'
    }

    attribute_map = {
        'count': 'count',
        'mass': 'mass',
        'volume': 'volume',
        'capacity_x': 'capacity_x',
        'capacity_y': 'capacity_y',
        'capacity_z': 'capacity_z'
    }

    def __init__(self, count=None, mass=1, volume=1, capacity_x=1, capacity_y=1, capacity_z=1):  # noqa: E501
        """TransportLoad - a model defined in Swagger"""  # noqa: E501
        self._count = None
        self._mass = None
        self._volume = None
        self._capacity_x = None
        self._capacity_y = None
        self._capacity_z = None
        self.discriminator = None
        self.count = count
        self.mass = mass
        self.volume = volume
        if capacity_x is not None:
            self.capacity_x = capacity_x
        if capacity_y is not None:
            self.capacity_y = capacity_y
        if capacity_z is not None:
            self.capacity_z = capacity_z

    @property
    def count(self):
        """Gets the count of this TransportLoad.  # noqa: E501

        Количество заказов  # noqa: E501

        :return: The count of this TransportLoad.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this TransportLoad.

        Количество заказов  # noqa: E501

        :param count: The count of this TransportLoad.  # noqa: E501
        :type: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")  # noqa: E501

        self._count = count

    @property
    def mass(self):
        """Gets the mass of this TransportLoad.  # noqa: E501

        Масса в килограммах  # noqa: E501

        :return: The mass of this TransportLoad.  # noqa: E501
        :rtype: float
        """
        return self._mass

    @mass.setter
    def mass(self, mass):
        """Sets the mass of this TransportLoad.

        Масса в килограммах  # noqa: E501

        :param mass: The mass of this TransportLoad.  # noqa: E501
        :type: float
        """
        if mass is None:
            raise ValueError("Invalid value for `mass`, must not be `None`")  # noqa: E501

        self._mass = mass

    @property
    def volume(self):
        """Gets the volume of this TransportLoad.  # noqa: E501

        Объем в кубических метрах  # noqa: E501

        :return: The volume of this TransportLoad.  # noqa: E501
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this TransportLoad.

        Объем в кубических метрах  # noqa: E501

        :param volume: The volume of this TransportLoad.  # noqa: E501
        :type: float
        """
        if volume is None:
            raise ValueError("Invalid value for `volume`, must not be `None`")  # noqa: E501

        self._volume = volume

    @property
    def capacity_x(self):
        """Gets the capacity_x of this TransportLoad.  # noqa: E501

        Параметр вместимости X в условных единицах  # noqa: E501

        :return: The capacity_x of this TransportLoad.  # noqa: E501
        :rtype: float
        """
        return self._capacity_x

    @capacity_x.setter
    def capacity_x(self, capacity_x):
        """Sets the capacity_x of this TransportLoad.

        Параметр вместимости X в условных единицах  # noqa: E501

        :param capacity_x: The capacity_x of this TransportLoad.  # noqa: E501
        :type: float
        """

        self._capacity_x = capacity_x

    @property
    def capacity_y(self):
        """Gets the capacity_y of this TransportLoad.  # noqa: E501

        Параметр вместимости Y в условных единицах  # noqa: E501

        :return: The capacity_y of this TransportLoad.  # noqa: E501
        :rtype: float
        """
        return self._capacity_y

    @capacity_y.setter
    def capacity_y(self, capacity_y):
        """Sets the capacity_y of this TransportLoad.

        Параметр вместимости Y в условных единицах  # noqa: E501

        :param capacity_y: The capacity_y of this TransportLoad.  # noqa: E501
        :type: float
        """

        self._capacity_y = capacity_y

    @property
    def capacity_z(self):
        """Gets the capacity_z of this TransportLoad.  # noqa: E501

        Параметр вместимости Z в условных единицах  # noqa: E501

        :return: The capacity_z of this TransportLoad.  # noqa: E501
        :rtype: float
        """
        return self._capacity_z

    @capacity_z.setter
    def capacity_z(self, capacity_z):
        """Sets the capacity_z of this TransportLoad.

        Параметр вместимости Z в условных единицах  # noqa: E501

        :param capacity_z: The capacity_z of this TransportLoad.  # noqa: E501
        :type: float
        """

        self._capacity_z = capacity_z

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransportLoad, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransportLoad):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
