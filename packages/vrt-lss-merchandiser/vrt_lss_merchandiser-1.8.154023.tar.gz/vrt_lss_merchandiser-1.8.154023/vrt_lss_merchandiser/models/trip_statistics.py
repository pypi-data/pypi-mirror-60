# coding: utf-8

"""
    VeeRoute.LSS Merchandiser

    Программный интерфейс для планирования работ торговых предствителей.  # noqa: E501

    OpenAPI spec version: 1.8.154023
    Contact: support@veeroute.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class TripStatistics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'trip_key': 'str',
        'trip_time': 'TimeWindow',
        'cost': 'float',
        'reward': 'float',
        'distance': 'int',
        'driving_time': 'int',
        'waiting_time': 'int',
        'working_time': 'int',
        'address_time': 'int',
        'total_time': 'int',
        'orders_count': 'int',
        'performers_count': 'int',
        'total_load': 'TransportLoad',
        'max_load': 'TransportLoad',
        'weight_utilization': 'float',
        'volume_utilization': 'float',
        'capacity_x_utilization': 'float',
        'capacity_y_utilization': 'float',
        'capacity_z_utilization': 'float',
        'stop_statistics': 'list[StopStatistics]'
    }

    attribute_map = {
        'trip_key': 'trip_key',
        'trip_time': 'trip_time',
        'cost': 'cost',
        'reward': 'reward',
        'distance': 'distance',
        'driving_time': 'driving_time',
        'waiting_time': 'waiting_time',
        'working_time': 'working_time',
        'address_time': 'address_time',
        'total_time': 'total_time',
        'orders_count': 'orders_count',
        'performers_count': 'performers_count',
        'total_load': 'total_load',
        'max_load': 'max_load',
        'weight_utilization': 'weight_utilization',
        'volume_utilization': 'volume_utilization',
        'capacity_x_utilization': 'capacity_x_utilization',
        'capacity_y_utilization': 'capacity_y_utilization',
        'capacity_z_utilization': 'capacity_z_utilization',
        'stop_statistics': 'stop_statistics'
    }

    def __init__(self, trip_key=None, trip_time=None, cost=None, reward=None, distance=None, driving_time=None, waiting_time=None, working_time=None, address_time=None, total_time=None, orders_count=None, performers_count=None, total_load=None, max_load=None, weight_utilization=None, volume_utilization=None, capacity_x_utilization=None, capacity_y_utilization=None, capacity_z_utilization=None, stop_statistics=None):  # noqa: E501
        """TripStatistics - a model defined in Swagger"""  # noqa: E501
        self._trip_key = None
        self._trip_time = None
        self._cost = None
        self._reward = None
        self._distance = None
        self._driving_time = None
        self._waiting_time = None
        self._working_time = None
        self._address_time = None
        self._total_time = None
        self._orders_count = None
        self._performers_count = None
        self._total_load = None
        self._max_load = None
        self._weight_utilization = None
        self._volume_utilization = None
        self._capacity_x_utilization = None
        self._capacity_y_utilization = None
        self._capacity_z_utilization = None
        self._stop_statistics = None
        self.discriminator = None
        self.trip_key = trip_key
        self.trip_time = trip_time
        self.cost = cost
        self.reward = reward
        self.distance = distance
        self.driving_time = driving_time
        self.waiting_time = waiting_time
        self.working_time = working_time
        self.address_time = address_time
        self.total_time = total_time
        self.orders_count = orders_count
        self.performers_count = performers_count
        if total_load is not None:
            self.total_load = total_load
        if max_load is not None:
            self.max_load = max_load
        if weight_utilization is not None:
            self.weight_utilization = weight_utilization
        if volume_utilization is not None:
            self.volume_utilization = volume_utilization
        if capacity_x_utilization is not None:
            self.capacity_x_utilization = capacity_x_utilization
        if capacity_y_utilization is not None:
            self.capacity_y_utilization = capacity_y_utilization
        if capacity_z_utilization is not None:
            self.capacity_z_utilization = capacity_z_utilization
        if stop_statistics is not None:
            self.stop_statistics = stop_statistics

    @property
    def trip_key(self):
        """Gets the trip_key of this TripStatistics.  # noqa: E501


        :return: The trip_key of this TripStatistics.  # noqa: E501
        :rtype: str
        """
        return self._trip_key

    @trip_key.setter
    def trip_key(self, trip_key):
        """Sets the trip_key of this TripStatistics.


        :param trip_key: The trip_key of this TripStatistics.  # noqa: E501
        :type: str
        """
        if trip_key is None:
            raise ValueError("Invalid value for `trip_key`, must not be `None`")  # noqa: E501

        self._trip_key = trip_key

    @property
    def trip_time(self):
        """Gets the trip_time of this TripStatistics.  # noqa: E501


        :return: The trip_time of this TripStatistics.  # noqa: E501
        :rtype: TimeWindow
        """
        return self._trip_time

    @trip_time.setter
    def trip_time(self, trip_time):
        """Sets the trip_time of this TripStatistics.


        :param trip_time: The trip_time of this TripStatistics.  # noqa: E501
        :type: TimeWindow
        """
        if trip_time is None:
            raise ValueError("Invalid value for `trip_time`, must not be `None`")  # noqa: E501

        self._trip_time = trip_time

    @property
    def cost(self):
        """Gets the cost of this TripStatistics.  # noqa: E501

        Суммарные затраты  # noqa: E501

        :return: The cost of this TripStatistics.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this TripStatistics.

        Суммарные затраты  # noqa: E501

        :param cost: The cost of this TripStatistics.  # noqa: E501
        :type: float
        """
        if cost is None:
            raise ValueError("Invalid value for `cost`, must not be `None`")  # noqa: E501

        self._cost = cost

    @property
    def reward(self):
        """Gets the reward of this TripStatistics.  # noqa: E501

        Вознаграждения за выполнения заказов суммарно  # noqa: E501

        :return: The reward of this TripStatistics.  # noqa: E501
        :rtype: float
        """
        return self._reward

    @reward.setter
    def reward(self, reward):
        """Sets the reward of this TripStatistics.

        Вознаграждения за выполнения заказов суммарно  # noqa: E501

        :param reward: The reward of this TripStatistics.  # noqa: E501
        :type: float
        """
        if reward is None:
            raise ValueError("Invalid value for `reward`, must not be `None`")  # noqa: E501

        self._reward = reward

    @property
    def distance(self):
        """Gets the distance of this TripStatistics.  # noqa: E501

        Суммарная протяжённость рейса в метрах  # noqa: E501

        :return: The distance of this TripStatistics.  # noqa: E501
        :rtype: int
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this TripStatistics.

        Суммарная протяжённость рейса в метрах  # noqa: E501

        :param distance: The distance of this TripStatistics.  # noqa: E501
        :type: int
        """
        if distance is None:
            raise ValueError("Invalid value for `distance`, must not be `None`")  # noqa: E501

        self._distance = distance

    @property
    def driving_time(self):
        """Gets the driving_time of this TripStatistics.  # noqa: E501

        Сумарное время в пути в минутах  # noqa: E501

        :return: The driving_time of this TripStatistics.  # noqa: E501
        :rtype: int
        """
        return self._driving_time

    @driving_time.setter
    def driving_time(self, driving_time):
        """Sets the driving_time of this TripStatistics.

        Сумарное время в пути в минутах  # noqa: E501

        :param driving_time: The driving_time of this TripStatistics.  # noqa: E501
        :type: int
        """
        if driving_time is None:
            raise ValueError("Invalid value for `driving_time`, must not be `None`")  # noqa: E501

        self._driving_time = driving_time

    @property
    def waiting_time(self):
        """Gets the waiting_time of this TripStatistics.  # noqa: E501

        Суммарная продолжительность простоев на рейсе в минутах  # noqa: E501

        :return: The waiting_time of this TripStatistics.  # noqa: E501
        :rtype: int
        """
        return self._waiting_time

    @waiting_time.setter
    def waiting_time(self, waiting_time):
        """Sets the waiting_time of this TripStatistics.

        Суммарная продолжительность простоев на рейсе в минутах  # noqa: E501

        :param waiting_time: The waiting_time of this TripStatistics.  # noqa: E501
        :type: int
        """
        if waiting_time is None:
            raise ValueError("Invalid value for `waiting_time`, must not be `None`")  # noqa: E501

        self._waiting_time = waiting_time

    @property
    def working_time(self):
        """Gets the working_time of this TripStatistics.  # noqa: E501

        Суммарное время, выполнения работ на всех локациях в минутах  # noqa: E501

        :return: The working_time of this TripStatistics.  # noqa: E501
        :rtype: int
        """
        return self._working_time

    @working_time.setter
    def working_time(self, working_time):
        """Sets the working_time of this TripStatistics.

        Суммарное время, выполнения работ на всех локациях в минутах  # noqa: E501

        :param working_time: The working_time of this TripStatistics.  # noqa: E501
        :type: int
        """
        if working_time is None:
            raise ValueError("Invalid value for `working_time`, must not be `None`")  # noqa: E501

        self._working_time = working_time

    @property
    def address_time(self):
        """Gets the address_time of this TripStatistics.  # noqa: E501

        Суммарное время, проведенное на всех локациях без учета времени подьезда/отьезда в минутах  # noqa: E501

        :return: The address_time of this TripStatistics.  # noqa: E501
        :rtype: int
        """
        return self._address_time

    @address_time.setter
    def address_time(self, address_time):
        """Sets the address_time of this TripStatistics.

        Суммарное время, проведенное на всех локациях без учета времени подьезда/отьезда в минутах  # noqa: E501

        :param address_time: The address_time of this TripStatistics.  # noqa: E501
        :type: int
        """
        if address_time is None:
            raise ValueError("Invalid value for `address_time`, must not be `None`")  # noqa: E501

        self._address_time = address_time

    @property
    def total_time(self):
        """Gets the total_time of this TripStatistics.  # noqa: E501

        Суммарное время, проведенное на всех локациях с учетом времени подьезда/отьезда в минутах  # noqa: E501

        :return: The total_time of this TripStatistics.  # noqa: E501
        :rtype: int
        """
        return self._total_time

    @total_time.setter
    def total_time(self, total_time):
        """Sets the total_time of this TripStatistics.

        Суммарное время, проведенное на всех локациях с учетом времени подьезда/отьезда в минутах  # noqa: E501

        :param total_time: The total_time of this TripStatistics.  # noqa: E501
        :type: int
        """
        if total_time is None:
            raise ValueError("Invalid value for `total_time`, must not be `None`")  # noqa: E501

        self._total_time = total_time

    @property
    def orders_count(self):
        """Gets the orders_count of this TripStatistics.  # noqa: E501

        Суммарное число запланированных заказов  # noqa: E501

        :return: The orders_count of this TripStatistics.  # noqa: E501
        :rtype: int
        """
        return self._orders_count

    @orders_count.setter
    def orders_count(self, orders_count):
        """Sets the orders_count of this TripStatistics.

        Суммарное число запланированных заказов  # noqa: E501

        :param orders_count: The orders_count of this TripStatistics.  # noqa: E501
        :type: int
        """
        if orders_count is None:
            raise ValueError("Invalid value for `orders_count`, must not be `None`")  # noqa: E501

        self._orders_count = orders_count

    @property
    def performers_count(self):
        """Gets the performers_count of this TripStatistics.  # noqa: E501

        Суммарное число исполнителей, задействованных в выполнении заказов  # noqa: E501

        :return: The performers_count of this TripStatistics.  # noqa: E501
        :rtype: int
        """
        return self._performers_count

    @performers_count.setter
    def performers_count(self, performers_count):
        """Sets the performers_count of this TripStatistics.

        Суммарное число исполнителей, задействованных в выполнении заказов  # noqa: E501

        :param performers_count: The performers_count of this TripStatistics.  # noqa: E501
        :type: int
        """
        if performers_count is None:
            raise ValueError("Invalid value for `performers_count`, must not be `None`")  # noqa: E501

        self._performers_count = performers_count

    @property
    def total_load(self):
        """Gets the total_load of this TripStatistics.  # noqa: E501


        :return: The total_load of this TripStatistics.  # noqa: E501
        :rtype: TransportLoad
        """
        return self._total_load

    @total_load.setter
    def total_load(self, total_load):
        """Sets the total_load of this TripStatistics.


        :param total_load: The total_load of this TripStatistics.  # noqa: E501
        :type: TransportLoad
        """

        self._total_load = total_load

    @property
    def max_load(self):
        """Gets the max_load of this TripStatistics.  # noqa: E501


        :return: The max_load of this TripStatistics.  # noqa: E501
        :rtype: TransportLoad
        """
        return self._max_load

    @max_load.setter
    def max_load(self, max_load):
        """Sets the max_load of this TripStatistics.


        :param max_load: The max_load of this TripStatistics.  # noqa: E501
        :type: TransportLoad
        """

        self._max_load = max_load

    @property
    def weight_utilization(self):
        """Gets the weight_utilization of this TripStatistics.  # noqa: E501

        Отношение максимальной загрузки машины по весу к ее вместимости  # noqa: E501

        :return: The weight_utilization of this TripStatistics.  # noqa: E501
        :rtype: float
        """
        return self._weight_utilization

    @weight_utilization.setter
    def weight_utilization(self, weight_utilization):
        """Sets the weight_utilization of this TripStatistics.

        Отношение максимальной загрузки машины по весу к ее вместимости  # noqa: E501

        :param weight_utilization: The weight_utilization of this TripStatistics.  # noqa: E501
        :type: float
        """

        self._weight_utilization = weight_utilization

    @property
    def volume_utilization(self):
        """Gets the volume_utilization of this TripStatistics.  # noqa: E501

        Отношение максимальной загрузки машины по обьему к ее вместимости  # noqa: E501

        :return: The volume_utilization of this TripStatistics.  # noqa: E501
        :rtype: float
        """
        return self._volume_utilization

    @volume_utilization.setter
    def volume_utilization(self, volume_utilization):
        """Sets the volume_utilization of this TripStatistics.

        Отношение максимальной загрузки машины по обьему к ее вместимости  # noqa: E501

        :param volume_utilization: The volume_utilization of this TripStatistics.  # noqa: E501
        :type: float
        """

        self._volume_utilization = volume_utilization

    @property
    def capacity_x_utilization(self):
        """Gets the capacity_x_utilization of this TripStatistics.  # noqa: E501

        Отношение максимального значения загрузки по параметру вместимости X к вместимости по данному параметру  # noqa: E501

        :return: The capacity_x_utilization of this TripStatistics.  # noqa: E501
        :rtype: float
        """
        return self._capacity_x_utilization

    @capacity_x_utilization.setter
    def capacity_x_utilization(self, capacity_x_utilization):
        """Sets the capacity_x_utilization of this TripStatistics.

        Отношение максимального значения загрузки по параметру вместимости X к вместимости по данному параметру  # noqa: E501

        :param capacity_x_utilization: The capacity_x_utilization of this TripStatistics.  # noqa: E501
        :type: float
        """

        self._capacity_x_utilization = capacity_x_utilization

    @property
    def capacity_y_utilization(self):
        """Gets the capacity_y_utilization of this TripStatistics.  # noqa: E501

        Отношение максимального значения загрузки по параметру вместимости Y к вместимости по данному параметру  # noqa: E501

        :return: The capacity_y_utilization of this TripStatistics.  # noqa: E501
        :rtype: float
        """
        return self._capacity_y_utilization

    @capacity_y_utilization.setter
    def capacity_y_utilization(self, capacity_y_utilization):
        """Sets the capacity_y_utilization of this TripStatistics.

        Отношение максимального значения загрузки по параметру вместимости Y к вместимости по данному параметру  # noqa: E501

        :param capacity_y_utilization: The capacity_y_utilization of this TripStatistics.  # noqa: E501
        :type: float
        """

        self._capacity_y_utilization = capacity_y_utilization

    @property
    def capacity_z_utilization(self):
        """Gets the capacity_z_utilization of this TripStatistics.  # noqa: E501

        Отношение максимального значения загрузки по параметру вместимости Z к вместимости по данному параметру  # noqa: E501

        :return: The capacity_z_utilization of this TripStatistics.  # noqa: E501
        :rtype: float
        """
        return self._capacity_z_utilization

    @capacity_z_utilization.setter
    def capacity_z_utilization(self, capacity_z_utilization):
        """Sets the capacity_z_utilization of this TripStatistics.

        Отношение максимального значения загрузки по параметру вместимости Z к вместимости по данному параметру  # noqa: E501

        :param capacity_z_utilization: The capacity_z_utilization of this TripStatistics.  # noqa: E501
        :type: float
        """

        self._capacity_z_utilization = capacity_z_utilization

    @property
    def stop_statistics(self):
        """Gets the stop_statistics of this TripStatistics.  # noqa: E501

        Статистика по каждой остановке в рейсе  # noqa: E501

        :return: The stop_statistics of this TripStatistics.  # noqa: E501
        :rtype: list[StopStatistics]
        """
        return self._stop_statistics

    @stop_statistics.setter
    def stop_statistics(self, stop_statistics):
        """Sets the stop_statistics of this TripStatistics.

        Статистика по каждой остановке в рейсе  # noqa: E501

        :param stop_statistics: The stop_statistics of this TripStatistics.  # noqa: E501
        :type: list[StopStatistics]
        """

        self._stop_statistics = stop_statistics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TripStatistics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TripStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
