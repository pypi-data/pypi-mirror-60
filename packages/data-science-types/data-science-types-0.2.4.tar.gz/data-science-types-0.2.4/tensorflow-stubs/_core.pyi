from typing import Tuple, List, Union, Callable, Any, TypeVar
import numpy as _np

_FuncType = Callable[..., Any]
_F = TypeVar("_F", bound=FuncType)
_ShapeType = Union[Tuple[int, ...], List[int]]

class Tensor:
    #
    # magic methods
    def __add__(self, value: object) -> Tensor: ...
    def __getitem__(
        self,
        key: Union[Union[Tensor, slice, int, None], Tuple[Union[Tensor, slice, int, None], ...]],
    ) -> Tensor: ...
    def __mul__(self, value: object) -> Tensor: ...
    def __sub__(self, value: object) -> Tensor: ...
    def __truediv__(sel, value: object) -> Tensor: ...
    #
    # properties
    @property
    def shape(self) -> Tuple[int, ...]: ...
    #
    # methods
    def numpy(self) -> _np.ndarray: ...

class Variable(Tensor):
    pass

class name_scope:
    def __init__(self, name: str): ...
    def __enter__(self): ...
    def __exit__(self, type_arg: Any, value_arg: Any, traceback_arg: Any): ...

_name_scope = name_scope

class Module:
    # properties
    @property
    def trainable_variables(self) -> List[Variable]: ...
    @property
    def name_scope(self) -> _name_scope: ...

class GradientTape:
    def __init__(self, persistent: bool = ..., watch_accessed_variables: bool = ...): ...
    def __enter__(self): ...
    def __exit__(self, typ: Any, value: Any, traceback: Any): ...

def add_n(values: List[Tensor]) -> Tensor: ...
def split(value: Tensor, num_or_size_splits: Union[int, List[int]], axis: int) -> Tensor: ...
def function(
    func: _F,
    input_signature: Any = ...,
    autograph: bool = ...,
    experimental_relax_shapes: bool = ...,
) -> _F: ...
def zeros(shape: _ShapeType) -> Tensor: ...
def concat(values: List[Tensor], axis: int) -> Tensor: ...
def reshape(tensor: Tensor, shape: _ShapeType) -> Tensor: ...
def reduce_sum(x: Tensor, axis: int = ..., keepdims: bool = ...) -> Tensor: ...
def zeros_like(input: Tensor) -> Tensor: ...
def reduce_mean(x: Tensor, axis: int = ..., keepdims: bool = ...) -> Tensor: ...
def abs(x: Tensor) -> Tensor: ...

# def x() -> Tensor: ...
# def x() -> Tensor: ...
# def x() -> Tensor: ...
# def x() -> Tensor: ...
# def x() -> Tensor: ...
# def x() -> Tensor: ...
# def x() -> Tensor: ...
# def x() -> Tensor: ...
# def x() -> Tensor: ...
# def x() -> Tensor: ...
# def x() -> Tensor: ...
# def x() -> Tensor: ...
# def x() -> Tensor: ...
# def x() -> Tensor: ...
# def x() -> Tensor: ...
# def x() -> Tensor: ...
# def x() -> Tensor: ...
# def x() -> Tensor: ...
# def x() -> Tensor: ...
# def x() -> Tensor: ...
# def x() -> Tensor: ...
# def x() -> Tensor: ...
# def x() -> Tensor: ...
# def x() -> Tensor: ...

# ======= special values =====
newaxis: None = ...
