# coding: utf-8

"""
    VeeRoute.LSS Lastmile

    Программный интерфейс для универсального планирования задач последней мили  # noqa: E501

    OpenAPI spec version: 1.8.154023
    Contact: support@veeroute.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class TripJob(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'job_type': 'str',
        'job_time': 'int'
    }

    attribute_map = {
        'job_type': 'job_type',
        'job_time': 'job_time'
    }

    def __init__(self, job_type=None, job_time=None):  # noqa: E501
        """TripJob - a model defined in Swagger"""  # noqa: E501
        self._job_type = None
        self._job_time = None
        self.discriminator = None
        self.job_type = job_type
        self.job_time = job_time

    @property
    def job_type(self):
        """Gets the job_type of this TripJob.  # noqa: E501

        Возможные типы работ   * `JT_LOCATION_ARRIVAL` - Прибытие на локацию   * `JT_READY_TO_WORK` - Исполнитель готов к работе   * `JT_START_WORK` - Начало работы на локации   * `JT_FINISH_WORK` - Конец работы на локации   * `JT_LOCATION_DEPARTURE` - Отъезд с локации   # noqa: E501

        :return: The job_type of this TripJob.  # noqa: E501
        :rtype: str
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this TripJob.

        Возможные типы работ   * `JT_LOCATION_ARRIVAL` - Прибытие на локацию   * `JT_READY_TO_WORK` - Исполнитель готов к работе   * `JT_START_WORK` - Начало работы на локации   * `JT_FINISH_WORK` - Конец работы на локации   * `JT_LOCATION_DEPARTURE` - Отъезд с локации   # noqa: E501

        :param job_type: The job_type of this TripJob.  # noqa: E501
        :type: str
        """
        if job_type is None:
            raise ValueError("Invalid value for `job_type`, must not be `None`")  # noqa: E501
        allowed_values = ["JT_LOCATION_ARRIVAL", "JT_READY_TO_WORK", "JT_START_WORK", "JT_FINISH_WORK", "JT_LOCATION_DEPARTURE"]  # noqa: E501
        if job_type not in allowed_values:
            raise ValueError(
                "Invalid value for `job_type` ({0}), must be one of {1}"  # noqa: E501
                .format(job_type, allowed_values)
            )

        self._job_type = job_type

    @property
    def job_time(self):
        """Gets the job_time of this TripJob.  # noqa: E501

        Время начала работы в формате [UNIX-времени](https://ru.wikipedia.org/wiki/Unix-%D0%B2%D1%80%D0%B5%D0%BC%D1%8F)  # noqa: E501

        :return: The job_time of this TripJob.  # noqa: E501
        :rtype: int
        """
        return self._job_time

    @job_time.setter
    def job_time(self, job_time):
        """Sets the job_time of this TripJob.

        Время начала работы в формате [UNIX-времени](https://ru.wikipedia.org/wiki/Unix-%D0%B2%D1%80%D0%B5%D0%BC%D1%8F)  # noqa: E501

        :param job_time: The job_time of this TripJob.  # noqa: E501
        :type: int
        """
        if job_time is None:
            raise ValueError("Invalid value for `job_time`, must not be `None`")  # noqa: E501

        self._job_time = job_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TripJob, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TripJob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
