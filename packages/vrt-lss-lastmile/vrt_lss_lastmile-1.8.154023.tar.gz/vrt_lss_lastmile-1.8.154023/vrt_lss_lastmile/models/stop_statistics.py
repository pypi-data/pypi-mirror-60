# coding: utf-8

"""
    VeeRoute.LSS Lastmile

    Программный интерфейс для универсального планирования задач последней мили  # noqa: E501

    OpenAPI spec version: 1.8.154023
    Contact: support@veeroute.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class StopStatistics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'upload': 'TransportLoad',
        'download': 'TransportLoad',
        'current_load': 'TransportLoad',
        'driving_time': 'int',
        'waiting_time': 'int',
        'working_time': 'int',
        'address_time': 'int',
        'total_time': 'int',
        'distance': 'int',
        'time_window': 'TimeWindow',
        'location': 'StopStatisticsLocation',
        'demand_ids': 'list[str]'
    }

    attribute_map = {
        'upload': 'upload',
        'download': 'download',
        'current_load': 'current_load',
        'driving_time': 'driving_time',
        'waiting_time': 'waiting_time',
        'working_time': 'working_time',
        'address_time': 'address_time',
        'total_time': 'total_time',
        'distance': 'distance',
        'time_window': 'time_window',
        'location': 'location',
        'demand_ids': 'demand_ids'
    }

    def __init__(self, upload=None, download=None, current_load=None, driving_time=None, waiting_time=None, working_time=None, address_time=None, total_time=None, distance=None, time_window=None, location=None, demand_ids=None):  # noqa: E501
        """StopStatistics - a model defined in Swagger"""  # noqa: E501
        self._upload = None
        self._download = None
        self._current_load = None
        self._driving_time = None
        self._waiting_time = None
        self._working_time = None
        self._address_time = None
        self._total_time = None
        self._distance = None
        self._time_window = None
        self._location = None
        self._demand_ids = None
        self.discriminator = None
        if upload is not None:
            self.upload = upload
        if download is not None:
            self.download = download
        self.current_load = current_load
        self.driving_time = driving_time
        self.waiting_time = waiting_time
        self.working_time = working_time
        self.address_time = address_time
        self.total_time = total_time
        self.distance = distance
        self.time_window = time_window
        self.location = location
        self.demand_ids = demand_ids

    @property
    def upload(self):
        """Gets the upload of this StopStatistics.  # noqa: E501


        :return: The upload of this StopStatistics.  # noqa: E501
        :rtype: TransportLoad
        """
        return self._upload

    @upload.setter
    def upload(self, upload):
        """Sets the upload of this StopStatistics.


        :param upload: The upload of this StopStatistics.  # noqa: E501
        :type: TransportLoad
        """

        self._upload = upload

    @property
    def download(self):
        """Gets the download of this StopStatistics.  # noqa: E501


        :return: The download of this StopStatistics.  # noqa: E501
        :rtype: TransportLoad
        """
        return self._download

    @download.setter
    def download(self, download):
        """Sets the download of this StopStatistics.


        :param download: The download of this StopStatistics.  # noqa: E501
        :type: TransportLoad
        """

        self._download = download

    @property
    def current_load(self):
        """Gets the current_load of this StopStatistics.  # noqa: E501


        :return: The current_load of this StopStatistics.  # noqa: E501
        :rtype: TransportLoad
        """
        return self._current_load

    @current_load.setter
    def current_load(self, current_load):
        """Sets the current_load of this StopStatistics.


        :param current_load: The current_load of this StopStatistics.  # noqa: E501
        :type: TransportLoad
        """
        if current_load is None:
            raise ValueError("Invalid value for `current_load`, must not be `None`")  # noqa: E501

        self._current_load = current_load

    @property
    def driving_time(self):
        """Gets the driving_time of this StopStatistics.  # noqa: E501

        Время в пути от предыдущей остановки до этой остановки в минутах  # noqa: E501

        :return: The driving_time of this StopStatistics.  # noqa: E501
        :rtype: int
        """
        return self._driving_time

    @driving_time.setter
    def driving_time(self, driving_time):
        """Sets the driving_time of this StopStatistics.

        Время в пути от предыдущей остановки до этой остановки в минутах  # noqa: E501

        :param driving_time: The driving_time of this StopStatistics.  # noqa: E501
        :type: int
        """
        if driving_time is None:
            raise ValueError("Invalid value for `driving_time`, must not be `None`")  # noqa: E501

        self._driving_time = driving_time

    @property
    def waiting_time(self):
        """Gets the waiting_time of this StopStatistics.  # noqa: E501

        Суммарная продолжительность простоев на этой остановке в минутах  # noqa: E501

        :return: The waiting_time of this StopStatistics.  # noqa: E501
        :rtype: int
        """
        return self._waiting_time

    @waiting_time.setter
    def waiting_time(self, waiting_time):
        """Sets the waiting_time of this StopStatistics.

        Суммарная продолжительность простоев на этой остановке в минутах  # noqa: E501

        :param waiting_time: The waiting_time of this StopStatistics.  # noqa: E501
        :type: int
        """
        if waiting_time is None:
            raise ValueError("Invalid value for `waiting_time`, must not be `None`")  # noqa: E501

        self._waiting_time = waiting_time

    @property
    def working_time(self):
        """Gets the working_time of this StopStatistics.  # noqa: E501

        Время выполнения работ, погрузки/загрузки на этой остановке в минутах  # noqa: E501

        :return: The working_time of this StopStatistics.  # noqa: E501
        :rtype: int
        """
        return self._working_time

    @working_time.setter
    def working_time(self, working_time):
        """Sets the working_time of this StopStatistics.

        Время выполнения работ, погрузки/загрузки на этой остановке в минутах  # noqa: E501

        :param working_time: The working_time of this StopStatistics.  # noqa: E501
        :type: int
        """
        if working_time is None:
            raise ValueError("Invalid value for `working_time`, must not be `None`")  # noqa: E501

        self._working_time = working_time

    @property
    def address_time(self):
        """Gets the address_time of this StopStatistics.  # noqa: E501

        Суммарное время, проведенное на этой остановки без времени подьезда/отьезда в минутах  # noqa: E501

        :return: The address_time of this StopStatistics.  # noqa: E501
        :rtype: int
        """
        return self._address_time

    @address_time.setter
    def address_time(self, address_time):
        """Sets the address_time of this StopStatistics.

        Суммарное время, проведенное на этой остановки без времени подьезда/отьезда в минутах  # noqa: E501

        :param address_time: The address_time of this StopStatistics.  # noqa: E501
        :type: int
        """
        if address_time is None:
            raise ValueError("Invalid value for `address_time`, must not be `None`")  # noqa: E501

        self._address_time = address_time

    @property
    def total_time(self):
        """Gets the total_time of this StopStatistics.  # noqa: E501

        Суммарное время, проведенное на этой остановки с учетом времени подьезда/отьезда в минутах  # noqa: E501

        :return: The total_time of this StopStatistics.  # noqa: E501
        :rtype: int
        """
        return self._total_time

    @total_time.setter
    def total_time(self, total_time):
        """Sets the total_time of this StopStatistics.

        Суммарное время, проведенное на этой остановки с учетом времени подьезда/отьезда в минутах  # noqa: E501

        :param total_time: The total_time of this StopStatistics.  # noqa: E501
        :type: int
        """
        if total_time is None:
            raise ValueError("Invalid value for `total_time`, must not be `None`")  # noqa: E501

        self._total_time = total_time

    @property
    def distance(self):
        """Gets the distance of this StopStatistics.  # noqa: E501

        Суммарная протяжённость рейсов в метрах  # noqa: E501

        :return: The distance of this StopStatistics.  # noqa: E501
        :rtype: int
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this StopStatistics.

        Суммарная протяжённость рейсов в метрах  # noqa: E501

        :param distance: The distance of this StopStatistics.  # noqa: E501
        :type: int
        """
        if distance is None:
            raise ValueError("Invalid value for `distance`, must not be `None`")  # noqa: E501

        self._distance = distance

    @property
    def time_window(self):
        """Gets the time_window of this StopStatistics.  # noqa: E501


        :return: The time_window of this StopStatistics.  # noqa: E501
        :rtype: TimeWindow
        """
        return self._time_window

    @time_window.setter
    def time_window(self, time_window):
        """Sets the time_window of this StopStatistics.


        :param time_window: The time_window of this StopStatistics.  # noqa: E501
        :type: TimeWindow
        """
        if time_window is None:
            raise ValueError("Invalid value for `time_window`, must not be `None`")  # noqa: E501

        self._time_window = time_window

    @property
    def location(self):
        """Gets the location of this StopStatistics.  # noqa: E501


        :return: The location of this StopStatistics.  # noqa: E501
        :rtype: StopStatisticsLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this StopStatistics.


        :param location: The location of this StopStatistics.  # noqa: E501
        :type: StopStatisticsLocation
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def demand_ids(self):
        """Gets the demand_ids of this StopStatistics.  # noqa: E501

        Список идентификаторов заявок выполненных на этой остановке  # noqa: E501

        :return: The demand_ids of this StopStatistics.  # noqa: E501
        :rtype: list[str]
        """
        return self._demand_ids

    @demand_ids.setter
    def demand_ids(self, demand_ids):
        """Sets the demand_ids of this StopStatistics.

        Список идентификаторов заявок выполненных на этой остановке  # noqa: E501

        :param demand_ids: The demand_ids of this StopStatistics.  # noqa: E501
        :type: list[str]
        """
        if demand_ids is None:
            raise ValueError("Invalid value for `demand_ids`, must not be `None`")  # noqa: E501

        self._demand_ids = demand_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StopStatistics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StopStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
