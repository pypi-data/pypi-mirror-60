# Wraps the entire migration into a single database
# transaction. Useful for doing all or nothing migrations. If this
# value is true, then wrap_each_version_in_transaction should be false.
wrap-all-in-transaction: true

# When true, instead of wrapping all versions in the entire migration
# in a single transaction, wrap each individual version in its own
# transaction.
wrap-each-version-in-transaction: false

# When true, pghops will stop and return a failure status if it cannot
# connect to the Postgres server. Sometimes you may want to exit
# without a failure status if, for example, you deploy to multiple
# servers some of which are standy.
fail-if-unable-to-connect: true

# When true, pghops will stop and return a failure status if the
# Postgres server is in standby mode.
fail-if-standby: true

# When testing to see if we can connect to the Postgres server, try
# connecting with this database.
connection-test-database: postgres

# When true, pghops saves all executed sql into the column
# pghops.version.migration_sql. You may want to consider disabling
# this feature if you have an extremely large amount of sql to execute
# in your migration.
save-sql-to-version-table: true

# When true, pghops scans the database directory for "create index"
# and "create unique index" statements and saves them to the
# pghops.index table. pghops does not create the indexes during the
# migration, just saves them to the table so a different process can
# create them asynchronously later.
save-indexes: true

# Base psql arguments. Use in conjunction with --psql-args to set the
# argument list to psql calls.
psql-base-args: "--set ON_ERROR_STOP=1 --no-psqlrc"

# Verbosity level. Default is to print version scripts to be executed
# and other related info.
verbosity: default

# Script suffixes. Limit the suffixes to version files to this case
# insensitive list.
script_suffixes: ".yml,.yaml"
