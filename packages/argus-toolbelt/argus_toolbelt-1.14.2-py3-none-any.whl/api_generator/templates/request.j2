{% from "helpers.j2" import format_arguments, format_url_parameters, format_arguments_as_dict, exception %}
def {{method.name}}(
    {{ format_arguments(method.parameters.all)}}
    json: bool = True,
    verify: bool = True,
    apiKey: str = None,
    authentication: dict = {}
  ) -> dict:
    """{{method.description}}

    {%- if method.parameters.all -%}
    {%- for parameter in method.parameters.all %}
    :param {{parameter.type}} {{parameter.name}}: {{parameter.description}}
    {%- endfor -%}
    {%- endif -%}
    
    {%- if method.errors -%}
    {%- for status_code, error in method.errors.items() | sort %}
    {%- if error is mapping %}
    :raises {{exception(error.description)}}: on {{status_code}}
    {%- endif -%}
    {%- endfor -%}
    {% endif %}
    :returns: {{ method.fake_response() | safe_dict_dump }}
    """
    from os import getenv
    from requests import {{ method.method }}
    from api_generator.exceptions import http
    {% if register_as_plugin %}
    from argus_cli.settings import settings
    from api_generator.helpers.log import log
    {% endif %}
    
    url = "{{method.url}}".format({{ format_url_parameters(method.parameters.path) }})
    headers = {
        'User-Agent': 'ArgusToolbelt/{{version}}',
    }

    {% if register_as_plugin %}
    if not apiKey and "api_key" in settings["api"]:
        apiKey = settings["api"]["api_key"]
    {% endif %}

    if apiKey:
        headers["{{method.api_key_header_name}}"] = apiKey
    elif authentication and isinstance(authentication, dict):
        headers.update(authentication)
    elif callable(authentication):
        headers.update(authentication(url))

    body = {}
    {%- for parameter in method.parameters.body %}
    # Only send {{parameter.name}} if the argument was provided, dont send null values
    if {{parameter.name | to_safe_argument }} is not None:
        body.update({ "{{parameter.name}}": {{parameter.name | to_safe_argument }} })
    {%- endfor %}

    query_parameters = {}
    {%- for parameter in method.parameters.path if parameter["in"] == "query" %}
    # Only send {{parameter.name}} if the argument was provided, dont send null values
    if {{parameter.name | to_safe_argument }} is not None:
        query_parameters.update({ "{{parameter.name}}": {{parameter.name | to_safe_argument }} })
    {%- endfor %}

    {% if register_as_plugin %}
    log.debug("{{method.method | upper}} %s (headers: %s, body: %s)" % (url, str(headers), str(body) or ""))

    # Print as curl command to allow user to debug the request
    log.debug(
        "curl -X {{method.method | upper}} " +
        " " .join([ "-H '%s: %s'" % (key, value) for key, value in headers.items() ]) +
        {% if method.method in ('post', 'put') %}
        (("-d '%s' " % str(body)) if body else " ") +
        "{{method.url}}"
        {% else %}
        ' "%s"' % ("{{method.url}}?" + "&".join(["%s=%s" % (key, str(value)) for key,value in body.items()]))
        {% endif %}
    )
    {% endif %}

    response = {{method.method}}(
        url,
        params=query_parameters or None,
        json=body or None,
        verify=getenv('REQUESTS_CA_BUNDLE', verify),
        headers=headers
    )

    if response.status_code == 401:
        raise http.AuthenticationFailedException(response)
    elif response.status_code == 403:
        raise http.AccessDeniedException(response)
    elif response.status_code == 412:
        raise http.ValidationErrorException(response)
    elif response.status_code == 404:
        raise http.ObjectNotFoundException(response)

    return response.json() if json else response