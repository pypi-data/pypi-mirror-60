# Generated by Django 2.2.5 on 2020-01-17 11:40

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import multiselectfield.db.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AbstractPaymentMethod',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('brands', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('AMERICAN_EXPRESS', 'American Express'), ('DISCOVER', 'Discover'), ('MASTERCARD', 'MasterCard'), ('VISA', 'Visa')], max_length=41, null=True, verbose_name='Brands')),
                ('paymentMethodType', models.CharField(choices=[('CREDIT_CARD', 'Банковская карта'), ('PAYPAL', 'Paypal')], max_length=11, verbose_name='Payment method type')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AbstractRecipientAccountReference',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('referenceId', models.CharField(blank=True, max_length=255, null=True)),
                ('referenceType', models.CharField(choices=[('PAYPAL_EMAIL', 'PayPal email')], max_length=12, verbose_name='Reference type')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AdditionalShippingCost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, verbose_name='Валюта')),
                ('value', models.FloatField(verbose_name='Значение цены')),
                ('convertedFromCurrency', models.CharField(blank=True, choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, null=True, verbose_name='Валюта исходной цены')),
                ('convertedFromValue', models.FloatField(blank=True, null=True, verbose_name='Значение исходной цены')),
            ],
            options={
                'verbose_name': 'Shipping service additional shipping cost',
            },
        ),
        migrations.CreateModel(
            name='CashOnDeliveryFee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, verbose_name='Валюта')),
                ('value', models.FloatField(verbose_name='Значение цены')),
                ('convertedFromCurrency', models.CharField(blank=True, choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, null=True, verbose_name='Валюта исходной цены')),
                ('convertedFromValue', models.FloatField(blank=True, null=True, verbose_name='Значение исходной цены')),
            ],
            options={
                'verbose_name': 'Shipping service cash on delivery fee',
            },
        ),
        migrations.CreateModel(
            name='Deposit',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'verbose_name': 'Payment policy deposit',
            },
        ),
        migrations.CreateModel(
            name='DepositAmount',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('currency', models.CharField(choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, verbose_name='Currency')),
                ('value', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(2000.0)], verbose_name='Value')),
            ],
            options={
                'verbose_name': 'Deposit amount',
            },
        ),
        migrations.CreateModel(
            name='DepositDueIn',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('unit', models.CharField(default='HOUR', editable=False, max_length=4, verbose_name='Unit')),
                ('value', models.PositiveIntegerField(default=48, help_text='Min=24 (hours), Max=72 (hours), Default=48 (hours)', validators=[django.core.validators.MinValueValidator(24), django.core.validators.MaxValueValidator(72)], verbose_name='Value')),
            ],
            options={
                'verbose_name': 'Deposit due in',
            },
        ),
        migrations.CreateModel(
            name='FulfillmentPolicy',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False)),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False)),
                ('status', model_utils.fields.StatusField(choices=[('draft', 'draft'), ('ready_to_publish', 'ready_to_publish'), ('published', 'published'), ('update_required', 'update_required')], default='draft', max_length=100, no_check_for_status=True)),
                ('published_at', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', when={'published'})),
                ('name', models.CharField(max_length=64, verbose_name='Name')),
                ('description', models.CharField(blank=True, max_length=250, null=True, verbose_name='Description')),
                ('policy_id', models.CharField(blank=True, max_length=255, null=True, unique=True, verbose_name='Уникальный ID политики в системе eBay')),
                ('freightShipping', models.BooleanField(default=False, verbose_name='Продавец предлагает доставку')),
                ('globalShipping', models.BooleanField(default=False, verbose_name='Глобальная программа доставки')),
                ('localPickup', models.BooleanField(default=False, verbose_name='Продавец предлагает локальную доставку')),
                ('pickupDropOff', models.BooleanField(default=False, verbose_name='Click and Collect')),
            ],
            options={
                'verbose_name': 'Политика фулфилмента',
                'verbose_name_plural': 'Политики фулфилмента',
                'default_related_name': 'fulfillment_policy',
            },
        ),
        migrations.CreateModel(
            name='FulfillmentPolicyCategoryType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('default', models.BooleanField(default=False, verbose_name='Default')),
                ('name', models.CharField(choices=[('MOTORS_VEHICLES', 'Автотранспорт'), ('ALL_EXCLUDING_MOTORS_VEHICLES', 'Всё, кроме автотранспорта')], max_length=29, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Fulfillment policy category type',
            },
        ),
        migrations.CreateModel(
            name='FulfillmentPolicyRegionExcluded',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('regionName', models.CharField(max_length=255, verbose_name='Region name')),
                ('regionType', models.CharField(blank=True, choices=[('COUNTRY', 'Страна'), ('COUNTRY_REGION', 'Страна или регион страны'), ('STATE_OR_PROVINCE', 'Штат или процинция'), ('WORLD_REGION', 'Регион мира'), ('WORLDWIDE', 'Мир')], max_length=17, null=True, verbose_name='Region type')),
            ],
            options={
                'verbose_name': 'Fulfillment policy region excluded',
            },
        ),
        migrations.CreateModel(
            name='FulfillmentPolicyRegionIncluded',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('regionName', models.CharField(max_length=255, verbose_name='Region name')),
                ('regionType', models.CharField(blank=True, choices=[('COUNTRY', 'Страна'), ('COUNTRY_REGION', 'Страна или регион страны'), ('STATE_OR_PROVINCE', 'Штат или процинция'), ('WORLD_REGION', 'Регион мира'), ('WORLDWIDE', 'Мир')], max_length=17, null=True, verbose_name='Region type')),
            ],
            options={
                'verbose_name': 'Fulfillment policy region included',
            },
        ),
        migrations.CreateModel(
            name='FulfillmentPolicyShipToLocations',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
            ],
            options={
                'verbose_name': 'Fulfillment policy ship to locations',
            },
        ),
        migrations.CreateModel(
            name='FullPaymentDueIn',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('unit', models.CharField(default='DAY', editable=False, max_length=3, verbose_name='Unit')),
                ('value', models.PositiveIntegerField(choices=[(3, '3'), (7, '7'), (10, '10'), (14, '14')], default=7, verbose_name='Value')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HandlingTime',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('unit', models.CharField(default='DAY', editable=False, max_length=100, verbose_name='Unit')),
                ('value', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(30)], verbose_name='Value')),
            ],
            options={
                'verbose_name': 'Fulfillment policy handling time',
            },
        ),
        migrations.CreateModel(
            name='InsuranceFee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, verbose_name='Валюта')),
                ('value', models.FloatField(verbose_name='Значение цены')),
                ('convertedFromCurrency', models.CharField(blank=True, choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, null=True, verbose_name='Валюта исходной цены')),
                ('convertedFromValue', models.FloatField(blank=True, null=True, verbose_name='Значение исходной цены')),
            ],
            options={
                'verbose_name': 'Shipping option insurance fee',
            },
        ),
        migrations.CreateModel(
            name='InternationalOverride',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('returnMethod', models.CharField(default='REPLACEMENT', max_length=30, verbose_name='Return method')),
                ('returnsAccepted', models.BooleanField(blank=True, null=True, verbose_name='Seller allows international returns')),
                ('returnShippingCostPayer', models.CharField(blank=True, choices=[('BUYER', 'Покупатель'), ('SELLER', 'Продавец')], max_length=6, null=True, verbose_name='Return shipping cost payer')),
            ],
            options={
                'verbose_name': "Seller's policy for international returns",
                'verbose_name_plural': "Seller's policies for international returns",
            },
        ),
        migrations.CreateModel(
            name='InternationalOverrideReturnPeriod',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('unit', models.CharField(choices=[('YEAR', 'Год'), ('MONTH', 'Месяц'), ('DAY', 'День'), ('HOUR', 'Час'), ('CALENDAR_DAY', 'Календарный день'), ('BUSINESS_DAY', 'Рабочий день'), ('MINUTE', 'Минута'), ('SECOND', 'Секунда'), ('MILLISECOND', 'Миллисекунда')], max_length=100, verbose_name='Unit')),
                ('value', models.PositiveIntegerField(verbose_name='Value')),
            ],
            options={
                'verbose_name': 'Amount of time the buyer has to return an item',
                'verbose_name_plural': 'Amounts of times the buyer has to return an item',
            },
        ),
        migrations.CreateModel(
            name='PackageHandlingCost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, verbose_name='Валюта')),
                ('value', models.FloatField(verbose_name='Значение цены')),
                ('convertedFromCurrency', models.CharField(blank=True, choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, null=True, verbose_name='Валюта исходной цены')),
                ('convertedFromValue', models.FloatField(blank=True, null=True, verbose_name='Значение исходной цены')),
            ],
            options={
                'verbose_name': 'Shipping option package handling cost',
            },
        ),
        migrations.CreateModel(
            name='PaymentPolicy',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False)),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False)),
                ('status', model_utils.fields.StatusField(choices=[('draft', 'draft'), ('ready_to_publish', 'ready_to_publish'), ('published', 'published'), ('update_required', 'update_required')], default='draft', max_length=100, no_check_for_status=True)),
                ('published_at', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', when={'published'})),
                ('name', models.CharField(max_length=64, verbose_name='Name')),
                ('description', models.CharField(blank=True, max_length=250, null=True, verbose_name='Description')),
                ('policy_id', models.CharField(blank=True, max_length=255, null=True, unique=True, verbose_name='Уникальный ID политики в системе eBay')),
                ('immediatePay', models.BooleanField(default=False, verbose_name='Immediate pay')),
                ('paymentInstructions', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Payment instructions')),
            ],
            options={
                'verbose_name': 'Политика оплаты',
                'verbose_name_plural': 'Политики оплаты',
                'default_related_name': 'payment_policy',
            },
        ),
        migrations.CreateModel(
            name='PaymentPolicyCategoryType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('default', models.BooleanField(default=False, verbose_name='Default')),
                ('name', models.CharField(choices=[('MOTORS_VEHICLES', 'Автотранспорт'), ('ALL_EXCLUDING_MOTORS_VEHICLES', 'Всё, кроме автотранспорта')], max_length=29, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'Payment policy category type',
            },
        ),
        migrations.CreateModel(
            name='ReturnPolicy',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False)),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False)),
                ('status', model_utils.fields.StatusField(choices=[('draft', 'draft'), ('ready_to_publish', 'ready_to_publish'), ('published', 'published'), ('update_required', 'update_required')], default='draft', max_length=100, no_check_for_status=True)),
                ('published_at', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', when={'published'})),
                ('name', models.CharField(max_length=64, verbose_name='Name')),
                ('description', models.CharField(blank=True, max_length=250, null=True, verbose_name='Description')),
                ('policy_id', models.CharField(blank=True, max_length=255, null=True, unique=True, verbose_name='Уникальный ID политики в системе eBay')),
                ('returnMethod', models.CharField(default='REPLACEMENT', max_length=11, verbose_name='Return method')),
                ('returnsAccepted', models.BooleanField(verbose_name='Returns accepted')),
                ('returnShippingCostPayer', models.CharField(blank=True, choices=[('BUYER', 'Покупатель'), ('SELLER', 'Продавец')], max_length=6, null=True)),
            ],
            options={
                'verbose_name': 'Политика возврата',
                'verbose_name_plural': 'Политики возврата',
                'default_related_name': 'return_policy',
            },
        ),
        migrations.CreateModel(
            name='ShippingOption',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('costType', models.CharField(blank=True, choices=[('CALCULATED', 'CALCULATED'), ('FLAT_RATE', 'LAT_RATE'), ('NOT_SPECIFIED', 'NOT_SPECIFIED')], max_length=13, null=True, verbose_name='Cost type')),
                ('insuranceOffered', models.BooleanField(blank=True, null=True, verbose_name='Insurance offered')),
                ('optionType', models.CharField(blank=True, choices=[('DOMESTIC', 'Внутренняя доставка'), ('INTERNATIONAL', 'Международная доставка')], max_length=13, null=True, verbose_name='Option type')),
                ('rateTableId', models.CharField(blank=True, max_length=20, null=True, verbose_name='Rate table id')),
                ('fulfillment_policy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shippingOptions', to='ebay_policy.FulfillmentPolicy')),
            ],
            options={
                'verbose_name': 'Fulfillment policy shipping option',
            },
        ),
        migrations.CreateModel(
            name='ShippingService',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('buyerResponsibleForPickup', models.BooleanField(default=False, verbose_name='Buyer responsible for pickup')),
                ('buyerResponsibleForShipping', models.BooleanField(default=False, verbose_name='Buyer responsible for shipping')),
                ('freeShipping', models.BooleanField(blank=True, null=True, verbose_name='Free shipping')),
                ('shippingCarrierCode', models.CharField(blank=True, choices=[('Other', 'Use this code for any carrier not listed here.'), ('GENERIC', 'GENERIC'), ('DHL', 'DHL Express'), ('DHLEKB', 'DHL EKB'), ('DHLEXPRESS', 'DHL Express'), ('DHLGlobalMail', 'DHL Global Mail'), ('UPS', 'United Parcel Service'), ('USPS', 'U.S. Postal Service'), ('GENERIC', 'Generic')], max_length=30, null=True, verbose_name='Shipping carrier code')),
                ('shippingServiceCode', models.CharField(blank=True, max_length=255, null=True, verbose_name='Shipping service code')),
                ('sortOrder', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Sort order')),
                ('shipping_option', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shippingServices', to='ebay_policy.ShippingOption')),
            ],
            options={
                'verbose_name': 'Shipping option shipping service',
                'verbose_name_plural': 'Shipping option shipping services',
            },
        ),
        migrations.CreateModel(
            name='DepositPaymentMethod',
            fields=[
                ('abstractpaymentmethod_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ebay_policy.AbstractPaymentMethod')),
            ],
            options={
                'verbose_name': 'Deposit payment method',
            },
            bases=('ebay_policy.abstractpaymentmethod',),
        ),
        migrations.CreateModel(
            name='DepositRecipientAccountReference',
            fields=[
                ('abstractrecipientaccountreference_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ebay_policy.AbstractRecipientAccountReference')),
            ],
            options={
                'verbose_name': 'Deposit recipient account reference',
            },
            bases=('ebay_policy.abstractrecipientaccountreference',),
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('abstractpaymentmethod_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ebay_policy.AbstractPaymentMethod')),
            ],
            options={
                'verbose_name': 'Payment policy payment method',
            },
            bases=('ebay_policy.abstractpaymentmethod',),
        ),
        migrations.CreateModel(
            name='RecipientAccountReference',
            fields=[
                ('abstractrecipientaccountreference_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='ebay_policy.AbstractRecipientAccountReference')),
            ],
            options={
                'abstract': False,
            },
            bases=('ebay_policy.abstractrecipientaccountreference',),
        ),
        migrations.CreateModel(
            name='Surcharge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, verbose_name='Валюта')),
                ('value', models.FloatField(verbose_name='Значение цены')),
                ('convertedFromCurrency', models.CharField(blank=True, choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, null=True, verbose_name='Валюта исходной цены')),
                ('convertedFromValue', models.FloatField(blank=True, null=True, verbose_name='Значение исходной цены')),
                ('shipping_service', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='surcharge', to='ebay_policy.ShippingService')),
            ],
            options={
                'verbose_name': 'Shipping service surcharge',
            },
        ),
        migrations.CreateModel(
            name='ShippingServiceShipToLocations',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('shipping_service', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='shipToLocations', to='ebay_policy.ShippingService', verbose_name='Shipping service')),
            ],
            options={
                'verbose_name': 'Shipping service ship to locations',
            },
        ),
        migrations.CreateModel(
            name='ShippingServiceRegionIncluded',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('regionName', models.CharField(max_length=255, verbose_name='Region name')),
                ('regionType', models.CharField(blank=True, choices=[('COUNTRY', 'Страна'), ('COUNTRY_REGION', 'Страна или регион страны'), ('STATE_OR_PROVINCE', 'Штат или процинция'), ('WORLD_REGION', 'Регион мира'), ('WORLDWIDE', 'Мир')], max_length=17, null=True, verbose_name='Region type')),
                ('ship_to_locations', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='regionIncluded', to='ebay_policy.ShippingServiceShipToLocations')),
            ],
            options={
                'verbose_name': 'Ship to locations region included',
            },
        ),
        migrations.CreateModel(
            name='ShippingServiceRegionExcluded',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('regionName', models.CharField(max_length=255, verbose_name='Region name')),
                ('regionType', models.CharField(blank=True, choices=[('COUNTRY', 'Страна'), ('COUNTRY_REGION', 'Страна или регион страны'), ('STATE_OR_PROVINCE', 'Штат или процинция'), ('WORLD_REGION', 'Регион мира'), ('WORLDWIDE', 'Мир')], max_length=17, null=True, verbose_name='Region type')),
                ('ship_to_locations', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='regionExcluded', to='ebay_policy.ShippingServiceShipToLocations')),
            ],
            options={
                'verbose_name': 'Ship to locations region excluded',
            },
        ),
        migrations.CreateModel(
            name='ShippingCost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, verbose_name='Валюта')),
                ('value', models.FloatField(verbose_name='Значение цены')),
                ('convertedFromCurrency', models.CharField(blank=True, choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, null=True, verbose_name='Валюта исходной цены')),
                ('convertedFromValue', models.FloatField(blank=True, null=True, verbose_name='Значение исходной цены')),
                ('shipping_service', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='shippingCost', to='ebay_policy.ShippingService')),
            ],
            options={
                'verbose_name': 'Shipping service shipping cost',
            },
        ),
        migrations.CreateModel(
            name='ReturnPolicyReturnPeriod',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('unit', models.CharField(default='DAY', editable=False, max_length=100, verbose_name='Unit')),
                ('value', models.PositiveIntegerField(choices=[(30, '30'), (60, '60')], verbose_name='Value')),
                ('return_policy', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='returnPeriod', to='ebay_policy.ReturnPolicy', verbose_name='Return policy')),
            ],
            options={
                'verbose_name': 'Amount of time the buyer has to return an item',
                'verbose_name_plural': 'Amounts of times the buyer has to return an item',
            },
        ),
        migrations.CreateModel(
            name='ReturnPolicyCategoryType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('default', models.BooleanField(default=False, verbose_name='Default')),
                ('name', models.CharField(default='ALL_EXCLUDING_MOTORS_VEHICLES', editable=False, max_length=29, verbose_name='Name')),
                ('return_policy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='categoryTypes', to='ebay_policy.ReturnPolicy', verbose_name='Return policy')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
