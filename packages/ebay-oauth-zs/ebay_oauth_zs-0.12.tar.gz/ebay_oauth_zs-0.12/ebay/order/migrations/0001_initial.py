# Generated by Django 2.2.5 on 2020-01-17 11:40

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('ebay_listing', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Adjustment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, verbose_name='Валюта')),
                ('value', models.FloatField(verbose_name='Значение цены')),
                ('convertedFromCurrency', models.CharField(blank=True, choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, null=True, verbose_name='Валюта исходной цены')),
                ('convertedFromValue', models.FloatField(blank=True, null=True, verbose_name='Значение исходной цены')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AppliedPromotion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('promotionId', models.CharField(blank=True, max_length=50, null=True, verbose_name='ID акции на товар')),
            ],
            options={
                'verbose_name': 'Акция на товар из заказа',
                'verbose_name_plural': 'Акции на товар из заказа',
            },
        ),
        migrations.CreateModel(
            name='CancelRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cancelCompletedDate', models.DateTimeField(blank=True, null=True)),
                ('cancelInitiator', models.CharField(blank=True, max_length=255, null=True)),
                ('cancelReason', models.CharField(blank=True, max_length=255, null=True)),
                ('cancelRequestedDate', models.DateTimeField()),
                ('cancelRequestId', models.CharField(blank=True, max_length=255, null=True)),
                ('cancelRequestState', models.CharField(blank=True, choices=[('COMPLETED', 'Продавец подтвердил отмену заказа'), ('REJECTED', 'Продавец отказал в отмене заказа'), ('REQUESTED', 'Запрос на отмену заказа ожидает ответа от продавца')], max_length=9, null=True)),
            ],
            options={
                'verbose_name': 'Запрос на отмену заказа от покупателя',
                'verbose_name_plural': 'Запросы на отмену заказов от покупателей',
            },
        ),
        migrations.CreateModel(
            name='CancelStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cancelledDate', models.DateTimeField(blank=True, null=True, verbose_name='Дата отмены заказа')),
                ('cancelState', models.CharField(choices=[('CANCELED', 'Заказ отменён'), ('IN_PROGRESS', 'Сделан хотя бы один запрос на отмену заказа'), ('NONE_REQUESTED', 'Запросов на отмену заказа нет')], max_length=14)),
            ],
            options={
                'verbose_name': 'Статус отмены заказа',
                'verbose_name_plural': 'Статусы отменов заказов',
            },
        ),
        migrations.CreateModel(
            name='ContactAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('addressLine1', models.CharField(blank=True, max_length=128, null=True, verbose_name='Первая строка адреса')),
                ('addressLine2', models.CharField(blank=True, max_length=128, null=True, verbose_name='Вторая строка адреса')),
                ('city', models.CharField(blank=True, max_length=128, null=True, verbose_name='Населённый пункт')),
                ('countryCode', models.CharField(choices=[('AD', 'Andorra'), ('AE', 'United Arab Emirates'), ('AF', 'Afghanistan'), ('AG', 'Antigua and Barbuda'), ('AI', 'Anguilla'), ('AL', 'Albania'), ('AM', 'Armenia'), ('AN', 'Netherlands Antilles'), ('AO', 'Angola'), ('AQ', 'Antarctica'), ('AR', 'Argentina'), ('AS', 'American Samoa'), ('AT', 'Austria'), ('AU', 'Australia'), ('AW', 'Aruba'), ('AX', 'Aland Islands'), ('AZ', 'Azerbaijan'), ('BA', 'Bosnia and Herzegovina'), ('BB', 'Barbados'), ('BD', 'Bangladesh'), ('BE', 'Belgium'), ('BF', 'Burkina Faso'), ('BG', 'Bulgaria'), ('BH', 'Bahrain'), ('BI', 'Burundi'), ('BJ', 'Benin'), ('BL', 'Saint Barthelemy'), ('BM', 'Bermuda'), ('BN', 'Brunei Darussalam'), ('BO', 'Bolivia'), ('BQ', 'Bonaire, Sint Eustatius, and Saba'), ('BR', 'Brazil'), ('BS', 'Bahamas'), ('BT', 'Bhutan'), ('BV', 'Bouvet Island'), ('BW', 'Botswana'), ('BY', 'Belarus'), ('BZ', 'Belize'), ('CA', 'Canada'), ('CC', 'Cocos (Keeling) Islands'), ('CD', 'The Democratic Republic of the Congo'), ('CF', 'Central African Republic'), ('CG', 'Congo'), ('CH', 'Switzerland'), ('CI', "Cote d'Ivoire"), ('CK', 'Cook Islands'), ('CL', 'Chile'), ('CM', 'Cameroon'), ('CN', 'China'), ('CO', 'Colombia'), ('CR', 'Costa Rica'), ('CU', 'Cuba'), ('CV', 'Cape Verde'), ('CW', 'Curacao'), ('CX', 'Christmas Island'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DE', 'Germany'), ('DJ', 'Djibouti'), ('DK', 'Denmark'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('DZ', 'Algeria'), ('EC', 'Ecuador'), ('EE', 'Estonia'), ('EG', 'Egypt'), ('EH', 'Western Sahara'), ('ER', 'Eritrea'), ('ES', 'Spain'), ('ET', 'Ethiopia'), ('FI', 'Finland'), ('FJ', 'Fiji'), ('FK', 'Falkland Islands (Malvinas)'), ('FM', 'Federated States of Micronesia'), ('FO', 'Faroe Islands'), ('FR', 'France'), ('GA', 'Gabon'), ('GB', 'United Kingdom'), ('GD', 'Grenada'), ('GE', 'Georgia'), ('GF', 'French Guiana'), ('GG', 'Guernsey'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GL', 'Greenland'), ('GM', 'Gambia'), ('GN', 'Guinea'), ('GP', 'Guadeloupe'), ('GQ', 'Equatorial Guinea'), ('GR', 'Greece'), ('GS', 'South Georgia and the South Sandwich Islands'), ('GT', 'Guatemala'), ('GU', 'Guam'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HK', 'Hong Kong'), ('HM', 'Heard Island and McDonald Islands'), ('HN', 'Honduras'), ('HR', 'Croatia'), ('HT', 'Haiti'), ('HU', 'Hungary'), ('ID', 'Indonesia'), ('IE', 'Ireland'), ('IL', 'Israel'), ('IM', 'Isle of Man'), ('IN', 'India'), ('IO', 'British Indian Ocean Territory'), ('IQ', 'Iraq'), ('IR', 'Islamic Republic of Iran'), ('IS', 'Iceland'), ('IT', 'Italy'), ('JE', 'Jersey'), ('JM', 'Jamaica'), ('JO', 'Jordan'), ('JP', 'Japan'), ('KE', 'Kenya'), ('KG', 'Kyrgyzstan'), ('KH', 'Cambodia'), ('KI', 'Kiribati'), ('KM', 'Comoros'), ('KN', 'Saint Kitts and Nevis'), ('KP', "Democratic People's Republic of Korea"), ('KR', 'Republic of Korea'), ('KW', 'Kuwait'), ('KY', 'Cayman Islands'), ('KZ', 'Kazakhstan'), ('LA', "Lao People's Democratic Republic"), ('LB', 'Lebanon'), ('LC', 'Saint Lucia'), ('LI', 'Liechtenstein'), ('LK', 'Sri Lanka'), ('LR', 'Liberia'), ('LS', 'Lesotho'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('LV', 'atvia'), ('LY', 'Libyan Arab Jamahiriya'), ('MA', 'Morocco'), ('MC', 'Monaco'), ('MD', 'Republic of Moldova'), ('ME', 'Montenegro'), ('MF', 'Saint Martin (French part)'), ('MG', 'Madagascar'), ('MH', 'Marshall Islands'), ('MK', 'The Former Yugoslav Republic of Macedonia'), ('ML', 'Mali'), ('MM', 'Myanmar'), ('MN', 'Mongolia'), ('MO', 'Macao'), ('MP', 'Northern Mariana Islands'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MS', 'Montserrat'), ('MT', 'Malta'), ('MU', 'Mauritius'), ('MV', 'Maldives'), ('MW', 'Malawi'), ('MX', 'Mexico'), ('MY', 'Malaysia'), ('MZ', 'Mozambique'), ('NA', 'Namibia'), ('NC', 'New Caledonia'), ('NE', 'Niger'), ('NF', 'Norfolk Island'), ('NG', 'Nigeria'), ('NI', 'Nicaragua'), ('NL', 'Netherlands'), ('NO', 'Norway'), ('NP', 'Nepal'), ('NR', 'Nauru'), ('NU', 'Niue'), ('NZ', 'New Zealand'), ('OM', 'Oman'), ('PA', 'Panama'), ('PE', 'Peru'), ('PF', 'French Polynesia, Includes Tahiti'), ('PG', 'Papua New Guinea'), ('PH', 'Philippines'), ('PK', 'Pakistan'), ('PL', 'Poland'), ('PM', 'Saint Pierre and Miquelon'), ('PN', 'Pitcairn'), ('PR', 'Puerto Rico'), ('PS', 'Palestinian territory Occupied'), ('PT', 'Portugal'), ('PW', 'Palau'), ('PY', 'Paraguay'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RS', 'Serbia'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('SA', 'Saudi Arabia'), ('SB', 'Solomon Islands'), ('SC', 'Seychelles'), ('SD', 'Sudan'), ('SE', 'Sweden'), ('SG', 'Singapore'), ('SH', 'Saint Helena'), ('SI', 'Slovenia'), ('SJ', 'Svalbard and Jan Mayen'), ('SK', 'Slovakia'), ('SL', 'Sierra Leone'), ('SM', 'San Marino'), ('SN', 'Senegal'), ('SO', 'Somalia'), ('SR', 'Suriname'), ('ST', 'Sao Tome and Principe'), ('SV', 'El Salvador'), ('SX', 'Sint Maarten (Dutch part)'), ('SY', 'Syrian Arab Republic'), ('SZ', 'Swaziland'), ('TC', 'Turks and Caicos Islands'), ('TD', 'Chad'), ('TF', 'French Southern Territories'), ('TG', 'Togo'), ('TH', 'Thailand'), ('TJ', 'Tajikistan'), ('TK', 'Tokelau'), ('TL', 'Timor-Leste'), ('TM', 'Turkmenistan'), ('TN', 'Tunisia'), ('TO', 'Tonga'), ('TR', 'Turkey'), ('TT', 'Trinidad and Tobago'), ('TV', 'Tuvalu'), ('TW', 'Taiwan'), ('TZ', 'Tanzania'), ('UA', 'Ukraine'), ('UG', 'Uganda'), ('UM', 'United States Minor Outlying Islands'), ('US', 'United States'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VA', 'Holy See (Vatican City state)'), ('VC', 'Saint Vincent and the Grenadines'), ('VE', 'Venezuela'), ('VG', 'British Virgin Islands'), ('VI', 'The US Virgin Islands'), ('VN', 'Vietnam'), ('VU', 'Vanuatu'), ('WF', 'Wallis and Futuna'), ('WS', 'Samoa'), ('YE', 'Yemen'), ('YT', 'Mayotte'), ('ZA', 'South Africa'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], max_length=2, verbose_name='Страна')),
                ('county', models.CharField(blank=True, max_length=50, null=True, verbose_name='Округ')),
                ('postalCode', models.CharField(blank=True, max_length=16, null=True, verbose_name='Почтовый индекс')),
                ('stateOrProvince', models.CharField(blank=True, max_length=128, null=True, verbose_name='Штат или провинция')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DeliveryCost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, verbose_name='Валюта')),
                ('value', models.FloatField(verbose_name='Значение цены')),
                ('convertedFromCurrency', models.CharField(blank=True, choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, null=True, verbose_name='Валюта исходной цены')),
                ('convertedFromValue', models.FloatField(blank=True, null=True, verbose_name='Значение исходной цены')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DeliveryDiscount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, verbose_name='Валюта')),
                ('value', models.FloatField(verbose_name='Значение цены')),
                ('convertedFromCurrency', models.CharField(blank=True, choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, null=True, verbose_name='Валюта исходной цены')),
                ('convertedFromValue', models.FloatField(blank=True, null=True, verbose_name='Значение исходной цены')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DiscountAmount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, verbose_name='Валюта')),
                ('value', models.FloatField(verbose_name='Значение цены')),
                ('convertedFromCurrency', models.CharField(blank=True, choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, null=True, verbose_name='Валюта исходной цены')),
                ('convertedFromValue', models.FloatField(blank=True, null=True, verbose_name='Значение исходной цены')),
            ],
            options={
                'verbose_name': 'Сумма скидки',
                'verbose_name_plural': 'Сумма скидок',
            },
        ),
        migrations.CreateModel(
            name='DiscountedLineItemCost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, verbose_name='Валюта')),
                ('value', models.FloatField(verbose_name='Значение цены')),
                ('convertedFromCurrency', models.CharField(blank=True, choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, null=True, verbose_name='Валюта исходной цены')),
                ('convertedFromValue', models.FloatField(blank=True, null=True, verbose_name='Значение исходной цены')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EbayOrder',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('buyer_username', models.CharField(max_length=100, verbose_name='ID покупателя')),
                ('buyerCheckoutNotes', models.CharField(blank=True, default='', max_length=200, verbose_name='Комментарии покупателя')),
                ('creationDate', models.DateTimeField(verbose_name='Дата и время создания заказа')),
                ('ebayCollectAndRemitTax', models.BooleanField(blank=True, null=True, verbose_name='eBay взимает налог')),
                ('_fulfillment_hrefs', models.TextField(default='[]', verbose_name='Ссылки для вызова API (getShippingFulfillment)')),
                ('lastModifiedDate', models.DateTimeField(verbose_name='Дата и время последнего изменения заказа')),
                ('legacyOrderId', models.CharField(max_length=50, verbose_name='Legacy order ID')),
                ('orderFulfillmentStatus', models.CharField(choices=[('FULFILLED', 'Фулфилмент завершен'), ('IN_PROGRESS', 'Фулфилмент в процессе'), ('NOT_STARTED', 'Фулфилмент на начат')], max_length=50, verbose_name='Статус фулфилмента заказа')),
                ('orderId', models.CharField(max_length=50, verbose_name='ID заказа')),
                ('orderPaymentStatus', models.CharField(choices=[('FAILED', 'Неудача'), ('FULLY_REFUNDED', 'Деньги в полном объеме возвращены покупателю'), ('PAID', 'Оплачено'), ('PARTIALLY_REFUNDED', 'Деньги частично возвращены покупателю'), ('PENDING', 'Ожидание')], max_length=50, verbose_name='Статус оплаты заказа')),
                ('salesRecordReference', models.CharField(blank=True, max_length=100, null=True, verbose_name='Sales record reference')),
                ('sellerId', models.CharField(max_length=100, verbose_name='ID продавца')),
            ],
            options={
                'verbose_name': 'Заказ с eBay',
                'verbose_name_plural': 'Заказы с eBay',
            },
        ),
        migrations.CreateModel(
            name='EbayOrderLineItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legacyItemId', models.CharField(max_length=100, verbose_name='Legacy ID товара')),
                ('legacyVariationId', models.CharField(blank=True, max_length=100, null=True, verbose_name='Legacy ID товара из группы')),
                ('lineItemFulfillmentStatus', models.CharField(choices=[('FULFILLED', 'Фулфилмент завершен'), ('IN_PROGRESS', 'Фулфилмент в процессе'), ('NOT_STARTED', 'Фулфилмент не начат')], max_length=30, verbose_name='Статус фулфилмента товара')),
                ('lineItemId', models.CharField(max_length=100, verbose_name='ID товара')),
                ('listingMarketplaceId', models.CharField(choices=[('EBAY_US', 'US site (ebay.com)'), ('EBAY_MOTORS_US', 'US eBay Motors site (ebay.com/motors)'), ('EBAY_CA', 'Canada (English) site (ebay.ca)'), ('EBAY_GB', 'UK site (ebay.co.uk)'), ('EBAY_AU', 'Australia site (ebay.com.au)'), ('EBAY_AT', 'Austria site (ebay.at)'), ('EBAY_BE_FR', 'French version of the Belgium site (befr.ebay.be)'), ('EBAY_FR', 'France site (ebay.fr)'), ('EBAY_DE', 'Germany site (ebay.de)'), ('EBAY_IT', 'Italy site (ebay.it)'), ('EBAY_BE_NL', 'Dutch version of the Belgium site (https://www.benl.ebay.be/)'), ('EBAY_NL', 'Netherlands site (ebay.nl)'), ('EBAY_ES', 'Spain site (ebay.es)'), ('EBAY_CH', 'Switzerland site (ebay.ch)'), ('EBAY_TW', 'Taiwan site (ebay.com/tw)'), ('EBAY_CZ', 'Czech Republic site (ebay.com/sch/Czech-Republic)'), ('EBAY_DK', 'Denmark site (ebay.com/sch/Denmark)'), ('EBAY_FI', 'Finland site (ebay.com/sch/Finland)'), ('EBAY_GR', 'Greece site (ebay.com/sch/Greece)'), ('EBAY_HK', 'Hong Kong site (ebay.com.hk)'), ('EBAY_HU', 'Hungary site (ebay.com/sch/Hungary)'), ('EBAY_IN', 'India site (ebay.in)'), ('EBAY_ID', 'Indonesia site (id.ebay.com)'), ('EBAY_IE', 'Ireland site (ebay.ie)'), ('EBAY_IL', 'Israel site (ebay.com/sch/Israel)'), ('EBAY_MY', 'Malaysia site (ebay.com/my)'), ('EBAY_NZ', 'New Zealand site (ebay.com/sch/New-Zealand)'), ('EBAY_NO', 'Norway site (ebay.com/sch/Norway)'), ('EBAY_PH', 'Philippines site (ebay.ph)'), ('EBAY_PL', 'Poland site (ebay.pl)'), ('EBAY_PT', 'Portugal site (ebay.com/sch/Portugal)'), ('EBAY_PR', 'Puerto Rico site (ebay.com/sch/Puerto-Rico)'), ('EBAY_RU', 'Russia site (ebay.com/sch/Russia)'), ('EBAY_SG', 'Singapore site (ebay.com/sg)'), ('EBAY_ZA', 'South Africa site (ebay.com/sch/South-Africa)'), ('EBAY_SE', 'Sweden site (ebay.com/sch/Sweden)'), ('EBAY_TH', 'Thailand site (export.ebay.co.th)'), ('EBAY_VN', 'Vietnam site (ebay.vn)'), ('EBAY_CN', 'China site (ebay.com/sch/China)'), ('EBAY_PE', 'Peru site (ebay.com/sch/Peru)'), ('EBAY_CA_FR', 'Canada (English) site (https://www.cafr.ebay.ca/)'), ('EBAY_JP', 'Japan site (ebay.co.jp)')], max_length=30, verbose_name='Уникальный ID маркетплейса на котором продукт опубликован')),
                ('purchaseMarketplaceId', models.CharField(choices=[('EBAY_US', 'US site (ebay.com)'), ('EBAY_MOTORS_US', 'US eBay Motors site (ebay.com/motors)'), ('EBAY_CA', 'Canada (English) site (ebay.ca)'), ('EBAY_GB', 'UK site (ebay.co.uk)'), ('EBAY_AU', 'Australia site (ebay.com.au)'), ('EBAY_AT', 'Austria site (ebay.at)'), ('EBAY_BE_FR', 'French version of the Belgium site (befr.ebay.be)'), ('EBAY_FR', 'France site (ebay.fr)'), ('EBAY_DE', 'Germany site (ebay.de)'), ('EBAY_IT', 'Italy site (ebay.it)'), ('EBAY_BE_NL', 'Dutch version of the Belgium site (https://www.benl.ebay.be/)'), ('EBAY_NL', 'Netherlands site (ebay.nl)'), ('EBAY_ES', 'Spain site (ebay.es)'), ('EBAY_CH', 'Switzerland site (ebay.ch)'), ('EBAY_TW', 'Taiwan site (ebay.com/tw)'), ('EBAY_CZ', 'Czech Republic site (ebay.com/sch/Czech-Republic)'), ('EBAY_DK', 'Denmark site (ebay.com/sch/Denmark)'), ('EBAY_FI', 'Finland site (ebay.com/sch/Finland)'), ('EBAY_GR', 'Greece site (ebay.com/sch/Greece)'), ('EBAY_HK', 'Hong Kong site (ebay.com.hk)'), ('EBAY_HU', 'Hungary site (ebay.com/sch/Hungary)'), ('EBAY_IN', 'India site (ebay.in)'), ('EBAY_ID', 'Indonesia site (id.ebay.com)'), ('EBAY_IE', 'Ireland site (ebay.ie)'), ('EBAY_IL', 'Israel site (ebay.com/sch/Israel)'), ('EBAY_MY', 'Malaysia site (ebay.com/my)'), ('EBAY_NZ', 'New Zealand site (ebay.com/sch/New-Zealand)'), ('EBAY_NO', 'Norway site (ebay.com/sch/Norway)'), ('EBAY_PH', 'Philippines site (ebay.ph)'), ('EBAY_PL', 'Poland site (ebay.pl)'), ('EBAY_PT', 'Portugal site (ebay.com/sch/Portugal)'), ('EBAY_PR', 'Puerto Rico site (ebay.com/sch/Puerto-Rico)'), ('EBAY_RU', 'Russia site (ebay.com/sch/Russia)'), ('EBAY_SG', 'Singapore site (ebay.com/sg)'), ('EBAY_ZA', 'South Africa site (ebay.com/sch/South-Africa)'), ('EBAY_SE', 'Sweden site (ebay.com/sch/Sweden)'), ('EBAY_TH', 'Thailand site (export.ebay.co.th)'), ('EBAY_VN', 'Vietnam site (ebay.vn)'), ('EBAY_CN', 'China site (ebay.com/sch/China)'), ('EBAY_PE', 'Peru site (ebay.com/sch/Peru)'), ('EBAY_CA_FR', 'Canada (English) site (https://www.cafr.ebay.ca/)'), ('EBAY_JP', 'Japan site (ebay.co.jp)')], max_length=30, verbose_name='Уникальный ID маркетплейса на котором продукт опубликован')),
                ('quantity', models.PositiveIntegerField(verbose_name='Количество единиц товара')),
                ('sku', models.CharField(blank=True, max_length=100, null=True, verbose_name='SKU товара')),
                ('soldFormat', models.CharField(choices=[('AUCTION', 'Аукцион'), ('FIXED_PRICE', 'Фиксированная цена'), ('OTHER', 'Другое'), ('SECOND_CHANCE_OFFER', 'Second chance offer')], max_length=30, verbose_name='Формат продажи товара')),
                ('title', models.CharField(max_length=100, verbose_name='Название товара')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='line_items', related_query_name='line_item', to='ebay_order.EbayOrder', verbose_name='Заказ')),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ebay_listing.EbayListing')),
            ],
            options={
                'verbose_name': 'Товар из заказа',
                'verbose_name_plural': 'Товары из заказа',
            },
        ),
        migrations.CreateModel(
            name='EbayShippingFulfillment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False)),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False)),
                ('status', model_utils.fields.StatusField(choices=[('draft', 'draft'), ('ready_to_publish', 'ready_to_publish'), ('published', 'published'), ('update_required', 'update_required')], default='draft', max_length=100, no_check_for_status=True)),
                ('published_at', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', when={'published'})),
                ('fulfillmentId', models.CharField(blank=True, max_length=30, null=True, verbose_name='ID фулфилмента')),
                ('shippedDate', models.DateTimeField(blank=True, null=True, verbose_name='Дата и время отправки')),
                ('shippingCarrierCode', models.CharField(blank=True, choices=[('Other', 'Use this code for any carrier not listed here.'), ('GENERIC', 'GENERIC'), ('DHL', 'DHL Express'), ('DHLEKB', 'DHL EKB'), ('DHLEXPRESS', 'DHL Express'), ('DHLGlobalMail', 'DHL Global Mail'), ('UPS', 'United Parcel Service'), ('USPS', 'U.S. Postal Service'), ('GENERIC', 'Generic')], max_length=30, null=True, verbose_name='Курьерская служба')),
                ('shippingServiceCode', models.CharField(blank=True, max_length=100, null=True, verbose_name='Курьерская служба')),
                ('shipmentTrackingNumber', models.CharField(blank=True, max_length=30, null=True, verbose_name='Трекинговый номер')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shipping_fulfillments', related_query_name='shipping_fulfillment', to='ebay_order.EbayOrder', verbose_name='Заказ eBay')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FulfillmentStartInstruction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('destinationTimeZone', models.CharField(blank=True, max_length=30, null=True)),
                ('ebaySupportedFulfillment', models.BooleanField(blank=True, null=True, verbose_name="eBay's Global Shipping Program")),
                ('fulfillmentInstructionsType', models.CharField(choices=[('DIGITAL', 'Цифровой вид'), ('PREPARE_FOR_PICKUP', 'Готовится к In-Store Pickup'), ('SELLER_DEFINED', 'Определяется продавцом'), ('SHIP_TO', 'Отправляется продавцом')], max_length=30, verbose_name='Тип метода фулфилмента')),
                ('maxEstimatedDeliveryDate', models.DateTimeField(blank=True, null=True, verbose_name='Наиболее поздние дата и время доставки')),
                ('minEstimatedDeliveryDate', models.DateTimeField(blank=True, null=True, verbose_name='Наиболее ранние дата и время доставки')),
                ('merchantLocationKey', models.CharField(blank=True, max_length=36, null=True, unique=True, verbose_name='ID склада товаров продавца')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fulfillment_start_instructions', related_query_name='fulfillment_start_instruction', to='ebay_order.EbayOrder', verbose_name='Заказ')),
            ],
            options={
                'verbose_name': 'Данные о фулфилменте заказа',
                'verbose_name_plural': 'Данные о фулфилменте заказа',
            },
        ),
        migrations.CreateModel(
            name='LineItemDeliveryCost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('line_item', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='delivery_cost', to='ebay_order.EbayOrderLineItem')),
            ],
        ),
        migrations.CreateModel(
            name='LineItemRefund',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('refundDate', models.DateTimeField(blank=True, null=True)),
                ('refundId', models.CharField(blank=True, max_length=255, null=True)),
                ('refundReferenceId', models.CharField(blank=True, max_length=100, null=True)),
                ('line_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='refunds', related_query_name='refund', to='ebay_order.EbayOrderLineItem')),
            ],
        ),
        migrations.CreateModel(
            name='LineItemTax',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('line_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='taxes', related_query_name='tax', to='ebay_order.EbayOrderLineItem')),
            ],
        ),
        migrations.CreateModel(
            name='OrderRefund',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('refundDate', models.DateTimeField(blank=True, null=True)),
                ('refundId', models.CharField(blank=True, max_length=255, null=True)),
                ('refundReferenceId', models.CharField(blank=True, max_length=100, null=True)),
                ('refundStatus', models.CharField(blank=True, choices=[('FAILED', 'Неудача'), ('PENDING', 'Ожидание'), ('REFUNDED', 'Деньги возвращены')], max_length=30, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('paymentDate', models.DateTimeField(blank=True, null=True)),
                ('paymentMethod', models.CharField(choices=[('CREDIT_CARD', 'Банковская карта'), ('PAYPAL', 'Paypal')], max_length=30)),
                ('paymentReferenceId', models.CharField(blank=True, max_length=255, null=True)),
                ('paymentStatus', models.CharField(choices=[('FAILED', 'Неудача'), ('PAID', 'Оплачено'), ('PENDING', 'Ожидание')], max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='PaymentHold',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expectedReleaseDate', models.DateTimeField(blank=True, null=True)),
                ('holdReason', models.CharField(blank=True, max_length=255, null=True)),
                ('holdState', models.CharField(blank=True, choices=[('HELD', 'Заморожено'), ('HELD_PENDING', 'Ожидается заморозка'), ('NOT_HELD', 'Не заморожено'), ('RELEASE_CONFIRMED', 'Подтверждено размораживание'), ('RELEASE_FAILED', 'Неудачное размораживание'), ('RELEASE_PENDING', 'Ожидается размораживание'), ('RELEASED', 'Разморожено')], max_length=30, null=True)),
                ('releaseDate', models.DateTimeField(blank=True, null=True)),
                ('payment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_holds', related_query_name='payment_hold', to='ebay_order.Payment')),
            ],
        ),
        migrations.CreateModel(
            name='PaymentSummary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shippingServiceCode', models.CharField(max_length=100, verbose_name='ID службы доставки')),
                ('order', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='payment_summary', to='ebay_order.EbayOrder')),
            ],
        ),
        migrations.CreateModel(
            name='PricingSummary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='pricing_summary', to='ebay_order.EbayOrder')),
            ],
        ),
        migrations.CreateModel(
            name='ShippingStep',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shippingCarrierCode', models.CharField(blank=True, choices=[('Other', 'Use this code for any carrier not listed here.'), ('GENERIC', 'GENERIC'), ('DHL', 'DHL Express'), ('DHLEKB', 'DHL EKB'), ('DHLEXPRESS', 'DHL Express'), ('DHLGlobalMail', 'DHL Global Mail'), ('UPS', 'United Parcel Service'), ('USPS', 'U.S. Postal Service'), ('GENERIC', 'Generic')], max_length=100, null=True, verbose_name='ID курьерской службы')),
                ('shippingServiceCode', models.CharField(max_length=100)),
                ('shipToReferenceId', models.CharField(blank=True, max_length=255, null=True)),
                ('fulfillment_start_instruction', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='shipping_step', to='ebay_order.FulfillmentStartInstruction')),
            ],
        ),
        migrations.CreateModel(
            name='TotalDueSeller',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, verbose_name='Валюта')),
                ('value', models.FloatField(verbose_name='Значение цены')),
                ('convertedFromCurrency', models.CharField(blank=True, choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, null=True, verbose_name='Валюта исходной цены')),
                ('convertedFromValue', models.FloatField(blank=True, null=True, verbose_name='Значение исходной цены')),
                ('payment_summary', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='total_due_seller', to='ebay_order.PaymentSummary')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Total',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, verbose_name='Валюта')),
                ('value', models.FloatField(verbose_name='Значение цены')),
                ('convertedFromCurrency', models.CharField(blank=True, choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, null=True, verbose_name='Валюта исходной цены')),
                ('convertedFromValue', models.FloatField(blank=True, null=True, verbose_name='Значение исходной цены')),
                ('pricing_summary', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='total', to='ebay_order.PricingSummary')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tax',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, verbose_name='Валюта')),
                ('value', models.FloatField(verbose_name='Значение цены')),
                ('convertedFromCurrency', models.CharField(blank=True, choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, null=True, verbose_name='Валюта исходной цены')),
                ('convertedFromValue', models.FloatField(blank=True, null=True, verbose_name='Значение исходной цены')),
                ('pricing_summary', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='tax', to='ebay_order.PricingSummary')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ShipTo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('companyName', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='E-mail покупателя')),
                ('fullName', models.CharField(max_length=100, verbose_name='Полное имя покупателя')),
                ('phoneNumber', models.CharField(blank=True, max_length=30, null=True, verbose_name='Телефонный номер покупателя')),
                ('shipping_step', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ship_to', to='ebay_order.ShippingStep')),
            ],
        ),
        migrations.CreateModel(
            name='ShippingIntermediationFee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, verbose_name='Валюта')),
                ('value', models.FloatField(verbose_name='Значение цены')),
                ('convertedFromCurrency', models.CharField(blank=True, choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, null=True, verbose_name='Валюта исходной цены')),
                ('convertedFromValue', models.FloatField(blank=True, null=True, verbose_name='Значение исходной цены')),
                ('delivery_cost', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='shipping_intermediation_fee', to='ebay_order.LineItemDeliveryCost')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ShippingCost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, verbose_name='Валюта')),
                ('value', models.FloatField(verbose_name='Значение цены')),
                ('convertedFromCurrency', models.CharField(blank=True, choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, null=True, verbose_name='Валюта исходной цены')),
                ('convertedFromValue', models.FloatField(blank=True, null=True, verbose_name='Значение исходной цены')),
                ('delivery_cost', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='shipping_cost', to='ebay_order.LineItemDeliveryCost')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SellerActionsToRelease',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sellerActionToRelease', models.CharField(blank=True, max_length=255, null=True)),
                ('payment_hold', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seller_actions_to_release', related_query_name='seller_action_to_release', to='ebay_order.PaymentHold')),
            ],
        ),
        migrations.CreateModel(
            name='PriceSubtotal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, verbose_name='Валюта')),
                ('value', models.FloatField(verbose_name='Значение цены')),
                ('convertedFromCurrency', models.CharField(blank=True, choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, null=True, verbose_name='Валюта исходной цены')),
                ('convertedFromValue', models.FloatField(blank=True, null=True, verbose_name='Значение исходной цены')),
                ('pricing_summary', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='price_subtotal', to='ebay_order.PricingSummary')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PriceDiscountSubtotal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, verbose_name='Валюта')),
                ('value', models.FloatField(verbose_name='Значение цены')),
                ('convertedFromCurrency', models.CharField(blank=True, choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, null=True, verbose_name='Валюта исходной цены')),
                ('convertedFromValue', models.FloatField(blank=True, null=True, verbose_name='Значение исходной цены')),
                ('pricing_summary', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='price_discount_subtotal', to='ebay_order.PricingSummary')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PaymentAmount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, verbose_name='Валюта')),
                ('value', models.FloatField(verbose_name='Значение цены')),
                ('convertedFromCurrency', models.CharField(blank=True, choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, null=True, verbose_name='Валюта исходной цены')),
                ('convertedFromValue', models.FloatField(blank=True, null=True, verbose_name='Значение исходной цены')),
                ('payment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='amount', to='ebay_order.Payment')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='payment',
            name='payment_summary',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', related_query_name='payment', to='ebay_order.PaymentSummary'),
        ),
        migrations.CreateModel(
            name='OrderRefundAmount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, verbose_name='Валюта')),
                ('value', models.FloatField(verbose_name='Значение цены')),
                ('convertedFromCurrency', models.CharField(blank=True, choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, null=True, verbose_name='Валюта исходной цены')),
                ('convertedFromValue', models.FloatField(blank=True, null=True, verbose_name='Значение исходной цены')),
                ('order_refund', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='amount', to='ebay_order.OrderRefund')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='orderrefund',
            name='payment_summary',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='refunds', related_query_name='refund', to='ebay_order.PaymentSummary'),
        ),
        migrations.CreateModel(
            name='LineItemTotal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, verbose_name='Валюта')),
                ('value', models.FloatField(verbose_name='Значение цены')),
                ('convertedFromCurrency', models.CharField(blank=True, choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, null=True, verbose_name='Валюта исходной цены')),
                ('convertedFromValue', models.FloatField(blank=True, null=True, verbose_name='Значение исходной цены')),
                ('line_item', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='total', to='ebay_order.EbayOrderLineItem')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LineItemTaxAmount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, verbose_name='Валюта')),
                ('value', models.FloatField(verbose_name='Значение цены')),
                ('convertedFromCurrency', models.CharField(blank=True, choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, null=True, verbose_name='Валюта исходной цены')),
                ('convertedFromValue', models.FloatField(blank=True, null=True, verbose_name='Значение исходной цены')),
                ('tax', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='amount', to='ebay_order.LineItemTax')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LineItemRefundAmount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, verbose_name='Валюта')),
                ('value', models.FloatField(verbose_name='Значение цены')),
                ('convertedFromCurrency', models.CharField(blank=True, choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, null=True, verbose_name='Валюта исходной цены')),
                ('convertedFromValue', models.FloatField(blank=True, null=True, verbose_name='Значение исходной цены')),
                ('line_item_refund', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='amount', to='ebay_order.LineItemRefund')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LineItemProperties',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('buyerProtection', models.BooleanField()),
                ('fromBestOffer', models.BooleanField(blank=True, null=True)),
                ('soldViaAdCampaign', models.BooleanField(blank=True, null=True)),
                ('line_item', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='properties', to='ebay_order.EbayOrderLineItem')),
            ],
        ),
        migrations.CreateModel(
            name='LineItemFulfillmentInstructions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('destinationTimeZone', models.CharField(blank=True, max_length=255, null=True)),
                ('guaranteedDelivery', models.BooleanField()),
                ('maxEstimatedDeliveryDate', models.DateTimeField(blank=True, null=True)),
                ('minEstimatedDeliveryDate', models.DateTimeField(blank=True, null=True)),
                ('shipByDate', models.DateTimeField(blank=True, null=True)),
                ('sourceTimeZone', models.CharField(blank=True, max_length=30, null=True)),
                ('line_item', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='line_item_fulfillment_instructions', to='ebay_order.EbayOrderLineItem')),
            ],
        ),
        migrations.CreateModel(
            name='LineItemCost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, verbose_name='Валюта')),
                ('value', models.FloatField(verbose_name='Значение цены')),
                ('convertedFromCurrency', models.CharField(blank=True, choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, null=True, verbose_name='Валюта исходной цены')),
                ('convertedFromValue', models.FloatField(blank=True, null=True, verbose_name='Значение исходной цены')),
                ('line_item', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='line_item_cost', to='ebay_order.EbayOrderLineItem')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ImportCharges',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, verbose_name='Валюта')),
                ('value', models.FloatField(verbose_name='Значение цены')),
                ('convertedFromCurrency', models.CharField(blank=True, choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, null=True, verbose_name='Валюта исходной цены')),
                ('convertedFromValue', models.FloatField(blank=True, null=True, verbose_name='Значение исходной цены')),
                ('delivery_cost', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='import_charges', to='ebay_order.LineItemDeliveryCost')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HoldAmount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, verbose_name='Валюта')),
                ('value', models.FloatField(verbose_name='Значение цены')),
                ('convertedFromCurrency', models.CharField(blank=True, choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, null=True, verbose_name='Валюта исходной цены')),
                ('convertedFromValue', models.FloatField(blank=True, null=True, verbose_name='Значение исходной цены')),
                ('payment_hold', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='amount', to='ebay_order.PaymentHold')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FinalDestinationAddress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('addressLine1', models.CharField(blank=True, max_length=128, null=True, verbose_name='Первая строка адреса')),
                ('addressLine2', models.CharField(blank=True, max_length=128, null=True, verbose_name='Вторая строка адреса')),
                ('city', models.CharField(blank=True, max_length=128, null=True, verbose_name='Населённый пункт')),
                ('countryCode', models.CharField(choices=[('AD', 'Andorra'), ('AE', 'United Arab Emirates'), ('AF', 'Afghanistan'), ('AG', 'Antigua and Barbuda'), ('AI', 'Anguilla'), ('AL', 'Albania'), ('AM', 'Armenia'), ('AN', 'Netherlands Antilles'), ('AO', 'Angola'), ('AQ', 'Antarctica'), ('AR', 'Argentina'), ('AS', 'American Samoa'), ('AT', 'Austria'), ('AU', 'Australia'), ('AW', 'Aruba'), ('AX', 'Aland Islands'), ('AZ', 'Azerbaijan'), ('BA', 'Bosnia and Herzegovina'), ('BB', 'Barbados'), ('BD', 'Bangladesh'), ('BE', 'Belgium'), ('BF', 'Burkina Faso'), ('BG', 'Bulgaria'), ('BH', 'Bahrain'), ('BI', 'Burundi'), ('BJ', 'Benin'), ('BL', 'Saint Barthelemy'), ('BM', 'Bermuda'), ('BN', 'Brunei Darussalam'), ('BO', 'Bolivia'), ('BQ', 'Bonaire, Sint Eustatius, and Saba'), ('BR', 'Brazil'), ('BS', 'Bahamas'), ('BT', 'Bhutan'), ('BV', 'Bouvet Island'), ('BW', 'Botswana'), ('BY', 'Belarus'), ('BZ', 'Belize'), ('CA', 'Canada'), ('CC', 'Cocos (Keeling) Islands'), ('CD', 'The Democratic Republic of the Congo'), ('CF', 'Central African Republic'), ('CG', 'Congo'), ('CH', 'Switzerland'), ('CI', "Cote d'Ivoire"), ('CK', 'Cook Islands'), ('CL', 'Chile'), ('CM', 'Cameroon'), ('CN', 'China'), ('CO', 'Colombia'), ('CR', 'Costa Rica'), ('CU', 'Cuba'), ('CV', 'Cape Verde'), ('CW', 'Curacao'), ('CX', 'Christmas Island'), ('CY', 'Cyprus'), ('CZ', 'Czech Republic'), ('DE', 'Germany'), ('DJ', 'Djibouti'), ('DK', 'Denmark'), ('DM', 'Dominica'), ('DO', 'Dominican Republic'), ('DZ', 'Algeria'), ('EC', 'Ecuador'), ('EE', 'Estonia'), ('EG', 'Egypt'), ('EH', 'Western Sahara'), ('ER', 'Eritrea'), ('ES', 'Spain'), ('ET', 'Ethiopia'), ('FI', 'Finland'), ('FJ', 'Fiji'), ('FK', 'Falkland Islands (Malvinas)'), ('FM', 'Federated States of Micronesia'), ('FO', 'Faroe Islands'), ('FR', 'France'), ('GA', 'Gabon'), ('GB', 'United Kingdom'), ('GD', 'Grenada'), ('GE', 'Georgia'), ('GF', 'French Guiana'), ('GG', 'Guernsey'), ('GH', 'Ghana'), ('GI', 'Gibraltar'), ('GL', 'Greenland'), ('GM', 'Gambia'), ('GN', 'Guinea'), ('GP', 'Guadeloupe'), ('GQ', 'Equatorial Guinea'), ('GR', 'Greece'), ('GS', 'South Georgia and the South Sandwich Islands'), ('GT', 'Guatemala'), ('GU', 'Guam'), ('GW', 'Guinea-Bissau'), ('GY', 'Guyana'), ('HK', 'Hong Kong'), ('HM', 'Heard Island and McDonald Islands'), ('HN', 'Honduras'), ('HR', 'Croatia'), ('HT', 'Haiti'), ('HU', 'Hungary'), ('ID', 'Indonesia'), ('IE', 'Ireland'), ('IL', 'Israel'), ('IM', 'Isle of Man'), ('IN', 'India'), ('IO', 'British Indian Ocean Territory'), ('IQ', 'Iraq'), ('IR', 'Islamic Republic of Iran'), ('IS', 'Iceland'), ('IT', 'Italy'), ('JE', 'Jersey'), ('JM', 'Jamaica'), ('JO', 'Jordan'), ('JP', 'Japan'), ('KE', 'Kenya'), ('KG', 'Kyrgyzstan'), ('KH', 'Cambodia'), ('KI', 'Kiribati'), ('KM', 'Comoros'), ('KN', 'Saint Kitts and Nevis'), ('KP', "Democratic People's Republic of Korea"), ('KR', 'Republic of Korea'), ('KW', 'Kuwait'), ('KY', 'Cayman Islands'), ('KZ', 'Kazakhstan'), ('LA', "Lao People's Democratic Republic"), ('LB', 'Lebanon'), ('LC', 'Saint Lucia'), ('LI', 'Liechtenstein'), ('LK', 'Sri Lanka'), ('LR', 'Liberia'), ('LS', 'Lesotho'), ('LT', 'Lithuania'), ('LU', 'Luxembourg'), ('LV', 'atvia'), ('LY', 'Libyan Arab Jamahiriya'), ('MA', 'Morocco'), ('MC', 'Monaco'), ('MD', 'Republic of Moldova'), ('ME', 'Montenegro'), ('MF', 'Saint Martin (French part)'), ('MG', 'Madagascar'), ('MH', 'Marshall Islands'), ('MK', 'The Former Yugoslav Republic of Macedonia'), ('ML', 'Mali'), ('MM', 'Myanmar'), ('MN', 'Mongolia'), ('MO', 'Macao'), ('MP', 'Northern Mariana Islands'), ('MQ', 'Martinique'), ('MR', 'Mauritania'), ('MS', 'Montserrat'), ('MT', 'Malta'), ('MU', 'Mauritius'), ('MV', 'Maldives'), ('MW', 'Malawi'), ('MX', 'Mexico'), ('MY', 'Malaysia'), ('MZ', 'Mozambique'), ('NA', 'Namibia'), ('NC', 'New Caledonia'), ('NE', 'Niger'), ('NF', 'Norfolk Island'), ('NG', 'Nigeria'), ('NI', 'Nicaragua'), ('NL', 'Netherlands'), ('NO', 'Norway'), ('NP', 'Nepal'), ('NR', 'Nauru'), ('NU', 'Niue'), ('NZ', 'New Zealand'), ('OM', 'Oman'), ('PA', 'Panama'), ('PE', 'Peru'), ('PF', 'French Polynesia, Includes Tahiti'), ('PG', 'Papua New Guinea'), ('PH', 'Philippines'), ('PK', 'Pakistan'), ('PL', 'Poland'), ('PM', 'Saint Pierre and Miquelon'), ('PN', 'Pitcairn'), ('PR', 'Puerto Rico'), ('PS', 'Palestinian territory Occupied'), ('PT', 'Portugal'), ('PW', 'Palau'), ('PY', 'Paraguay'), ('QA', 'Qatar'), ('RE', 'Reunion'), ('RO', 'Romania'), ('RS', 'Serbia'), ('RU', 'Russian Federation'), ('RW', 'Rwanda'), ('SA', 'Saudi Arabia'), ('SB', 'Solomon Islands'), ('SC', 'Seychelles'), ('SD', 'Sudan'), ('SE', 'Sweden'), ('SG', 'Singapore'), ('SH', 'Saint Helena'), ('SI', 'Slovenia'), ('SJ', 'Svalbard and Jan Mayen'), ('SK', 'Slovakia'), ('SL', 'Sierra Leone'), ('SM', 'San Marino'), ('SN', 'Senegal'), ('SO', 'Somalia'), ('SR', 'Suriname'), ('ST', 'Sao Tome and Principe'), ('SV', 'El Salvador'), ('SX', 'Sint Maarten (Dutch part)'), ('SY', 'Syrian Arab Republic'), ('SZ', 'Swaziland'), ('TC', 'Turks and Caicos Islands'), ('TD', 'Chad'), ('TF', 'French Southern Territories'), ('TG', 'Togo'), ('TH', 'Thailand'), ('TJ', 'Tajikistan'), ('TK', 'Tokelau'), ('TL', 'Timor-Leste'), ('TM', 'Turkmenistan'), ('TN', 'Tunisia'), ('TO', 'Tonga'), ('TR', 'Turkey'), ('TT', 'Trinidad and Tobago'), ('TV', 'Tuvalu'), ('TW', 'Taiwan'), ('TZ', 'Tanzania'), ('UA', 'Ukraine'), ('UG', 'Uganda'), ('UM', 'United States Minor Outlying Islands'), ('US', 'United States'), ('UY', 'Uruguay'), ('UZ', 'Uzbekistan'), ('VA', 'Holy See (Vatican City state)'), ('VC', 'Saint Vincent and the Grenadines'), ('VE', 'Venezuela'), ('VG', 'British Virgin Islands'), ('VI', 'The US Virgin Islands'), ('VN', 'Vietnam'), ('VU', 'Vanuatu'), ('WF', 'Wallis and Futuna'), ('WS', 'Samoa'), ('YE', 'Yemen'), ('YT', 'Mayotte'), ('ZA', 'South Africa'), ('ZM', 'Zambia'), ('ZW', 'Zimbabwe')], max_length=2, verbose_name='Страна')),
                ('county', models.CharField(blank=True, max_length=50, null=True, verbose_name='Округ')),
                ('postalCode', models.CharField(blank=True, max_length=16, null=True, verbose_name='Почтовый индекс')),
                ('stateOrProvince', models.CharField(blank=True, max_length=128, null=True, verbose_name='Штат или провинция')),
                ('fulfillment_start_instruction', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='final_destination_address', to='ebay_order.FulfillmentStartInstruction')),
            ],
            options={
                'verbose_name': 'Конечный адрес назначения для доставки по Глобальной программе доставки',
                'verbose_name_plural': 'Конечные адреса назначения для доставки по Глобальной программе доставки',
            },
        ),
        migrations.CreateModel(
            name='Fee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, verbose_name='Валюта')),
                ('value', models.FloatField(verbose_name='Значение цены')),
                ('convertedFromCurrency', models.CharField(blank=True, choices=[('RUB', 'Российский рубль'), ('USD', 'Доллар США'), ('EUR', 'Евро'), ('GBP', 'Фунт стерлингов'), ('JPY', 'Японская иена'), ('CNY', 'Китайский юань'), ('AUD', 'Австралийский доллар'), ('CAD', 'Канадский доллар')], max_length=20, null=True, verbose_name='Валюта исходной цены')),
                ('convertedFromValue', models.FloatField(blank=True, null=True, verbose_name='Значение исходной цены')),
                ('pricing_summary', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='fee', to='ebay_order.PricingSummary')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EbayShippingFulfillmentLineItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('line_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ebay_order.EbayOrderLineItem', verbose_name='Товар из заказа')),
                ('shipping_fulfillment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='line_items', related_query_name='line_items', to='ebay_order.EbayShippingFulfillment', verbose_name='Товары из фулфилмента')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
