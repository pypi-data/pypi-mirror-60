#!/usr/bin/env python
from setuptools import setup
setup(
  name = 'cs.progress',
  description = 'A progress tracker with methods for throughput, ETA and update notification',
  author = 'Cameron Simpson',
  author_email = 'cs@cskk.id.au',
  version = '20200129',
  url = 'https://bitbucket.org/cameron_simpson/css/commits/all',
  classifiers = ['Programming Language :: Python', 'Programming Language :: Python :: 2', 'Programming Language :: Python :: 3', 'Development Status :: 4 - Beta', 'Intended Audience :: Developers', 'Operating System :: OS Independent', 'Topic :: Software Development :: Libraries :: Python Modules', 'License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)'],
  include_package_data = True,
  install_requires = ['cs.logutils', 'cs.seq', 'cs.units'],
  keywords = ['python2', 'python3'],
  license = 'GNU General Public License v3 or later (GPLv3+)',
  long_description = '*Latest release 20200129*:\nNew Progress.count_of_total_bytes_text property presenting "3kB/40MB" style text.\n\nA progress tracker with methods for throughput, ETA and update notification.\n\n## Class `BaseProgress`\n\nThe base class for `Progress` and `OverProcess`\nwith various common methods.\n\nNote that durations are in seconds\nand that absolute time is in seconds since the UNIX epoch\n(the basis of `time.time()`).\n\n## Class `CheckPoint(builtins.tuple)`\n\nCheckPoint(time, position)\n\n## Class `OverProgress(BaseProgress)`\n\nA `Progress`-like class computed from a set of subsidiary `Process`es.\n\nExample:\n\n    >>> P = OverProgress(name="over")\n    >>> P1 = Progress(name="progress1", position=12)\n    >>> P1.total = 100\n    >>> P1.advance(7)\n    >>> P2 = Progress(name="progress2", position=20)\n    >>> P2.total = 50\n    >>> P2.advance(9)\n    >>> P.add(P1)\n    >>> P.add(P2)\n    >>> P1.total\n    100\n    >>> P2.total\n    50\n    >>> P.total\n    150\n    >>> P1.start\n    12\n    >>> P2.start\n    20\n    >>> P.start\n    0\n    >>> P1.position\n    19\n    >>> P2.position\n    29\n    >>> P.position\n    16\n\n## Class `Progress(BaseProgress)`\n\nA progress counter to track task completion with various utility methods.\n\nExample:\n\n    >>> P = Progress(name="example")\n    >>> P                         #doctest: +ELLIPSIS\n    Progress(name=\'example\',start=0,position=0,start_time=...,thoughput_window=None,total=None):[CheckPoint(time=..., position=0)]\n    >>> P.advance(5)\n    >>> P                         #doctest: +ELLIPSIS\n    Progress(name=\'example\',start=0,position=5,start_time=...,thoughput_window=None,total=None):[CheckPoint(time=..., position=0), CheckPoint(time=..., position=5)]\n    >>> P.total = 100\n    >>> P                         #doctest: +ELLIPSIS\n    Progress(name=\'example\',start=0,position=5,start_time=...,thoughput_window=None,total=100):[CheckPoint(time=..., position=0), CheckPoint(time=..., position=5)]\n\nA Progress instance has an attribute ``notify_update`` which\nis a set of callables. Whenever the position is updated, each\nof these will be called with the `Progress` instance and the\nlatest `CheckPoint`.\n\n`Progress` objects also make a small pretense of being an integer.\nThe expression `int(progress)` returns the current position,\nand `+=` and `-=` adjust the position.\n\nThis is convenient for coding, but importantly it is also\nuseful for discretionary use of a Progress with some other\nobject.\nIf you want to make a lightweight `Progress` capable class\nyou can set a position attribute to an `int`\nand manipulate it carefully using `+=` and `-=` entirely.\nIf you decide to incur the cost of maintaining a `Progress` object\nyou can slot it in:\n\n    # initial setup with just an int\n    my_thing.amount = 0\n\n    # later, or on some option, use a Progress instance\n    my_thing.amount = Progress(my_thing.amount)\n\n### Method `Progress.__init__(self, position=None, name=None, start=None, start_time=None, throughput_window=None, total=None)`\n\nInitialise the Progesss object.\n\nParameters:\n* `position`: initial position, default `0`.\n* `name`: optional name for this instance.\n* `start`: starting position of progress range,\n  default from `position`.\n* `start_time`: start time of the process, default now.\n* `throughput_window`: length of throughput time window in seconds,\n  default None.\n* `total`: expected completion value, default None.\n\n\n\n# Release Log\n\n*Release 20200129*:\nNew Progress.count_of_total_bytes_text property presenting "3kB/40MB" style text.\n\n*Release 20190812*:\nNew OverProgress class which is a composite of a set of subsidiary Progress instances.\nAssorted other small updates.\n\n*Release 20190220*:\nProgress: be somewhat like an int.\nNew status() method returning a convenient one line progress status report.\n\n*Release 20180703.2*:\nProgress: make .total into a property in order to fire the update notifications.\n\n*Release 20180703.1*:\nProgress: additions and changes to API: new .ratio, .elapsed_time, rename .projected to .remaining_time.\n\n*Release 20180703*:\nInitial release of cs.progress.',
  long_description_content_type = 'text/markdown',
  package_dir = {'': 'lib/python'},
  py_modules = ['cs.progress'],
)
