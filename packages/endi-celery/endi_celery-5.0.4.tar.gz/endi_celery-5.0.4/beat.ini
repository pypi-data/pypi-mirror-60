[app:main]
use = egg:endi_celery#scheduler

pyramid.default_locale_name = fr_FR
pyramid.includes =
                    pyramid_celery


[celery]
BROKER_URL = redis://localhost:6379/0
CELERY_TASK_SERIALIZER = json
#CELERYD_HIJACK_ROOT_LOGGER = False
CELERY_ACCEPT_CONTENT= json
                       yaml

[celerybeat:accounting_parser]
task = endi_celery.tasks.accounting_parser.handle_pool_task
type = timedelta
schedule = {"seconds": 30}

[server:main]
use = egg:waitress#scheduler
host = 0.0.0.0
#host= 0.0.0.0
port = 8080

[pshell]
models = endi_celery.models
db=endi_base.models.base.DBSESSION
transaction=transaction

# Begin logging configuration
[loggers]
keys = root, sqlalchemy, celery

[handlers]
keys = console, file, sqlfile, celery_file

[formatters]
keys = generic, sqlfile

[logger_root]
level = DEBUG
handlers = file, console
propagate = 1

[logger_endi_celery]
level=DEBUG
handlers=file, console
qualname=endi_celery

[logger_sqlalchemy]
level = INFO
handlers = file, sqlfile
qualname = sqlalchemy.engine
propagate=0
# level = INFO logs SQL queries.
# level = DEBUG logs SQL queries and results.
# level = WARN logs neither. (Recommended for production systems.)

[logger_celery]
level=DEBUG
handlers = celery_file, console
propagate=1
qualname = celery

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[handler_file]
class = FileHandler
args = ('logfile.log','a')
level = DEBUG
formatter = generic

[handler_celery_file]
class = FileHandler
args = ('celery.log','a')
level = INFO
formatter = generic

[handler_sqlfile]
class = FileHandler
args = ('sql.log','a')
level = DEBUG
formatter = sqlfile

[formatter_sqlfile]
format = %(message)s

[formatter_generic]
format = %(asctime)-15s %(levelname)-5.5s %(message)s ([%(name)s.%(funcName)s:%(lineno)d])
# End logging configuration
