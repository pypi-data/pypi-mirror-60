"""
Python projects often provide a setup.py file.

The setup.py file contains metadata about the project and what packages and
data it contains. Maintaining the setup.py file can be cumbersome.

This module provides facilities for automatically generating setup.py files
based on information contained in the Znake configuration.
"""

import os
from textwrap import dedent

from .util import render_template


def create_setup_py_file(ctx):
    """Create the setup.py file."""
    with open('./setup.py', 'w') as f:
        f.write(_render_setup_py_data(ctx))


def remove_setup_py_file(ctx):
    """Remove the setup.py file."""
    try:
        os.unlink('./setup.py')
    except FileNotFoundError:
        pass


def _render_install_requirements(ctx):

    def _transform_requirements_to_install_requires(requirements):
        return [
            requirement if '==' not in requirement else requirement.split('==')[0]
            for requirement in requirements
        ]

    template_string = dedent(
        """\
        install_requires=[
        {%- for package in packages %}
            '{{package}}',
        {%- endfor %}
        ]
        """)
    return render_template(
        template_string,
        packages=_transform_requirements_to_install_requires(ctx.znake.requirements))


def _render_entry_points(ctx):
    template_string = dedent(
        """\
        entry_points={
            {%- for name, entry_points in entry_points.items() %}
            '{{name}}': [
                {%- for entry_point in entry_points %}
                '{{entry_point}}',
                {%- endfor %}
            ],
            {%- endfor %}
        }
        """)
    return render_template(template_string, entry_points=ctx.znake.entry_points)


def _render_package_data(ctx):
    template_string = dedent(
        """\
        package_data={
            {%- for data in package_data %}
            '{{data.package}}': [{%- for include in data.include %}'{{include}}'{{', ' if not loop.last}}{% endfor -%} ],
            {%- endfor %}
        }""")  # noqa
    return render_template(template_string, package_data=ctx.znake.package_data)


def _render_setup_py_data(ctx):
    template_string = dedent(
        """\
    # This file was automatically generated by Znake
    try:
        import fastentrypoints
    except ImportError as e:
        pass
    from setuptools import setup, find_packages

    try:
        from {{package}}.version import (
            __version__,
            deb_package_name,
            description,
            long_description,
            maintainer,
            maintainer_email)
    except ImportError:
        __version__ = '0.0.0'
        deb_package_name = 'unknown'
        description = 'unknown'
        long_description = 'unknown'
        maintainer = 'unknown'
        maintainer_email = 'unknown'

    setup(
        name=deb_package_name,
        version=__version__,

        description=description,
        long_description=long_description,

        maintainer=maintainer,
        maintainer_email=maintainer_email,

        license='{{license}}',

        classifiers=[
            {%- for classifier in classifiers %}
            '{{classifier}}',
            {%- endfor %}
        ],

        keywords='{{keywords | join(' ')}}',

        packages=find_packages(exclude=[{% for entry in find_packages_exclude %}'{{entry}}', {% endfor %}]),

        {{install_requires | indent(width=4)}},

        {{entry_points | indent(width=4)}},

        {{package_data | indent(width=4)}},

    )
    """)

    return render_template(
        template_string,
        package=ctx.znake.info.package,
        license=ctx.znake.license,
        classifiers=ctx.znake.classifiers,
        keywords=ctx.znake.keywords,
        find_packages_exclude=ctx.znake.find_packages.exclude,
        install_requires=_render_install_requirements(ctx),
        entry_points=_render_entry_points(ctx),
        package_data=_render_package_data(ctx))
