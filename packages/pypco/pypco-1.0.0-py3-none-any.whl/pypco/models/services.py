"""PCO Services models.

Generated by pypco_generator tool. Manual changes not recommended.
"""

#pylint: disable=C0321,R0903,C0111

from .base_model import BaseModel

# The base Services model
class ServicesModel(BaseModel): pass

# Services Models
class Arrangement(ServicesModel): 
    """Each arrangement belongs to a song and is a different version of that song."""
    ENDPOINT_NAME='songs'

class ArrangementSections(ServicesModel): 
    """Sections of an Arrangement, derived from its chord chart"""
    ENDPOINT_NAME='songs'

class Attachment(ServicesModel): 
    """A file, whether it's stored on Planning Center or linked from another location."""
    ENDPOINT_NAME='media'

class AttachmentActivity(ServicesModel): 
    """Returned from the `open` attachment action."""
    ENDPOINT_NAME=''

class AttachmentType(ServicesModel): 
    """Create an Attachment Type for each type of file you might want only specific people to see. When you attach a file, you can specify an attachment type to then be able to link the file to a position."""
    ENDPOINT_NAME='attachment_types'

class AvailableSignup(ServicesModel): 
    """Signups that are available."""
    ENDPOINT_NAME='people'

class Blockout(ServicesModel): 
    """An object representing a blockout date, and an optional recurrence pattern"""
    ENDPOINT_NAME='people'

class BlockoutDate(ServicesModel): 
    """The actual dates generated by the blockout or its recurrence pattern. Generated up to a year in advance"""
    ENDPOINT_NAME='people'

class BlockoutException(ServicesModel): 
    """A single exception for the dates generated from the blockout"""
    ENDPOINT_NAME='people'

class CheckIn(ServicesModel): 
    """None"""
    ENDPOINT_NAME='people'

class Contributor(ServicesModel): 
    """A Contributor Resource"""
    ENDPOINT_NAME='series'

class CustomSlide(ServicesModel): 
    """A CustomSlide is used for adding text intended for display on a screen."""
    ENDPOINT_NAME='songs'

class EmailTemplate(ServicesModel): 
    """A EmailTemplate Resource"""
    ENDPOINT_NAME='email_templates'

class EmailTemplateRenderedResponse(ServicesModel): 
    """A EmailTemplateRenderedResponse Resource"""
    ENDPOINT_NAME=''

class Folder(ServicesModel): 
    """A folder is a container used to organize multiple Service Types or other Folders."""
    ENDPOINT_NAME='folders'

class FolderPath(ServicesModel): 
    """The Folder path of a Folder"""
    ENDPOINT_NAME='folders'

class Item(ServicesModel): 
    """An item in a plan."""
    ENDPOINT_NAME='songs'

class ItemNote(ServicesModel): 
    """A plan item note that belongs to a category.

Note: You can only assign the category on create. If you want to change category; delete the current note, and create a new one passing in the `item_note_category_id` then.
"""
    ENDPOINT_NAME='songs'

class ItemNoteCategory(ServicesModel): 
    """A category of plan item notes for an entire Service Type."""
    ENDPOINT_NAME='service_types'

class ItemTime(ServicesModel): 
    """None"""
    ENDPOINT_NAME='songs'

class Key(ServicesModel): 
    """Each song arrangement can have multiple keys. A key is the pitch center of the song."""
    ENDPOINT_NAME='songs'

class Layout(ServicesModel): 
    """A Layout is used for formatting text for each item in Projector."""
    ENDPOINT_NAME='service_types'

class Live(ServicesModel): 
    """None"""
    ENDPOINT_NAME='series'

class LiveController(ServicesModel): 
    """A person who can control Services LIVE without the required permissions"""
    ENDPOINT_NAME='service_types'

class Media(ServicesModel): 
    """A piece of media"""
    ENDPOINT_NAME='media'

class MediaSchedule(ServicesModel): 
    """None"""
    ENDPOINT_NAME='media'

class NeededPosition(ServicesModel): 
    """An amount of unfilled positions needed within a team in a plan."""
    ENDPOINT_NAME='series'

class Person(ServicesModel): 
    """A person added to PCO Services."""
    ENDPOINT_NAME='people'

class PersonTeamPositionAssignment(ServicesModel): 
    """A person's assignment to a position within a team."""
    ENDPOINT_NAME='service_types'

class Plan(ServicesModel): 
    """A single plan within a Service Type."""
    ENDPOINT_NAME='service_types'

class PlanNote(ServicesModel): 
    """A specific plan note within a single plan."""
    ENDPOINT_NAME='series'

class PlanNoteCategory(ServicesModel): 
    """A category of plan notes for an entire Service Type."""
    ENDPOINT_NAME='service_types'

class PlanPerson(ServicesModel): 
    """A person scheduled within a specific plan."""
    ENDPOINT_NAME='people'

class PlanPersonTime(ServicesModel): 
    """None"""
    ENDPOINT_NAME='people'

class PlanTemplate(ServicesModel): 
    """A PlanTemplate Resource"""
    ENDPOINT_NAME='service_types'

class PlanTime(ServicesModel): 
    """A time in a plan."""
    ENDPOINT_NAME='people'

class PublicView(ServicesModel): 
    """Manage options for a public plan"""
    ENDPOINT_NAME='service_types'

class Schedule(ServicesModel): 
    """An instance of a PlanPerson with included data for displaying in a user's schedule"""
    ENDPOINT_NAME='people'

class ScheduledPerson(ServicesModel): 
    """A person already scheduled to a SignupSheet"""
    ENDPOINT_NAME='people'

class Series(ServicesModel): 
    """A Series can be specified for each plan to tie plans with similar messages together, even across Service Types.

*Note*: A series is not created until artwork is added from the plan.  You can use `series_title` included in `Plan` attributes to get titles for series without artwork.
"""
    ENDPOINT_NAME='series'

class ServiceType(ServicesModel): 
    """A Service Type is a container for plans."""
    ENDPOINT_NAME='service_types'

class ServiceTypePath(ServicesModel): 
    """The Folder path of a Service Type"""
    ENDPOINT_NAME='service_types'

class SignupSheet(ServicesModel): 
    """Available positions to sign up for"""
    ENDPOINT_NAME='people'

class SignupSheetMetadata(ServicesModel): 
    """A SignupSheetMetadata Resource"""
    ENDPOINT_NAME='people'

class SkippedAttachment(ServicesModel): 
    """a skipped attachment"""
    ENDPOINT_NAME=''

class Slide(ServicesModel): 
    """None"""
    ENDPOINT_NAME='media'

class Song(ServicesModel): 
    """A song"""
    ENDPOINT_NAME='songs'

class SongSchedule(ServicesModel): 
    """A upcoming schedule for a song"""
    ENDPOINT_NAME='songs'

class SplitTeamRehearsalAssignment(ServicesModel): 
    """For Rehearsal/Other Times, maps a Split Team to selected Time Preference Options. For example, used to assign 8am Ushers to 7:30am call time, and 11am Ushers to 10:30am call time."""
    ENDPOINT_NAME='people'

class Tag(ServicesModel): 
    """A tag belonging to a tag group."""
    ENDPOINT_NAME='media'

class TagGroup(ServicesModel): 
    """A tag group contains tags"""
    ENDPOINT_NAME='tag_groups'

class Team(ServicesModel): 
    """A Team within a Service Type."""
    ENDPOINT_NAME='teams'

class TeamLeader(ServicesModel): 
    """A leader of a specific Team in a Service Type."""
    ENDPOINT_NAME='people'

class TeamPosition(ServicesModel): 
    """A position within a team."""
    ENDPOINT_NAME='service_types'

class TextSetting(ServicesModel): 
    """None"""
    ENDPOINT_NAME='people'

class TimePreferenceOption(ServicesModel): 
    """A Service Time a person prefers to be scheduled to."""
    ENDPOINT_NAME='service_types'

class Zoom(ServicesModel): 
    """Describes a zoom level for an attachment"""
    ENDPOINT_NAME='media'
